
fmidi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e60  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08005fe8  08005fe8  00015fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800602c  0800602c  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  0800602c  0800602c  0001602c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006034  08006034  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006034  08006034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006038  08006038  00016038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  0800603c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002154  2000013c  08006178  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002290  08006178  00022290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115d7  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028ff  00000000  00000000  00031743  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ac8  00000000  00000000  00034048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000990  00000000  00000000  00034b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d00  00000000  00000000  000354a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bdf5  00000000  00000000  000581a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2ef9  00000000  00000000  00063f95  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00126e8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a74  00000000  00000000  00126f0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000013c 	.word	0x2000013c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005fd0 	.word	0x08005fd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000140 	.word	0x20000140
 80001c4:	08005fd0 	.word	0x08005fd0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 f971 	bl	80007b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f821 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f889 	bl	80005ec <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004da:	f004 ffa5 	bl	8005428 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t buttonPressFlag = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	71fb      	strb	r3, [r7, #7]

  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)== GPIO_PIN_SET)
 80004e2:	2101      	movs	r1, #1
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <main+0x4c>)
 80004e6:	f000 fca5 	bl	8000e34 <HAL_GPIO_ReadPin>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d10d      	bne.n	800050c <main+0x44>
	  {
		  if(buttonPressFlag==0)
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d1f5      	bne.n	80004e2 <main+0x1a>
		  {
			  buttonPressFlag = 1;
 80004f6:	2301      	movs	r3, #1
 80004f8:	71fb      	strb	r3, [r7, #7]
			  USBD_AddNoteOn(0, 0, 55, 55);
 80004fa:	2337      	movs	r3, #55	; 0x37
 80004fc:	2237      	movs	r2, #55	; 0x37
 80004fe:	2100      	movs	r1, #0
 8000500:	2000      	movs	r0, #0
 8000502:	f005 f909 	bl	8005718 <USBD_AddNoteOn>
			  USBD_SendMidiMessages();
 8000506:	f005 f8eb 	bl	80056e0 <USBD_SendMidiMessages>
 800050a:	e7ea      	b.n	80004e2 <main+0x1a>
		  }
	  }
	  else
	  {
		  buttonPressFlag = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	71fb      	strb	r3, [r7, #7]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)== GPIO_PIN_SET)
 8000510:	e7e7      	b.n	80004e2 <main+0x1a>
 8000512:	bf00      	nop
 8000514:	40020000 	.word	0x40020000

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f005 fd4a 	bl	8005fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a27      	ldr	r2, [pc, #156]	; (80005e4 <SystemClock_Config+0xcc>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SystemClock_Config+0xd0>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1f      	ldr	r3, [pc, #124]	; (80005e8 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000588:	2304      	movs	r3, #4
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800058c:	23a8      	movs	r3, #168	; 0xa8
 800058e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000594:	2307      	movs	r3, #7
 8000596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f001 fdcd 	bl	800213c <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a8:	f000 f85c 	bl	8000664 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2105      	movs	r1, #5
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 f826 	bl	800261c <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005d6:	f000 f845 	bl	8000664 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_GPIO_Init+0x70>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a14      	ldr	r2, [pc, #80]	; (800065c <MX_GPIO_Init+0x70>)
 800060c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_GPIO_Init+0x70>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_GPIO_Init+0x70>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a0d      	ldr	r2, [pc, #52]	; (800065c <MX_GPIO_Init+0x70>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <MX_GPIO_Init+0x70>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800063a:	2301      	movs	r3, #1
 800063c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	f107 030c 	add.w	r3, r7, #12
 800064a:	4619      	mov	r1, r3
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_GPIO_Init+0x74>)
 800064e:	f000 fa57 	bl	8000b00 <HAL_GPIO_Init>

}
 8000652:	bf00      	nop
 8000654:	3720      	adds	r7, #32
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40020000 	.word	0x40020000

08000664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
	...

08000674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <HAL_MspInit+0x4c>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <HAL_MspInit+0x4c>)
 8000684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000688:	6453      	str	r3, [r2, #68]	; 0x44
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <HAL_MspInit+0x4c>)
 800068c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <HAL_MspInit+0x4c>)
 800069c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <HAL_MspInit+0x4c>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a4:	6413      	str	r3, [r2, #64]	; 0x40
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_MspInit+0x4c>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <MemManage_Handler+0x4>

080006de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000718:	f000 f89e 	bl	8000858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <OTG_FS_IRQHandler+0x10>)
 8000726:	f000 fced 	bl	8001104 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20001e88 	.word	0x20001e88

08000734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <SystemInit+0x28>)
 800073a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073e:	4a07      	ldr	r2, [pc, #28]	; (800075c <SystemInit+0x28>)
 8000740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <SystemInit+0x28>)
 800074a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800074e:	609a      	str	r2, [r3, #8]
#endif
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000798 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000764:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000766:	e003      	b.n	8000770 <LoopCopyDataInit>

08000768 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800076a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800076c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800076e:	3104      	adds	r1, #4

08000770 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000774:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000776:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000778:	d3f6      	bcc.n	8000768 <CopyDataInit>
  ldr  r2, =_sbss
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800077c:	e002      	b.n	8000784 <LoopFillZerobss>

0800077e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800077e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000780:	f842 3b04 	str.w	r3, [r2], #4

08000784 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000786:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000788:	d3f9      	bcc.n	800077e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800078a:	f7ff ffd3 	bl	8000734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800078e:	f005 fbf3 	bl	8005f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000792:	f7ff fe99 	bl	80004c8 <main>
  bx  lr    
 8000796:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000798:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800079c:	0800603c 	.word	0x0800603c
  ldr  r0, =_sdata
 80007a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80007a4:	2000013c 	.word	0x2000013c
  ldr  r2, =_sbss
 80007a8:	2000013c 	.word	0x2000013c
  ldr  r3, = _ebss
 80007ac:	20002290 	.word	0x20002290

080007b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC_IRQHandler>
	...

080007b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <HAL_Init+0x40>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <HAL_Init+0x40>)
 80007be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <HAL_Init+0x40>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <HAL_Init+0x40>)
 80007ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <HAL_Init+0x40>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <HAL_Init+0x40>)
 80007d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007dc:	2003      	movs	r0, #3
 80007de:	f000 f94d 	bl	8000a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f000 f808 	bl	80007f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e8:	f7ff ff44 	bl	8000674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023c00 	.word	0x40023c00

080007f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_InitTick+0x54>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_InitTick+0x58>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4619      	mov	r1, r3
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000812:	fbb2 f3f3 	udiv	r3, r2, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f965 	bl	8000ae6 <HAL_SYSTICK_Config>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e00e      	b.n	8000844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b0f      	cmp	r3, #15
 800082a:	d80a      	bhi.n	8000842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000834:	f000 f92d 	bl	8000a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000838:	4a06      	ldr	r2, [pc, #24]	; (8000854 <HAL_InitTick+0x5c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800083e:	2300      	movs	r3, #0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000000 	.word	0x20000000
 8000850:	20000008 	.word	0x20000008
 8000854:	20000004 	.word	0x20000004

08000858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <HAL_IncTick+0x20>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_IncTick+0x24>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <HAL_IncTick+0x24>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000008 	.word	0x20000008
 800087c:	2000016c 	.word	0x2000016c

08000880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return uwTick;
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <HAL_GetTick+0x14>)
 8000886:	681b      	ldr	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	2000016c 	.word	0x2000016c

08000898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a0:	f7ff ffee 	bl	8000880 <HAL_GetTick>
 80008a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008b0:	d005      	beq.n	80008be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_Delay+0x40>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4413      	add	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008be:	bf00      	nop
 80008c0:	f7ff ffde 	bl	8000880 <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d8f7      	bhi.n	80008c0 <HAL_Delay+0x28>
  {
  }
}
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000008 	.word	0x20000008

080008dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090e:	4a04      	ldr	r2, [pc, #16]	; (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	60d3      	str	r3, [r2, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <__NVIC_GetPriorityGrouping+0x18>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	f003 0307 	and.w	r3, r3, #7
}
 8000932:	4618      	mov	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	2b00      	cmp	r3, #0
 8000950:	db0b      	blt.n	800096a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	f003 021f 	and.w	r2, r3, #31
 8000958:	4907      	ldr	r1, [pc, #28]	; (8000978 <__NVIC_EnableIRQ+0x38>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	095b      	lsrs	r3, r3, #5
 8000960:	2001      	movs	r0, #1
 8000962:	fa00 f202 	lsl.w	r2, r0, r2
 8000966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000e100 	.word	0xe000e100

0800097c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	6039      	str	r1, [r7, #0]
 8000986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	db0a      	blt.n	80009a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	b2da      	uxtb	r2, r3
 8000994:	490c      	ldr	r1, [pc, #48]	; (80009c8 <__NVIC_SetPriority+0x4c>)
 8000996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099a:	0112      	lsls	r2, r2, #4
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	440b      	add	r3, r1
 80009a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a4:	e00a      	b.n	80009bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4908      	ldr	r1, [pc, #32]	; (80009cc <__NVIC_SetPriority+0x50>)
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	f003 030f 	and.w	r3, r3, #15
 80009b2:	3b04      	subs	r3, #4
 80009b4:	0112      	lsls	r2, r2, #4
 80009b6:	b2d2      	uxtb	r2, r2
 80009b8:	440b      	add	r3, r1
 80009ba:	761a      	strb	r2, [r3, #24]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	e000e100 	.word	0xe000e100
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b089      	sub	sp, #36	; 0x24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	f1c3 0307 	rsb	r3, r3, #7
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	bf28      	it	cs
 80009ee:	2304      	movcs	r3, #4
 80009f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3304      	adds	r3, #4
 80009f6:	2b06      	cmp	r3, #6
 80009f8:	d902      	bls.n	8000a00 <NVIC_EncodePriority+0x30>
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3b03      	subs	r3, #3
 80009fe:	e000      	b.n	8000a02 <NVIC_EncodePriority+0x32>
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43da      	mvns	r2, r3
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	401a      	ands	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a22:	43d9      	mvns	r1, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	4313      	orrs	r3, r2
         );
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3724      	adds	r7, #36	; 0x24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a48:	d301      	bcc.n	8000a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00f      	b.n	8000a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <SysTick_Config+0x40>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a56:	210f      	movs	r1, #15
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a5c:	f7ff ff8e 	bl	800097c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <SysTick_Config+0x40>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <SysTick_Config+0x40>)
 8000a68:	2207      	movs	r2, #7
 8000a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	e000e010 	.word	0xe000e010

08000a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f7ff ff29 	bl	80008dc <__NVIC_SetPriorityGrouping>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b086      	sub	sp, #24
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	60b9      	str	r1, [r7, #8]
 8000a9c:	607a      	str	r2, [r7, #4]
 8000a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa4:	f7ff ff3e 	bl	8000924 <__NVIC_GetPriorityGrouping>
 8000aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	68b9      	ldr	r1, [r7, #8]
 8000aae:	6978      	ldr	r0, [r7, #20]
 8000ab0:	f7ff ff8e 	bl	80009d0 <NVIC_EncodePriority>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aba:	4611      	mov	r1, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff5d 	bl	800097c <__NVIC_SetPriority>
}
 8000ac2:	bf00      	nop
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff31 	bl	8000940 <__NVIC_EnableIRQ>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff ffa2 	bl	8000a38 <SysTick_Config>
 8000af4:	4603      	mov	r3, r0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	e16b      	b.n	8000df4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	f040 815a 	bne.w	8000dee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d00b      	beq.n	8000b5a <HAL_GPIO_Init+0x5a>
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d007      	beq.n	8000b5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b4e:	2b11      	cmp	r3, #17
 8000b50:	d003      	beq.n	8000b5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	2b12      	cmp	r3, #18
 8000b58:	d130      	bne.n	8000bbc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2203      	movs	r2, #3
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b90:	2201      	movs	r2, #1
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	091b      	lsrs	r3, r3, #4
 8000ba6:	f003 0201 	and.w	r2, r3, #1
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	689a      	ldr	r2, [r3, #8]
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_Init+0xfc>
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b12      	cmp	r3, #18
 8000bfa:	d123      	bne.n	8000c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	08da      	lsrs	r2, r3, #3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3208      	adds	r2, #8
 8000c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	f003 0307 	and.w	r3, r3, #7
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	220f      	movs	r2, #15
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	691a      	ldr	r2, [r3, #16]
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	08da      	lsrs	r2, r3, #3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3208      	adds	r2, #8
 8000c3e:	69b9      	ldr	r1, [r7, #24]
 8000c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 0203 	and.w	r2, r3, #3
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f000 80b4 	beq.w	8000dee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b5f      	ldr	r3, [pc, #380]	; (8000e08 <HAL_GPIO_Init+0x308>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	4a5e      	ldr	r2, [pc, #376]	; (8000e08 <HAL_GPIO_Init+0x308>)
 8000c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c94:	6453      	str	r3, [r2, #68]	; 0x44
 8000c96:	4b5c      	ldr	r3, [pc, #368]	; (8000e08 <HAL_GPIO_Init+0x308>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ca2:	4a5a      	ldr	r2, [pc, #360]	; (8000e0c <HAL_GPIO_Init+0x30c>)
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	3302      	adds	r3, #2
 8000caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	220f      	movs	r2, #15
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a51      	ldr	r2, [pc, #324]	; (8000e10 <HAL_GPIO_Init+0x310>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d02b      	beq.n	8000d26 <HAL_GPIO_Init+0x226>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a50      	ldr	r2, [pc, #320]	; (8000e14 <HAL_GPIO_Init+0x314>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d025      	beq.n	8000d22 <HAL_GPIO_Init+0x222>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a4f      	ldr	r2, [pc, #316]	; (8000e18 <HAL_GPIO_Init+0x318>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d01f      	beq.n	8000d1e <HAL_GPIO_Init+0x21e>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a4e      	ldr	r2, [pc, #312]	; (8000e1c <HAL_GPIO_Init+0x31c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d019      	beq.n	8000d1a <HAL_GPIO_Init+0x21a>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a4d      	ldr	r2, [pc, #308]	; (8000e20 <HAL_GPIO_Init+0x320>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d013      	beq.n	8000d16 <HAL_GPIO_Init+0x216>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a4c      	ldr	r2, [pc, #304]	; (8000e24 <HAL_GPIO_Init+0x324>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d00d      	beq.n	8000d12 <HAL_GPIO_Init+0x212>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a4b      	ldr	r2, [pc, #300]	; (8000e28 <HAL_GPIO_Init+0x328>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d007      	beq.n	8000d0e <HAL_GPIO_Init+0x20e>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a4a      	ldr	r2, [pc, #296]	; (8000e2c <HAL_GPIO_Init+0x32c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d101      	bne.n	8000d0a <HAL_GPIO_Init+0x20a>
 8000d06:	2307      	movs	r3, #7
 8000d08:	e00e      	b.n	8000d28 <HAL_GPIO_Init+0x228>
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	e00c      	b.n	8000d28 <HAL_GPIO_Init+0x228>
 8000d0e:	2306      	movs	r3, #6
 8000d10:	e00a      	b.n	8000d28 <HAL_GPIO_Init+0x228>
 8000d12:	2305      	movs	r3, #5
 8000d14:	e008      	b.n	8000d28 <HAL_GPIO_Init+0x228>
 8000d16:	2304      	movs	r3, #4
 8000d18:	e006      	b.n	8000d28 <HAL_GPIO_Init+0x228>
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e004      	b.n	8000d28 <HAL_GPIO_Init+0x228>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	e002      	b.n	8000d28 <HAL_GPIO_Init+0x228>
 8000d22:	2301      	movs	r3, #1
 8000d24:	e000      	b.n	8000d28 <HAL_GPIO_Init+0x228>
 8000d26:	2300      	movs	r3, #0
 8000d28:	69fa      	ldr	r2, [r7, #28]
 8000d2a:	f002 0203 	and.w	r2, r2, #3
 8000d2e:	0092      	lsls	r2, r2, #2
 8000d30:	4093      	lsls	r3, r2
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d38:	4934      	ldr	r1, [pc, #208]	; (8000e0c <HAL_GPIO_Init+0x30c>)
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	3302      	adds	r3, #2
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d46:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <HAL_GPIO_Init+0x330>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4013      	ands	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d6a:	4a31      	ldr	r2, [pc, #196]	; (8000e30 <HAL_GPIO_Init+0x330>)
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d70:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <HAL_GPIO_Init+0x330>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d94:	4a26      	ldr	r2, [pc, #152]	; (8000e30 <HAL_GPIO_Init+0x330>)
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d9a:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <HAL_GPIO_Init+0x330>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4013      	ands	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dbe:	4a1c      	ldr	r2, [pc, #112]	; (8000e30 <HAL_GPIO_Init+0x330>)
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_GPIO_Init+0x330>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000de8:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <HAL_GPIO_Init+0x330>)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3301      	adds	r3, #1
 8000df2:	61fb      	str	r3, [r7, #28]
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	2b0f      	cmp	r3, #15
 8000df8:	f67f ae90 	bls.w	8000b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3724      	adds	r7, #36	; 0x24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40013800 	.word	0x40013800
 8000e10:	40020000 	.word	0x40020000
 8000e14:	40020400 	.word	0x40020400
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	40020c00 	.word	0x40020c00
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40021400 	.word	0x40021400
 8000e28:	40021800 	.word	0x40021800
 8000e2c:	40021c00 	.word	0x40021c00
 8000e30:	40013c00 	.word	0x40013c00

08000e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	887b      	ldrh	r3, [r7, #2]
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d002      	beq.n	8000e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
 8000e50:	e001      	b.n	8000e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e66:	b08f      	sub	sp, #60	; 0x3c
 8000e68:	af0a      	add	r7, sp, #40	; 0x28
 8000e6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e10f      	b.n	8001096 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d106      	bne.n	8000e96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f004 fd87 	bl	80059a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d102      	bne.n	8000eb0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 fe90 	bl	8002bda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	687e      	ldr	r6, [r7, #4]
 8000ec2:	466d      	mov	r5, sp
 8000ec4:	f106 0410 	add.w	r4, r6, #16
 8000ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ed4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ed8:	1d33      	adds	r3, r6, #4
 8000eda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000edc:	6838      	ldr	r0, [r7, #0]
 8000ede:	f001 fd67 	bl	80029b0 <USB_CoreInit>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d005      	beq.n	8000ef4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2202      	movs	r2, #2
 8000eec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e0d0      	b.n	8001096 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fe7e 	bl	8002bfc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e04a      	b.n	8000f9c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f06:	7bfa      	ldrb	r2, [r7, #15]
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	333d      	adds	r3, #61	; 0x3d
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	1a9b      	subs	r3, r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	440b      	add	r3, r1
 8000f28:	333c      	adds	r3, #60	; 0x3c
 8000f2a:	7bfa      	ldrb	r2, [r7, #15]
 8000f2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	b298      	uxth	r0, r3
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	440b      	add	r3, r1
 8000f40:	3342      	adds	r3, #66	; 0x42
 8000f42:	4602      	mov	r2, r0
 8000f44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	1a9b      	subs	r3, r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	333f      	adds	r3, #63	; 0x3f
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	1a9b      	subs	r3, r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	3344      	adds	r3, #68	; 0x44
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	1a9b      	subs	r3, r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	3348      	adds	r3, #72	; 0x48
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f82:	7bfa      	ldrb	r2, [r7, #15]
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	1a9b      	subs	r3, r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	440b      	add	r3, r1
 8000f90:	3350      	adds	r3, #80	; 0x50
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d3af      	bcc.n	8000f06 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e044      	b.n	8001036 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fac:	7bfa      	ldrb	r2, [r7, #15]
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	1a9b      	subs	r3, r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fc2:	7bfa      	ldrb	r2, [r7, #15]
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	1a9b      	subs	r3, r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000fd4:	7bfa      	ldrb	r2, [r7, #15]
 8000fd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	1a9b      	subs	r3, r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	1a9b      	subs	r3, r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4613      	mov	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	1a9b      	subs	r3, r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	440b      	add	r3, r1
 8001012:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	1a9b      	subs	r3, r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	440b      	add	r3, r1
 8001028:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	3301      	adds	r3, #1
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	d3b5      	bcc.n	8000fac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	687e      	ldr	r6, [r7, #4]
 8001048:	466d      	mov	r5, sp
 800104a:	f106 0410 	add.w	r4, r6, #16
 800104e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001056:	e894 0003 	ldmia.w	r4, {r0, r1}
 800105a:	e885 0003 	stmia.w	r5, {r0, r1}
 800105e:	1d33      	adds	r3, r6, #4
 8001060:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001062:	6838      	ldr	r0, [r7, #0]
 8001064:	f001 fdf4 	bl	8002c50 <USB_DevInit>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2202      	movs	r2, #2
 8001072:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00d      	b.n	8001096 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f002 fe33 	bl	8003cfa <USB_DevDisconnect>

  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800109e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <HAL_PCD_Start+0x1c>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e020      	b.n	80010fc <HAL_PCD_Start+0x5e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d109      	bne.n	80010de <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d005      	beq.n	80010de <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f002 fdf1 	bl	8003cca <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fd63 	bl	8002bb8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b08d      	sub	sp, #52	; 0x34
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f002 fe98 	bl	8003e50 <USB_GetMode>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	f040 839d 	bne.w	8001862 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f002 fdfc 	bl	8003d2a <USB_ReadInterrupts>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 8393 	beq.w	8001860 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fdf3 	bl	8003d2a <USB_ReadInterrupts>
 8001144:	4603      	mov	r3, r0
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b02      	cmp	r3, #2
 800114c:	d107      	bne.n	800115e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	695a      	ldr	r2, [r3, #20]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f002 0202 	and.w	r2, r2, #2
 800115c:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f002 fde1 	bl	8003d2a <USB_ReadInterrupts>
 8001168:	4603      	mov	r3, r0
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	2b10      	cmp	r3, #16
 8001170:	d161      	bne.n	8001236 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	699a      	ldr	r2, [r3, #24]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0210 	bic.w	r2, r2, #16
 8001180:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	6a1b      	ldr	r3, [r3, #32]
 8001186:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	f003 020f 	and.w	r2, r3, #15
 800118e:	4613      	mov	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	1a9b      	subs	r3, r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	3304      	adds	r3, #4
 80011a0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	0c5b      	lsrs	r3, r3, #17
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d124      	bne.n	80011f8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d035      	beq.n	8001226 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	6a38      	ldr	r0, [r7, #32]
 80011ce:	f002 fc59 	bl	8003a84 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011de:	441a      	add	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	699a      	ldr	r2, [r3, #24]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	091b      	lsrs	r3, r3, #4
 80011ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011f0:	441a      	add	r2, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	619a      	str	r2, [r3, #24]
 80011f6:	e016      	b.n	8001226 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	0c5b      	lsrs	r3, r3, #17
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	2b06      	cmp	r3, #6
 8001202:	d110      	bne.n	8001226 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800120a:	2208      	movs	r2, #8
 800120c:	4619      	mov	r1, r3
 800120e:	6a38      	ldr	r0, [r7, #32]
 8001210:	f002 fc38 	bl	8003a84 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001220:	441a      	add	r2, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	699a      	ldr	r2, [r3, #24]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0210 	orr.w	r2, r2, #16
 8001234:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f002 fd75 	bl	8003d2a <USB_ReadInterrupts>
 8001240:	4603      	mov	r3, r0
 8001242:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001246:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800124a:	d16e      	bne.n	800132a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f002 fd7b 	bl	8003d50 <USB_ReadDevAllOutEpInterrupt>
 800125a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800125c:	e062      	b.n	8001324 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f002 fda0 	bl	8003db8 <USB_ReadDevOutEPInterrupt>
 8001278:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00c      	beq.n	800129e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	015a      	lsls	r2, r3, #5
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	4413      	add	r3, r2
 800128c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001290:	461a      	mov	r2, r3
 8001292:	2301      	movs	r3, #1
 8001294:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001296:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 fd99 	bl	8001dd0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00c      	beq.n	80012c2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	015a      	lsls	r2, r3, #5
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	4413      	add	r3, r2
 80012b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012b4:	461a      	mov	r2, r3
 80012b6:	2308      	movs	r3, #8
 80012b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fe93 	bl	8001fe8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	015a      	lsls	r2, r3, #5
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	4413      	add	r3, r2
 80012d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012d8:	461a      	mov	r2, r3
 80012da:	2310      	movs	r3, #16
 80012dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	f003 0320 	and.w	r3, r3, #32
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	015a      	lsls	r2, r3, #5
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	4413      	add	r3, r2
 80012f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012f4:	461a      	mov	r2, r3
 80012f6:	2320      	movs	r3, #32
 80012f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d009      	beq.n	8001318 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	015a      	lsls	r2, r3, #5
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	4413      	add	r3, r2
 800130c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001310:	461a      	mov	r2, r3
 8001312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001316:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	3301      	adds	r3, #1
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	085b      	lsrs	r3, r3, #1
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001326:	2b00      	cmp	r3, #0
 8001328:	d199      	bne.n	800125e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fcfb 	bl	8003d2a <USB_ReadInterrupts>
 8001334:	4603      	mov	r3, r0
 8001336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800133e:	f040 80c0 	bne.w	80014c2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fd1c 	bl	8003d84 <USB_ReadDevAllInEpInterrupt>
 800134c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001352:	e0b2      	b.n	80014ba <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 80a7 	beq.w	80014ae <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f002 fd42 	bl	8003df4 <USB_ReadDevInEPInterrupt>
 8001370:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d057      	beq.n	800142c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	2201      	movs	r2, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	69f9      	ldr	r1, [r7, #28]
 8001398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800139c:	4013      	ands	r3, r2
 800139e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	015a      	lsls	r2, r3, #5
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	4413      	add	r3, r2
 80013a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013ac:	461a      	mov	r2, r3
 80013ae:	2301      	movs	r3, #1
 80013b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d132      	bne.n	8001420 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	1a9b      	subs	r3, r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	3348      	adds	r3, #72	; 0x48
 80013ca:	6819      	ldr	r1, [r3, #0]
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d0:	4613      	mov	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	1a9b      	subs	r3, r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4403      	add	r3, r0
 80013da:	3344      	adds	r3, #68	; 0x44
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4419      	add	r1, r3
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	1a9b      	subs	r3, r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4403      	add	r3, r0
 80013ee:	3348      	adds	r3, #72	; 0x48
 80013f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d113      	bne.n	8001420 <HAL_PCD_IRQHandler+0x31c>
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fc:	4613      	mov	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	1a9b      	subs	r3, r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	3350      	adds	r3, #80	; 0x50
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d108      	bne.n	8001420 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001418:	461a      	mov	r2, r3
 800141a:	2101      	movs	r1, #1
 800141c:	f002 fd4a 	bl	8003eb4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	b2db      	uxtb	r3, r3
 8001424:	4619      	mov	r1, r3
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f004 fb3d 	bl	8005aa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d008      	beq.n	8001448 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	015a      	lsls	r2, r3, #5
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	4413      	add	r3, r2
 800143e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001442:	461a      	mov	r2, r3
 8001444:	2308      	movs	r3, #8
 8001446:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	d008      	beq.n	8001464 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	015a      	lsls	r2, r3, #5
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	4413      	add	r3, r2
 800145a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800145e:	461a      	mov	r2, r3
 8001460:	2310      	movs	r3, #16
 8001462:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d008      	beq.n	8001480 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	015a      	lsls	r2, r3, #5
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	4413      	add	r3, r2
 8001476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800147a:	461a      	mov	r2, r3
 800147c:	2340      	movs	r3, #64	; 0x40
 800147e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d008      	beq.n	800149c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	015a      	lsls	r2, r3, #5
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	4413      	add	r3, r2
 8001492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001496:	461a      	mov	r2, r3
 8001498:	2302      	movs	r3, #2
 800149a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 fc03 	bl	8001cb4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	3301      	adds	r3, #1
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b6:	085b      	lsrs	r3, r3, #1
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f47f af49 	bne.w	8001354 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f002 fc2f 	bl	8003d2a <USB_ReadInterrupts>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014d6:	d122      	bne.n	800151e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d108      	bne.n	8001508 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80014fe:	2100      	movs	r1, #0
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 fe0f 	bl	8002124 <HAL_PCDEx_LPM_Callback>
 8001506:	e002      	b.n	800150e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f004 fb43 	bl	8005b94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	695a      	ldr	r2, [r3, #20]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800151c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f002 fc01 	bl	8003d2a <USB_ReadInterrupts>
 8001528:	4603      	mov	r3, r0
 800152a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800152e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001532:	d112      	bne.n	800155a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b01      	cmp	r3, #1
 8001542:	d102      	bne.n	800154a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f004 faff 	bl	8005b48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	695a      	ldr	r2, [r3, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001558:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f002 fbe3 	bl	8003d2a <USB_ReadInterrupts>
 8001564:	4603      	mov	r3, r0
 8001566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800156e:	f040 80c7 	bne.w	8001700 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2110      	movs	r1, #16
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fcc3 	bl	8002f18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001596:	e056      	b.n	8001646 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159a:	015a      	lsls	r2, r3, #5
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	4413      	add	r3, r2
 80015a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015a4:	461a      	mov	r2, r3
 80015a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ae:	015a      	lsls	r2, r3, #5
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	4413      	add	r3, r2
 80015b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015bc:	0151      	lsls	r1, r2, #5
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	440a      	add	r2, r1
 80015c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015ca:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	015a      	lsls	r2, r3, #5
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	4413      	add	r3, r2
 80015d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015dc:	0151      	lsls	r1, r2, #5
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	440a      	add	r2, r1
 80015e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80015ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ee:	015a      	lsls	r2, r3, #5
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	4413      	add	r3, r2
 80015f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015f8:	461a      	mov	r2, r3
 80015fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4413      	add	r3, r2
 8001608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001610:	0151      	lsls	r1, r2, #5
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	440a      	add	r2, r1
 8001616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800161a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800161e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001622:	015a      	lsls	r2, r3, #5
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	4413      	add	r3, r2
 8001628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001630:	0151      	lsls	r1, r2, #5
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	440a      	add	r2, r1
 8001636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800163a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800163e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	3301      	adds	r3, #1
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800164c:	429a      	cmp	r2, r3
 800164e:	d3a3      	bcc.n	8001598 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800165e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001662:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	2b00      	cmp	r3, #0
 800166a:	d016      	beq.n	800169a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800167c:	f043 030b 	orr.w	r3, r3, #11
 8001680:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800168a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168c:	69fa      	ldr	r2, [r7, #28]
 800168e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001692:	f043 030b 	orr.w	r3, r3, #11
 8001696:	6453      	str	r3, [r2, #68]	; 0x44
 8001698:	e015      	b.n	80016c6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016ac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016b0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c0:	f043 030b 	orr.w	r3, r3, #11
 80016c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016ea:	461a      	mov	r2, r3
 80016ec:	f002 fbe2 	bl	8003eb4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f002 fb10 	bl	8003d2a <USB_ReadInterrupts>
 800170a:	4603      	mov	r3, r0
 800170c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001714:	d124      	bne.n	8001760 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f002 fba6 	bl	8003e6c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f001 fc58 	bl	8002fda <USB_GetDevSpeed>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681c      	ldr	r4, [r3, #0]
 8001736:	f001 f92f 	bl	8002998 <HAL_RCC_GetHCLKFreq>
 800173a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001740:	b2db      	uxtb	r3, r3
 8001742:	461a      	mov	r2, r3
 8001744:	4620      	mov	r0, r4
 8001746:	f001 f995 	bl	8002a74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f004 f9d3 	bl	8005af6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695a      	ldr	r2, [r3, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800175e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fae0 	bl	8003d2a <USB_ReadInterrupts>
 800176a:	4603      	mov	r3, r0
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b08      	cmp	r3, #8
 8001772:	d10a      	bne.n	800178a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f004 f9b0 	bl	8005ada <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f002 0208 	and.w	r2, r2, #8
 8001788:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f002 facb 	bl	8003d2a <USB_ReadInterrupts>
 8001794:	4603      	mov	r3, r0
 8001796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800179e:	d10f      	bne.n	80017c0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	4619      	mov	r1, r3
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f004 fa12 	bl	8005bd4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80017be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fab0 	bl	8003d2a <USB_ReadInterrupts>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017d4:	d10f      	bne.n	80017f6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	4619      	mov	r1, r3
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f004 f9e5 	bl	8005bb0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695a      	ldr	r2, [r3, #20]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80017f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 fa95 	bl	8003d2a <USB_ReadInterrupts>
 8001800:	4603      	mov	r3, r0
 8001802:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180a:	d10a      	bne.n	8001822 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f004 f9f3 	bl	8005bf8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	695a      	ldr	r2, [r3, #20]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001820:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f002 fa7f 	bl	8003d2a <USB_ReadInterrupts>
 800182c:	4603      	mov	r3, r0
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	2b04      	cmp	r3, #4
 8001834:	d115      	bne.n	8001862 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f004 f9e3 	bl	8005c14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6859      	ldr	r1, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	430a      	orrs	r2, r1
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	e000      	b.n	8001862 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001860:	bf00      	nop
    }
  }
}
 8001862:	3734      	adds	r7, #52	; 0x34
 8001864:	46bd      	mov	sp, r7
 8001866:	bd90      	pop	{r4, r7, pc}

08001868 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_PCD_SetAddress+0x1a>
 800187e:	2302      	movs	r3, #2
 8001880:	e013      	b.n	80018aa <HAL_PCD_SetAddress+0x42>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	78fa      	ldrb	r2, [r7, #3]
 800188e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	4611      	mov	r1, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f002 f9ef 	bl	8003c7e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b084      	sub	sp, #16
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	4608      	mov	r0, r1
 80018bc:	4611      	mov	r1, r2
 80018be:	461a      	mov	r2, r3
 80018c0:	4603      	mov	r3, r0
 80018c2:	70fb      	strb	r3, [r7, #3]
 80018c4:	460b      	mov	r3, r1
 80018c6:	803b      	strh	r3, [r7, #0]
 80018c8:	4613      	mov	r3, r2
 80018ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	da0f      	bge.n	80018f8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	f003 020f 	and.w	r2, r3, #15
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	3338      	adds	r3, #56	; 0x38
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	3304      	adds	r3, #4
 80018ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2201      	movs	r2, #1
 80018f4:	705a      	strb	r2, [r3, #1]
 80018f6:	e00f      	b.n	8001918 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	f003 020f 	and.w	r2, r3, #15
 80018fe:	4613      	mov	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	3304      	adds	r3, #4
 8001910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	b2da      	uxtb	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001924:	883a      	ldrh	r2, [r7, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	78ba      	ldrb	r2, [r7, #2]
 800192e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	785b      	ldrb	r3, [r3, #1]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d004      	beq.n	8001942 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001942:	78bb      	ldrb	r3, [r7, #2]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d102      	bne.n	800194e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_PCD_EP_Open+0xaa>
 8001958:	2302      	movs	r3, #2
 800195a:	e00e      	b.n	800197a <HAL_PCD_EP_Open+0xc8>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68f9      	ldr	r1, [r7, #12]
 800196a:	4618      	mov	r0, r3
 800196c:	f001 fb5a 	bl	8003024 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001978:	7afb      	ldrb	r3, [r7, #11]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800198e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001992:	2b00      	cmp	r3, #0
 8001994:	da0f      	bge.n	80019b6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	f003 020f 	and.w	r2, r3, #15
 800199c:	4613      	mov	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	3338      	adds	r3, #56	; 0x38
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	3304      	adds	r3, #4
 80019ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2201      	movs	r2, #1
 80019b2:	705a      	strb	r2, [r3, #1]
 80019b4:	e00f      	b.n	80019d6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	f003 020f 	and.w	r2, r3, #15
 80019bc:	4613      	mov	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	3304      	adds	r3, #4
 80019ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	f003 030f 	and.w	r3, r3, #15
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_PCD_EP_Close+0x6e>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e00e      	b.n	8001a0e <HAL_PCD_EP_Close+0x8c>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68f9      	ldr	r1, [r7, #12]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f001 fb98 	bl	8003134 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	460b      	mov	r3, r1
 8001a24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a26:	7afb      	ldrb	r3, [r7, #11]
 8001a28:	f003 020f 	and.w	r2, r3, #15
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2200      	movs	r2, #0
 8001a56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a58:	7afb      	ldrb	r3, [r7, #11]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d102      	bne.n	8001a72 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a72:	7afb      	ldrb	r3, [r7, #11]
 8001a74:	f003 030f 	and.w	r3, r3, #15
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d109      	bne.n	8001a90 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	6979      	ldr	r1, [r7, #20]
 8001a8a:	f001 fe73 	bl	8003774 <USB_EP0StartXfer>
 8001a8e:	e008      	b.n	8001aa2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	6979      	ldr	r1, [r7, #20]
 8001a9e:	f001 fc25 	bl	80032ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001abc:	7afb      	ldrb	r3, [r7, #11]
 8001abe:	f003 020f 	and.w	r2, r3, #15
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	3338      	adds	r3, #56	; 0x38
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aec:	7afb      	ldrb	r3, [r7, #11]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d102      	bne.n	8001b06 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b06:	7afb      	ldrb	r3, [r7, #11]
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d109      	bne.n	8001b24 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	6979      	ldr	r1, [r7, #20]
 8001b1e:	f001 fe29 	bl	8003774 <USB_EP0StartXfer>
 8001b22:	e008      	b.n	8001b36 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	6979      	ldr	r1, [r7, #20]
 8001b32:	f001 fbdb 	bl	80032ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	f003 020f 	and.w	r2, r3, #15
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d901      	bls.n	8001b5e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e050      	b.n	8001c00 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	da0f      	bge.n	8001b86 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	f003 020f 	and.w	r2, r3, #15
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	1a9b      	subs	r3, r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	3338      	adds	r3, #56	; 0x38
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2201      	movs	r2, #1
 8001b82:	705a      	strb	r2, [r3, #1]
 8001b84:	e00d      	b.n	8001ba2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	1a9b      	subs	r3, r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	4413      	add	r3, r2
 8001b98:	3304      	adds	r3, #4
 8001b9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_PCD_EP_SetStall+0x82>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e01e      	b.n	8001c00 <HAL_PCD_EP_SetStall+0xc0>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68f9      	ldr	r1, [r7, #12]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f001 ff80 	bl	8003ad6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10a      	bne.n	8001bf6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	b2d9      	uxtb	r1, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f002 f95f 	bl	8003eb4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	f003 020f 	and.w	r2, r3, #15
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d901      	bls.n	8001c26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e042      	b.n	8001cac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	da0f      	bge.n	8001c4e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	f003 020f 	and.w	r2, r3, #15
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	3338      	adds	r3, #56	; 0x38
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	3304      	adds	r3, #4
 8001c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	705a      	strb	r2, [r3, #1]
 8001c4c:	e00f      	b.n	8001c6e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f003 020f 	and.w	r2, r3, #15
 8001c54:	4613      	mov	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4413      	add	r3, r2
 8001c64:	3304      	adds	r3, #4
 8001c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_PCD_EP_ClrStall+0x86>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e00e      	b.n	8001cac <HAL_PCD_EP_ClrStall+0xa4>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68f9      	ldr	r1, [r7, #12]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f001 ff88 	bl	8003bb2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	1a9b      	subs	r3, r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	3338      	adds	r3, #56	; 0x38
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3304      	adds	r3, #4
 8001cda:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	699a      	ldr	r2, [r3, #24]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d901      	bls.n	8001cec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e06c      	b.n	8001dc6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	695a      	ldr	r2, [r3, #20]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d902      	bls.n	8001d08 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	3303      	adds	r3, #3
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d10:	e02b      	b.n	8001d6a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d902      	bls.n	8001d2e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3303      	adds	r3, #3
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	68d9      	ldr	r1, [r3, #12]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6978      	ldr	r0, [r7, #20]
 8001d4e:	f001 fe64 	bl	8003a1a <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	441a      	add	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	699a      	ldr	r2, [r3, #24]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	441a      	add	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d809      	bhi.n	8001d94 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	699a      	ldr	r2, [r3, #24]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d203      	bcs.n	8001d94 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1be      	bne.n	8001d12 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	695a      	ldr	r2, [r3, #20]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d811      	bhi.n	8001dc4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	2201      	movs	r2, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	6939      	ldr	r1, [r7, #16]
 8001dbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3720      	adds	r7, #32
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	333c      	adds	r3, #60	; 0x3c
 8001de8:	3304      	adds	r3, #4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	015a      	lsls	r2, r3, #5
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	f040 80a0 	bne.w	8001f48 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d015      	beq.n	8001e3e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4a72      	ldr	r2, [pc, #456]	; (8001fe0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	f240 80dd 	bls.w	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80d7 	beq.w	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	015a      	lsls	r2, r3, #5
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4413      	add	r3, r2
 8001e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e34:	461a      	mov	r2, r3
 8001e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e3a:	6093      	str	r3, [r2, #8]
 8001e3c:	e0cb      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d009      	beq.n	8001e5c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e54:	461a      	mov	r2, r3
 8001e56:	2320      	movs	r3, #32
 8001e58:	6093      	str	r3, [r2, #8]
 8001e5a:	e0bc      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 80b7 	bne.w	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4a5d      	ldr	r2, [pc, #372]	; (8001fe0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d90f      	bls.n	8001e90 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e86:	461a      	mov	r2, r3
 8001e88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e8c:	6093      	str	r3, [r2, #8]
 8001e8e:	e0a2      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ea2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	0159      	lsls	r1, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	440b      	add	r3, r1
 8001eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001eb6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4403      	add	r3, r0
 8001ec6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001eca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4403      	add	r3, r0
 8001eee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4419      	add	r1, r3
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	1a9b      	subs	r3, r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4403      	add	r3, r0
 8001f04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f08:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d114      	bne.n	8001f3a <PCD_EP_OutXfrComplete_int+0x16a>
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d108      	bne.n	8001f3a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f32:	461a      	mov	r2, r3
 8001f34:	2101      	movs	r1, #1
 8001f36:	f001 ffbd 	bl	8003eb4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	4619      	mov	r1, r3
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f003 fd95 	bl	8005a70 <HAL_PCD_DataOutStageCallback>
 8001f46:	e046      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4a26      	ldr	r2, [pc, #152]	; (8001fe4 <PCD_EP_OutXfrComplete_int+0x214>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d124      	bne.n	8001f9a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f66:	461a      	mov	r2, r3
 8001f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f6c:	6093      	str	r3, [r2, #8]
 8001f6e:	e032      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f86:	461a      	mov	r2, r3
 8001f88:	2320      	movs	r3, #32
 8001f8a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	4619      	mov	r1, r3
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f003 fd6c 	bl	8005a70 <HAL_PCD_DataOutStageCallback>
 8001f98:	e01d      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d114      	bne.n	8001fca <PCD_EP_OutXfrComplete_int+0x1fa>
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d108      	bne.n	8001fca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	f001 ff75 	bl	8003eb4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f003 fd4d 	bl	8005a70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	4f54300a 	.word	0x4f54300a
 8001fe4:	4f54310a 	.word	0x4f54310a

08001fe8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	333c      	adds	r3, #60	; 0x3c
 8002000:	3304      	adds	r3, #4
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4413      	add	r3, r2
 800200e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4a15      	ldr	r2, [pc, #84]	; (8002070 <PCD_EP_OutSetupPacket_int+0x88>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d90e      	bls.n	800203c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002024:	2b00      	cmp	r3, #0
 8002026:	d009      	beq.n	800203c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002034:	461a      	mov	r2, r3
 8002036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800203a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f003 fd05 	bl	8005a4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <PCD_EP_OutSetupPacket_int+0x88>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d90c      	bls.n	8002064 <PCD_EP_OutSetupPacket_int+0x7c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d108      	bne.n	8002064 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800205c:	461a      	mov	r2, r3
 800205e:	2101      	movs	r1, #1
 8002060:	f001 ff28 	bl	8003eb4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	4f54300a 	.word	0x4f54300a

08002074 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
 8002080:	4613      	mov	r3, r2
 8002082:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d107      	bne.n	80020a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002092:	883b      	ldrh	r3, [r7, #0]
 8002094:	0419      	lsls	r1, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	430a      	orrs	r2, r1
 800209e:	629a      	str	r2, [r3, #40]	; 0x28
 80020a0:	e028      	b.n	80020f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	0c1b      	lsrs	r3, r3, #16
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	4413      	add	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	e00d      	b.n	80020d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	3340      	adds	r3, #64	; 0x40
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	0c1b      	lsrs	r3, r3, #16
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	4413      	add	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	3301      	adds	r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	429a      	cmp	r2, r3
 80020da:	d3ec      	bcc.n	80020b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80020dc:	883b      	ldrh	r3, [r7, #0]
 80020de:	0418      	lsls	r0, r3, #16
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	4302      	orrs	r2, r0
 80020ec:	3340      	adds	r3, #64	; 0x40
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	887a      	ldrh	r2, [r7, #2]
 8002114:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e25b      	b.n	8002606 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d075      	beq.n	8002246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800215a:	4ba3      	ldr	r3, [pc, #652]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b04      	cmp	r3, #4
 8002164:	d00c      	beq.n	8002180 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002166:	4ba0      	ldr	r3, [pc, #640]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800216e:	2b08      	cmp	r3, #8
 8002170:	d112      	bne.n	8002198 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002172:	4b9d      	ldr	r3, [pc, #628]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800217e:	d10b      	bne.n	8002198 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002180:	4b99      	ldr	r3, [pc, #612]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d05b      	beq.n	8002244 <HAL_RCC_OscConfig+0x108>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d157      	bne.n	8002244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e236      	b.n	8002606 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a0:	d106      	bne.n	80021b0 <HAL_RCC_OscConfig+0x74>
 80021a2:	4b91      	ldr	r3, [pc, #580]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a90      	ldr	r2, [pc, #576]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e01d      	b.n	80021ec <HAL_RCC_OscConfig+0xb0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x98>
 80021ba:	4b8b      	ldr	r3, [pc, #556]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a8a      	ldr	r2, [pc, #552]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b88      	ldr	r3, [pc, #544]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a87      	ldr	r2, [pc, #540]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_OscConfig+0xb0>
 80021d4:	4b84      	ldr	r3, [pc, #528]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a83      	ldr	r2, [pc, #524]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b81      	ldr	r3, [pc, #516]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a80      	ldr	r2, [pc, #512]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe fb44 	bl	8000880 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021fc:	f7fe fb40 	bl	8000880 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e1fb      	b.n	8002606 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0xc0>
 800221a:	e014      	b.n	8002246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe fb30 	bl	8000880 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002224:	f7fe fb2c 	bl	8000880 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e1e7      	b.n	8002606 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	4b6c      	ldr	r3, [pc, #432]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0xe8>
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d063      	beq.n	800231a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002252:	4b65      	ldr	r3, [pc, #404]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225e:	4b62      	ldr	r3, [pc, #392]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002266:	2b08      	cmp	r3, #8
 8002268:	d11c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800226a:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d116      	bne.n	80022a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	4b5c      	ldr	r3, [pc, #368]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_RCC_OscConfig+0x152>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e1bb      	b.n	8002606 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228e:	4b56      	ldr	r3, [pc, #344]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4952      	ldr	r1, [pc, #328]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	e03a      	b.n	800231a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d020      	beq.n	80022ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ac:	4b4f      	ldr	r3, [pc, #316]	; (80023ec <HAL_RCC_OscConfig+0x2b0>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b2:	f7fe fae5 	bl	8000880 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ba:	f7fe fae1 	bl	8000880 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e19c      	b.n	8002606 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	4b46      	ldr	r3, [pc, #280]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d8:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4940      	ldr	r1, [pc, #256]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]
 80022ec:	e015      	b.n	800231a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ee:	4b3f      	ldr	r3, [pc, #252]	; (80023ec <HAL_RCC_OscConfig+0x2b0>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe fac4 	bl	8000880 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fc:	f7fe fac0 	bl	8000880 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e17b      	b.n	8002606 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d030      	beq.n	8002388 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d016      	beq.n	800235c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232e:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <HAL_RCC_OscConfig+0x2b4>)
 8002330:	2201      	movs	r2, #1
 8002332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7fe faa4 	bl	8000880 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800233c:	f7fe faa0 	bl	8000880 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e15b      	b.n	8002606 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x200>
 800235a:	e015      	b.n	8002388 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800235c:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_RCC_OscConfig+0x2b4>)
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002362:	f7fe fa8d 	bl	8000880 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236a:	f7fe fa89 	bl	8000880 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e144      	b.n	8002606 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f0      	bne.n	800236a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80a0 	beq.w	80024d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239a:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10f      	bne.n	80023c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c2:	2301      	movs	r3, #1
 80023c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCC_OscConfig+0x2b8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d121      	bne.n	8002416 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_RCC_OscConfig+0x2b8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a07      	ldr	r2, [pc, #28]	; (80023f4 <HAL_RCC_OscConfig+0x2b8>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023de:	f7fe fa4f 	bl	8000880 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	e011      	b.n	800240a <HAL_RCC_OscConfig+0x2ce>
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	42470000 	.word	0x42470000
 80023f0:	42470e80 	.word	0x42470e80
 80023f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f8:	f7fe fa42 	bl	8000880 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e0fd      	b.n	8002606 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240a:	4b81      	ldr	r3, [pc, #516]	; (8002610 <HAL_RCC_OscConfig+0x4d4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d106      	bne.n	800242c <HAL_RCC_OscConfig+0x2f0>
 800241e:	4b7d      	ldr	r3, [pc, #500]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a7c      	ldr	r2, [pc, #496]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6713      	str	r3, [r2, #112]	; 0x70
 800242a:	e01c      	b.n	8002466 <HAL_RCC_OscConfig+0x32a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b05      	cmp	r3, #5
 8002432:	d10c      	bne.n	800244e <HAL_RCC_OscConfig+0x312>
 8002434:	4b77      	ldr	r3, [pc, #476]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	4a76      	ldr	r2, [pc, #472]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	6713      	str	r3, [r2, #112]	; 0x70
 8002440:	4b74      	ldr	r3, [pc, #464]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	4a73      	ldr	r2, [pc, #460]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6713      	str	r3, [r2, #112]	; 0x70
 800244c:	e00b      	b.n	8002466 <HAL_RCC_OscConfig+0x32a>
 800244e:	4b71      	ldr	r3, [pc, #452]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 8002450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002452:	4a70      	ldr	r2, [pc, #448]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6713      	str	r3, [r2, #112]	; 0x70
 800245a:	4b6e      	ldr	r3, [pc, #440]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 800245c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245e:	4a6d      	ldr	r2, [pc, #436]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 8002460:	f023 0304 	bic.w	r3, r3, #4
 8002464:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d015      	beq.n	800249a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246e:	f7fe fa07 	bl	8000880 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7fe fa03 	bl	8000880 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	; 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e0bc      	b.n	8002606 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248c:	4b61      	ldr	r3, [pc, #388]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0ee      	beq.n	8002476 <HAL_RCC_OscConfig+0x33a>
 8002498:	e014      	b.n	80024c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249a:	f7fe f9f1 	bl	8000880 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7fe f9ed 	bl	8000880 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e0a6      	b.n	8002606 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b8:	4b56      	ldr	r3, [pc, #344]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1ee      	bne.n	80024a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d105      	bne.n	80024d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ca:	4b52      	ldr	r3, [pc, #328]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a51      	ldr	r2, [pc, #324]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 80024d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8092 	beq.w	8002604 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024e0:	4b4c      	ldr	r3, [pc, #304]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d05c      	beq.n	80025a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d141      	bne.n	8002578 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f4:	4b48      	ldr	r3, [pc, #288]	; (8002618 <HAL_RCC_OscConfig+0x4dc>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7fe f9c1 	bl	8000880 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002502:	f7fe f9bd 	bl	8000880 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e078      	b.n	8002606 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002514:	4b3f      	ldr	r3, [pc, #252]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f0      	bne.n	8002502 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69da      	ldr	r2, [r3, #28]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	019b      	lsls	r3, r3, #6
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	085b      	lsrs	r3, r3, #1
 8002538:	3b01      	subs	r3, #1
 800253a:	041b      	lsls	r3, r3, #16
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	061b      	lsls	r3, r3, #24
 8002544:	4933      	ldr	r1, [pc, #204]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800254a:	4b33      	ldr	r3, [pc, #204]	; (8002618 <HAL_RCC_OscConfig+0x4dc>)
 800254c:	2201      	movs	r2, #1
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe f996 	bl	8000880 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002558:	f7fe f992 	bl	8000880 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e04d      	b.n	8002606 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x41c>
 8002576:	e045      	b.n	8002604 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002578:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_RCC_OscConfig+0x4dc>)
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7fe f97f 	bl	8000880 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002586:	f7fe f97b 	bl	8000880 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e036      	b.n	8002606 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002598:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f0      	bne.n	8002586 <HAL_RCC_OscConfig+0x44a>
 80025a4:	e02e      	b.n	8002604 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e029      	b.n	8002606 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_RCC_OscConfig+0x4d8>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d11c      	bne.n	8002600 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d115      	bne.n	8002600 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025da:	4013      	ands	r3, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d10d      	bne.n	8002600 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d106      	bne.n	8002600 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40007000 	.word	0x40007000
 8002614:	40023800 	.word	0x40023800
 8002618:	42470060 	.word	0x42470060

0800261c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0cc      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b68      	ldr	r3, [pc, #416]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 030f 	and.w	r3, r3, #15
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d90c      	bls.n	8002658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b63      	ldr	r3, [pc, #396]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0b8      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d020      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002670:	4b59      	ldr	r3, [pc, #356]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800267a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002688:	4b53      	ldr	r3, [pc, #332]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a52      	ldr	r2, [pc, #328]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002694:	4b50      	ldr	r3, [pc, #320]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	494d      	ldr	r1, [pc, #308]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d044      	beq.n	800273c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d119      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e07f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d003      	beq.n	80026da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e06f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e067      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fa:	4b37      	ldr	r3, [pc, #220]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f023 0203 	bic.w	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4934      	ldr	r1, [pc, #208]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	4313      	orrs	r3, r2
 800270a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800270c:	f7fe f8b8 	bl	8000880 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	e00a      	b.n	800272a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002714:	f7fe f8b4 	bl	8000880 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e04f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 020c 	and.w	r2, r3, #12
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	429a      	cmp	r2, r3
 800273a:	d1eb      	bne.n	8002714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d20c      	bcs.n	8002764 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e032      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002770:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4916      	ldr	r1, [pc, #88]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	490e      	ldr	r1, [pc, #56]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027a2:	f000 f821 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 80027a6:	4601      	mov	r1, r0
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	5cd3      	ldrb	r3, [r2, r3]
 80027b6:	fa21 f303 	lsr.w	r3, r1, r3
 80027ba:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe f818 	bl	80007f8 <HAL_InitTick>

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023c00 	.word	0x40023c00
 80027d8:	40023800 	.word	0x40023800
 80027dc:	0800601c 	.word	0x0800601c
 80027e0:	20000000 	.word	0x20000000
 80027e4:	20000004 	.word	0x20000004

080027e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	2300      	movs	r3, #0
 80027f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027fe:	4b63      	ldr	r3, [pc, #396]	; (800298c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b04      	cmp	r3, #4
 8002808:	d007      	beq.n	800281a <HAL_RCC_GetSysClockFreq+0x32>
 800280a:	2b08      	cmp	r3, #8
 800280c:	d008      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x38>
 800280e:	2b00      	cmp	r3, #0
 8002810:	f040 80b4 	bne.w	800297c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002814:	4b5e      	ldr	r3, [pc, #376]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002816:	60bb      	str	r3, [r7, #8]
       break;
 8002818:	e0b3      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800281a:	4b5e      	ldr	r3, [pc, #376]	; (8002994 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800281c:	60bb      	str	r3, [r7, #8]
      break;
 800281e:	e0b0      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002820:	4b5a      	ldr	r3, [pc, #360]	; (800298c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002828:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800282a:	4b58      	ldr	r3, [pc, #352]	; (800298c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d04a      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002836:	4b55      	ldr	r3, [pc, #340]	; (800298c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	099b      	lsrs	r3, r3, #6
 800283c:	f04f 0400 	mov.w	r4, #0
 8002840:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	ea03 0501 	and.w	r5, r3, r1
 800284c:	ea04 0602 	and.w	r6, r4, r2
 8002850:	4629      	mov	r1, r5
 8002852:	4632      	mov	r2, r6
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	f04f 0400 	mov.w	r4, #0
 800285c:	0154      	lsls	r4, r2, #5
 800285e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002862:	014b      	lsls	r3, r1, #5
 8002864:	4619      	mov	r1, r3
 8002866:	4622      	mov	r2, r4
 8002868:	1b49      	subs	r1, r1, r5
 800286a:	eb62 0206 	sbc.w	r2, r2, r6
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	f04f 0400 	mov.w	r4, #0
 8002876:	0194      	lsls	r4, r2, #6
 8002878:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800287c:	018b      	lsls	r3, r1, #6
 800287e:	1a5b      	subs	r3, r3, r1
 8002880:	eb64 0402 	sbc.w	r4, r4, r2
 8002884:	f04f 0100 	mov.w	r1, #0
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	00e2      	lsls	r2, r4, #3
 800288e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002892:	00d9      	lsls	r1, r3, #3
 8002894:	460b      	mov	r3, r1
 8002896:	4614      	mov	r4, r2
 8002898:	195b      	adds	r3, r3, r5
 800289a:	eb44 0406 	adc.w	r4, r4, r6
 800289e:	f04f 0100 	mov.w	r1, #0
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	0262      	lsls	r2, r4, #9
 80028a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028ac:	0259      	lsls	r1, r3, #9
 80028ae:	460b      	mov	r3, r1
 80028b0:	4614      	mov	r4, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	4621      	mov	r1, r4
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f04f 0400 	mov.w	r4, #0
 80028bc:	461a      	mov	r2, r3
 80028be:	4623      	mov	r3, r4
 80028c0:	f7fd fc82 	bl	80001c8 <__aeabi_uldivmod>
 80028c4:	4603      	mov	r3, r0
 80028c6:	460c      	mov	r4, r1
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	e049      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028cc:	4b2f      	ldr	r3, [pc, #188]	; (800298c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	099b      	lsrs	r3, r3, #6
 80028d2:	f04f 0400 	mov.w	r4, #0
 80028d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	ea03 0501 	and.w	r5, r3, r1
 80028e2:	ea04 0602 	and.w	r6, r4, r2
 80028e6:	4629      	mov	r1, r5
 80028e8:	4632      	mov	r2, r6
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	f04f 0400 	mov.w	r4, #0
 80028f2:	0154      	lsls	r4, r2, #5
 80028f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028f8:	014b      	lsls	r3, r1, #5
 80028fa:	4619      	mov	r1, r3
 80028fc:	4622      	mov	r2, r4
 80028fe:	1b49      	subs	r1, r1, r5
 8002900:	eb62 0206 	sbc.w	r2, r2, r6
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	f04f 0400 	mov.w	r4, #0
 800290c:	0194      	lsls	r4, r2, #6
 800290e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002912:	018b      	lsls	r3, r1, #6
 8002914:	1a5b      	subs	r3, r3, r1
 8002916:	eb64 0402 	sbc.w	r4, r4, r2
 800291a:	f04f 0100 	mov.w	r1, #0
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	00e2      	lsls	r2, r4, #3
 8002924:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002928:	00d9      	lsls	r1, r3, #3
 800292a:	460b      	mov	r3, r1
 800292c:	4614      	mov	r4, r2
 800292e:	195b      	adds	r3, r3, r5
 8002930:	eb44 0406 	adc.w	r4, r4, r6
 8002934:	f04f 0100 	mov.w	r1, #0
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	02a2      	lsls	r2, r4, #10
 800293e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002942:	0299      	lsls	r1, r3, #10
 8002944:	460b      	mov	r3, r1
 8002946:	4614      	mov	r4, r2
 8002948:	4618      	mov	r0, r3
 800294a:	4621      	mov	r1, r4
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f04f 0400 	mov.w	r4, #0
 8002952:	461a      	mov	r2, r3
 8002954:	4623      	mov	r3, r4
 8002956:	f7fd fc37 	bl	80001c8 <__aeabi_uldivmod>
 800295a:	4603      	mov	r3, r0
 800295c:	460c      	mov	r4, r1
 800295e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	0c1b      	lsrs	r3, r3, #16
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	3301      	adds	r3, #1
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	fbb2 f3f3 	udiv	r3, r2, r3
 8002978:	60bb      	str	r3, [r7, #8]
      break;
 800297a:	e002      	b.n	8002982 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800297c:	4b04      	ldr	r3, [pc, #16]	; (8002990 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800297e:	60bb      	str	r3, [r7, #8]
      break;
 8002980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002982:	68bb      	ldr	r3, [r7, #8]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800298c:	40023800 	.word	0x40023800
 8002990:	00f42400 	.word	0x00f42400
 8002994:	007a1200 	.word	0x007a1200

08002998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_RCC_GetHCLKFreq+0x14>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000000 	.word	0x20000000

080029b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029b0:	b084      	sub	sp, #16
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	f107 001c 	add.w	r0, r7, #28
 80029be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d122      	bne.n	8002a0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80029dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80029f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d105      	bne.n	8002a02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f001 fab4 	bl	8003f70 <USB_CoreReset>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	73fb      	strb	r3, [r7, #15]
 8002a0c:	e01a      	b.n	8002a44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f001 faa8 	bl	8003f70 <USB_CoreReset>
 8002a20:	4603      	mov	r3, r0
 8002a22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	639a      	str	r2, [r3, #56]	; 0x38
 8002a36:	e005      	b.n	8002a44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d10b      	bne.n	8002a62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f043 0206 	orr.w	r2, r3, #6
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f043 0220 	orr.w	r2, r3, #32
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a6e:	b004      	add	sp, #16
 8002a70:	4770      	bx	lr
	...

08002a74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d165      	bne.n	8002b54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4a41      	ldr	r2, [pc, #260]	; (8002b90 <USB_SetTurnaroundTime+0x11c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d906      	bls.n	8002a9e <USB_SetTurnaroundTime+0x2a>
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4a40      	ldr	r2, [pc, #256]	; (8002b94 <USB_SetTurnaroundTime+0x120>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d802      	bhi.n	8002a9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002a98:	230f      	movs	r3, #15
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	e062      	b.n	8002b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4a3c      	ldr	r2, [pc, #240]	; (8002b94 <USB_SetTurnaroundTime+0x120>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d906      	bls.n	8002ab4 <USB_SetTurnaroundTime+0x40>
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4a3b      	ldr	r2, [pc, #236]	; (8002b98 <USB_SetTurnaroundTime+0x124>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d802      	bhi.n	8002ab4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002aae:	230e      	movs	r3, #14
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	e057      	b.n	8002b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4a38      	ldr	r2, [pc, #224]	; (8002b98 <USB_SetTurnaroundTime+0x124>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d906      	bls.n	8002aca <USB_SetTurnaroundTime+0x56>
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4a37      	ldr	r2, [pc, #220]	; (8002b9c <USB_SetTurnaroundTime+0x128>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d802      	bhi.n	8002aca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002ac4:	230d      	movs	r3, #13
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	e04c      	b.n	8002b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	4a33      	ldr	r2, [pc, #204]	; (8002b9c <USB_SetTurnaroundTime+0x128>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d906      	bls.n	8002ae0 <USB_SetTurnaroundTime+0x6c>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4a32      	ldr	r2, [pc, #200]	; (8002ba0 <USB_SetTurnaroundTime+0x12c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d802      	bhi.n	8002ae0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002ada:	230c      	movs	r3, #12
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	e041      	b.n	8002b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4a2f      	ldr	r2, [pc, #188]	; (8002ba0 <USB_SetTurnaroundTime+0x12c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d906      	bls.n	8002af6 <USB_SetTurnaroundTime+0x82>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4a2e      	ldr	r2, [pc, #184]	; (8002ba4 <USB_SetTurnaroundTime+0x130>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d802      	bhi.n	8002af6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002af0:	230b      	movs	r3, #11
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e036      	b.n	8002b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4a2a      	ldr	r2, [pc, #168]	; (8002ba4 <USB_SetTurnaroundTime+0x130>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d906      	bls.n	8002b0c <USB_SetTurnaroundTime+0x98>
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4a29      	ldr	r2, [pc, #164]	; (8002ba8 <USB_SetTurnaroundTime+0x134>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d802      	bhi.n	8002b0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002b06:	230a      	movs	r3, #10
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	e02b      	b.n	8002b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4a26      	ldr	r2, [pc, #152]	; (8002ba8 <USB_SetTurnaroundTime+0x134>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d906      	bls.n	8002b22 <USB_SetTurnaroundTime+0xae>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4a25      	ldr	r2, [pc, #148]	; (8002bac <USB_SetTurnaroundTime+0x138>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d802      	bhi.n	8002b22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002b1c:	2309      	movs	r3, #9
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	e020      	b.n	8002b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4a21      	ldr	r2, [pc, #132]	; (8002bac <USB_SetTurnaroundTime+0x138>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d906      	bls.n	8002b38 <USB_SetTurnaroundTime+0xc4>
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	4a20      	ldr	r2, [pc, #128]	; (8002bb0 <USB_SetTurnaroundTime+0x13c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d802      	bhi.n	8002b38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002b32:	2308      	movs	r3, #8
 8002b34:	617b      	str	r3, [r7, #20]
 8002b36:	e015      	b.n	8002b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <USB_SetTurnaroundTime+0x13c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d906      	bls.n	8002b4e <USB_SetTurnaroundTime+0xda>
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4a1c      	ldr	r2, [pc, #112]	; (8002bb4 <USB_SetTurnaroundTime+0x140>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d802      	bhi.n	8002b4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002b48:	2307      	movs	r3, #7
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	e00a      	b.n	8002b64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002b4e:	2306      	movs	r3, #6
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	e007      	b.n	8002b64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002b5a:	2309      	movs	r3, #9
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	e001      	b.n	8002b64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002b60:	2309      	movs	r3, #9
 8002b62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	029b      	lsls	r3, r3, #10
 8002b78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	00d8acbf 	.word	0x00d8acbf
 8002b94:	00e4e1bf 	.word	0x00e4e1bf
 8002b98:	00f423ff 	.word	0x00f423ff
 8002b9c:	0106737f 	.word	0x0106737f
 8002ba0:	011a499f 	.word	0x011a499f
 8002ba4:	01312cff 	.word	0x01312cff
 8002ba8:	014ca43f 	.word	0x014ca43f
 8002bac:	016e35ff 	.word	0x016e35ff
 8002bb0:	01a6ab1f 	.word	0x01a6ab1f
 8002bb4:	01e847ff 	.word	0x01e847ff

08002bb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f043 0201 	orr.w	r2, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f023 0201 	bic.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d106      	bne.n	8002c28 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	e00b      	b.n	8002c40 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	e001      	b.n	8002c40 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e003      	b.n	8002c48 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002c40:	2032      	movs	r0, #50	; 0x32
 8002c42:	f7fd fe29 	bl	8000898 <HAL_Delay>

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c50:	b084      	sub	sp, #16
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	e009      	b.n	8002c84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	3340      	adds	r3, #64	; 0x40
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	3301      	adds	r3, #1
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	2b0e      	cmp	r3, #14
 8002c88:	d9f2      	bls.n	8002c70 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d11c      	bne.n	8002cca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c9e:	f043 0302 	orr.w	r3, r3, #2
 8002ca2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	639a      	str	r2, [r3, #56]	; 0x38
 8002cc8:	e00b      	b.n	8002ce2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2300      	movs	r3, #0
 8002cec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	680b      	ldr	r3, [r1, #0]
 8002d00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d10c      	bne.n	8002d22 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d104      	bne.n	8002d18 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d0e:	2100      	movs	r1, #0
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f949 	bl	8002fa8 <USB_SetDevSpeed>
 8002d16:	e008      	b.n	8002d2a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d18:	2101      	movs	r1, #1
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f944 	bl	8002fa8 <USB_SetDevSpeed>
 8002d20:	e003      	b.n	8002d2a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d22:	2103      	movs	r1, #3
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f93f 	bl	8002fa8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d2a:	2110      	movs	r1, #16
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f8f3 	bl	8002f18 <USB_FlushTxFifo>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f911 	bl	8002f64 <USB_FlushRxFifo>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d52:	461a      	mov	r2, r3
 8002d54:	2300      	movs	r3, #0
 8002d56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2300      	movs	r3, #0
 8002d62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	e043      	b.n	8002dfe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d8c:	d118      	bne.n	8002dc0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da0:	461a      	mov	r2, r3
 8002da2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	e013      	b.n	8002dd2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db6:	461a      	mov	r2, r3
 8002db8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e008      	b.n	8002dd2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dcc:	461a      	mov	r2, r3
 8002dce:	2300      	movs	r3, #0
 8002dd0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dde:	461a      	mov	r2, r3
 8002de0:	2300      	movs	r3, #0
 8002de2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df0:	461a      	mov	r2, r3
 8002df2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002df6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d3b7      	bcc.n	8002d76 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	e043      	b.n	8002e94 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e22:	d118      	bne.n	8002e56 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10a      	bne.n	8002e40 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e36:	461a      	mov	r2, r3
 8002e38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e013      	b.n	8002e68 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	e008      	b.n	8002e68 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e62:	461a      	mov	r2, r3
 8002e64:	2300      	movs	r3, #0
 8002e66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e74:	461a      	mov	r2, r3
 8002e76:	2300      	movs	r3, #0
 8002e78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e86:	461a      	mov	r2, r3
 8002e88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	3301      	adds	r3, #1
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d3b7      	bcc.n	8002e0c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002ebc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d105      	bne.n	8002ed0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	f043 0210 	orr.w	r2, r3, #16
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699a      	ldr	r2, [r3, #24]
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <USB_DevInit+0x2c4>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f043 0208 	orr.w	r2, r3, #8
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d107      	bne.n	8002f04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002efc:	f043 0304 	orr.w	r3, r3, #4
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f10:	b004      	add	sp, #16
 8002f12:	4770      	bx	lr
 8002f14:	803c3800 	.word	0x803c3800

08002f18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	019b      	lsls	r3, r3, #6
 8002f2a:	f043 0220 	orr.w	r2, r3, #32
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3301      	adds	r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4a09      	ldr	r2, [pc, #36]	; (8002f60 <USB_FlushTxFifo+0x48>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e006      	b.n	8002f52 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	d0f0      	beq.n	8002f32 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	00030d40 	.word	0x00030d40

08002f64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2210      	movs	r2, #16
 8002f74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4a09      	ldr	r2, [pc, #36]	; (8002fa4 <USB_FlushRxFifo+0x40>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e006      	b.n	8002f96 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d0f0      	beq.n	8002f76 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	00030d40 	.word	0x00030d40

08002fa8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	68f9      	ldr	r1, [r7, #12]
 8002fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b087      	sub	sp, #28
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0306 	and.w	r3, r3, #6
 8002ff2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	75fb      	strb	r3, [r7, #23]
 8002ffe:	e00a      	b.n	8003016 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d002      	beq.n	800300c <USB_GetDevSpeed+0x32>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b06      	cmp	r3, #6
 800300a:	d102      	bne.n	8003012 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800300c:	2302      	movs	r3, #2
 800300e:	75fb      	strb	r3, [r7, #23]
 8003010:	e001      	b.n	8003016 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003012:	230f      	movs	r3, #15
 8003014:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003016:	7dfb      	ldrb	r3, [r7, #23]
}
 8003018:	4618      	mov	r0, r3
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	785b      	ldrb	r3, [r3, #1]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d13a      	bne.n	80030b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	2101      	movs	r1, #1
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	b29b      	uxth	r3, r3
 8003058:	68f9      	ldr	r1, [r7, #12]
 800305a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800305e:	4313      	orrs	r3, r2
 8003060:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d155      	bne.n	8003124 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4413      	add	r3, r2
 8003080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	78db      	ldrb	r3, [r3, #3]
 8003092:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003094:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	059b      	lsls	r3, r3, #22
 800309a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800309c:	4313      	orrs	r3, r2
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	0151      	lsls	r1, r2, #5
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	440a      	add	r2, r1
 80030a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	e036      	b.n	8003124 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030bc:	69da      	ldr	r2, [r3, #28]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	2101      	movs	r1, #1
 80030c8:	fa01 f303 	lsl.w	r3, r1, r3
 80030cc:	041b      	lsls	r3, r3, #16
 80030ce:	68f9      	ldr	r1, [r7, #12]
 80030d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d11a      	bne.n	8003124 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	78db      	ldrb	r3, [r3, #3]
 8003108:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800310a:	430b      	orrs	r3, r1
 800310c:	4313      	orrs	r3, r2
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	0151      	lsls	r1, r2, #5
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	440a      	add	r2, r1
 8003116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800311a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003122:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	785b      	ldrb	r3, [r3, #1]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d161      	bne.n	8003214 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003162:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003166:	d11f      	bne.n	80031a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	0151      	lsls	r1, r2, #5
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	440a      	add	r2, r1
 800317e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003182:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003186:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	0151      	lsls	r1, r2, #5
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	440a      	add	r2, r1
 800319e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f303 	lsl.w	r3, r1, r3
 80031be:	b29b      	uxth	r3, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	68f9      	ldr	r1, [r7, #12]
 80031c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031c8:	4013      	ands	r3, r2
 80031ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	2101      	movs	r1, #1
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	68f9      	ldr	r1, [r7, #12]
 80031e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031ec:	4013      	ands	r3, r2
 80031ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	0159      	lsls	r1, r3, #5
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	440b      	add	r3, r1
 8003206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800320a:	4619      	mov	r1, r3
 800320c:	4b35      	ldr	r3, [pc, #212]	; (80032e4 <USB_DeactivateEndpoint+0x1b0>)
 800320e:	4013      	ands	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
 8003212:	e060      	b.n	80032d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800322a:	d11f      	bne.n	800326c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	0151      	lsls	r1, r2, #5
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	440a      	add	r2, r1
 8003242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003246:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800324a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	0151      	lsls	r1, r2, #5
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	440a      	add	r2, r1
 8003262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003266:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800326a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	2101      	movs	r1, #1
 800327e:	fa01 f303 	lsl.w	r3, r1, r3
 8003282:	041b      	lsls	r3, r3, #16
 8003284:	43db      	mvns	r3, r3
 8003286:	68f9      	ldr	r1, [r7, #12]
 8003288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800328c:	4013      	ands	r3, r2
 800328e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003296:	69da      	ldr	r2, [r3, #28]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	2101      	movs	r1, #1
 80032a2:	fa01 f303 	lsl.w	r3, r1, r3
 80032a6:	041b      	lsls	r3, r3, #16
 80032a8:	43db      	mvns	r3, r3
 80032aa:	68f9      	ldr	r1, [r7, #12]
 80032ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032b0:	4013      	ands	r3, r2
 80032b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	0159      	lsls	r1, r3, #5
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	440b      	add	r3, r1
 80032ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ce:	4619      	mov	r1, r3
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <USB_DeactivateEndpoint+0x1b4>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	ec337800 	.word	0xec337800
 80032e8:	eff37800 	.word	0xeff37800

080032ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08a      	sub	sp, #40	; 0x28
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	4613      	mov	r3, r2
 80032f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	785b      	ldrb	r3, [r3, #1]
 8003308:	2b01      	cmp	r3, #1
 800330a:	f040 815c 	bne.w	80035c6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d132      	bne.n	800337c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	4413      	add	r3, r2
 800331e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	0151      	lsls	r1, r2, #5
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	440a      	add	r2, r1
 800332c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003330:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003334:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003338:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	0151      	lsls	r1, r2, #5
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	440a      	add	r2, r1
 8003350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003354:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003358:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	0151      	lsls	r1, r2, #5
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	440a      	add	r2, r1
 8003370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003374:	0cdb      	lsrs	r3, r3, #19
 8003376:	04db      	lsls	r3, r3, #19
 8003378:	6113      	str	r3, [r2, #16]
 800337a:	e074      	b.n	8003466 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	0151      	lsls	r1, r2, #5
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	440a      	add	r2, r1
 8003392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003396:	0cdb      	lsrs	r3, r3, #19
 8003398:	04db      	lsls	r3, r3, #19
 800339a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	0151      	lsls	r1, r2, #5
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	440a      	add	r2, r1
 80033b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	6959      	ldr	r1, [r3, #20]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	440b      	add	r3, r1
 80033d8:	1e59      	subs	r1, r3, #1
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e2:	04d9      	lsls	r1, r3, #19
 80033e4:	4b9d      	ldr	r3, [pc, #628]	; (800365c <USB_EPStartXfer+0x370>)
 80033e6:	400b      	ands	r3, r1
 80033e8:	69b9      	ldr	r1, [r7, #24]
 80033ea:	0148      	lsls	r0, r1, #5
 80033ec:	69f9      	ldr	r1, [r7, #28]
 80033ee:	4401      	add	r1, r0
 80033f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80033f4:	4313      	orrs	r3, r2
 80033f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800340e:	69b9      	ldr	r1, [r7, #24]
 8003410:	0148      	lsls	r0, r1, #5
 8003412:	69f9      	ldr	r1, [r7, #28]
 8003414:	4401      	add	r1, r0
 8003416:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800341a:	4313      	orrs	r3, r2
 800341c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	78db      	ldrb	r3, [r3, #3]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d11f      	bne.n	8003466 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	0151      	lsls	r1, r2, #5
 8003438:	69fa      	ldr	r2, [r7, #28]
 800343a:	440a      	add	r2, r1
 800343c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003440:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003444:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	0151      	lsls	r1, r2, #5
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	440a      	add	r2, r1
 800345c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003460:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003464:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d14b      	bne.n	8003504 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d009      	beq.n	8003488 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	4413      	add	r3, r2
 800347c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003480:	461a      	mov	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	78db      	ldrb	r3, [r3, #3]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d128      	bne.n	80034e2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d110      	bne.n	80034c2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	0151      	lsls	r1, r2, #5
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	440a      	add	r2, r1
 80034b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	e00f      	b.n	80034e2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	0151      	lsls	r1, r2, #5
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	440a      	add	r2, r1
 80034d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	0151      	lsls	r1, r2, #5
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	440a      	add	r2, r1
 80034f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e12f      	b.n	8003764 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	4413      	add	r3, r2
 800350c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	0151      	lsls	r1, r2, #5
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	440a      	add	r2, r1
 800351a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800351e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003522:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	78db      	ldrb	r3, [r3, #3]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d015      	beq.n	8003558 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 8117 	beq.w	8003764 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	2101      	movs	r1, #1
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	69f9      	ldr	r1, [r7, #28]
 800354e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003552:	4313      	orrs	r3, r2
 8003554:	634b      	str	r3, [r1, #52]	; 0x34
 8003556:	e105      	b.n	8003764 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d110      	bne.n	800358a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	0151      	lsls	r1, r2, #5
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	440a      	add	r2, r1
 800357e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003582:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	e00f      	b.n	80035aa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	0151      	lsls	r1, r2, #5
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	440a      	add	r2, r1
 80035a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	68d9      	ldr	r1, [r3, #12]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	781a      	ldrb	r2, [r3, #0]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	b298      	uxth	r0, r3
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	4603      	mov	r3, r0
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fa2b 	bl	8003a1a <USB_WritePacket>
 80035c4:	e0ce      	b.n	8003764 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	0151      	lsls	r1, r2, #5
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	440a      	add	r2, r1
 80035dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035e0:	0cdb      	lsrs	r3, r3, #19
 80035e2:	04db      	lsls	r3, r3, #19
 80035e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	0151      	lsls	r1, r2, #5
 80035f8:	69fa      	ldr	r2, [r7, #28]
 80035fa:	440a      	add	r2, r1
 80035fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003600:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003604:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003608:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d126      	bne.n	8003660 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	4413      	add	r3, r2
 800361a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003628:	69b9      	ldr	r1, [r7, #24]
 800362a:	0148      	lsls	r0, r1, #5
 800362c:	69f9      	ldr	r1, [r7, #28]
 800362e:	4401      	add	r1, r0
 8003630:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003634:	4313      	orrs	r3, r2
 8003636:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	0151      	lsls	r1, r2, #5
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	440a      	add	r2, r1
 800364e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003656:	6113      	str	r3, [r2, #16]
 8003658:	e036      	b.n	80036c8 <USB_EPStartXfer+0x3dc>
 800365a:	bf00      	nop
 800365c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4413      	add	r3, r2
 800366a:	1e5a      	subs	r2, r3, #1
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	fbb2 f3f3 	udiv	r3, r2, r3
 8003674:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	015a      	lsls	r2, r3, #5
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	4413      	add	r3, r2
 800367e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	8afb      	ldrh	r3, [r7, #22]
 8003686:	04d9      	lsls	r1, r3, #19
 8003688:	4b39      	ldr	r3, [pc, #228]	; (8003770 <USB_EPStartXfer+0x484>)
 800368a:	400b      	ands	r3, r1
 800368c:	69b9      	ldr	r1, [r7, #24]
 800368e:	0148      	lsls	r0, r1, #5
 8003690:	69f9      	ldr	r1, [r7, #28]
 8003692:	4401      	add	r1, r0
 8003694:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003698:	4313      	orrs	r3, r2
 800369a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a8:	691a      	ldr	r2, [r3, #16]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	8af9      	ldrh	r1, [r7, #22]
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b8:	69b9      	ldr	r1, [r7, #24]
 80036ba:	0148      	lsls	r0, r1, #5
 80036bc:	69f9      	ldr	r1, [r7, #28]
 80036be:	4401      	add	r1, r0
 80036c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036c4:	4313      	orrs	r3, r2
 80036c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d10d      	bne.n	80036ea <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d009      	beq.n	80036ea <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	68d9      	ldr	r1, [r3, #12]
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e6:	460a      	mov	r2, r1
 80036e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	78db      	ldrb	r3, [r3, #3]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d128      	bne.n	8003744 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d110      	bne.n	8003724 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	4413      	add	r3, r2
 800370a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	0151      	lsls	r1, r2, #5
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	440a      	add	r2, r1
 8003718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800371c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	e00f      	b.n	8003744 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	0151      	lsls	r1, r2, #5
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	440a      	add	r2, r1
 800373a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800373e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003742:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	0151      	lsls	r1, r2, #5
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	440a      	add	r2, r1
 800375a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800375e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003762:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3720      	adds	r7, #32
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	1ff80000 	.word	0x1ff80000

08003774 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	4613      	mov	r3, r2
 8003780:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	785b      	ldrb	r3, [r3, #1]
 8003790:	2b01      	cmp	r3, #1
 8003792:	f040 80cd 	bne.w	8003930 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d132      	bne.n	8003804 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	0151      	lsls	r1, r2, #5
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	440a      	add	r2, r1
 80037b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	0151      	lsls	r1, r2, #5
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	440a      	add	r2, r1
 80037d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	0151      	lsls	r1, r2, #5
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	440a      	add	r2, r1
 80037f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037fc:	0cdb      	lsrs	r3, r3, #19
 80037fe:	04db      	lsls	r3, r3, #19
 8003800:	6113      	str	r3, [r2, #16]
 8003802:	e04e      	b.n	80038a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	4413      	add	r3, r2
 800380c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	0151      	lsls	r1, r2, #5
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	440a      	add	r2, r1
 800381a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800381e:	0cdb      	lsrs	r3, r3, #19
 8003820:	04db      	lsls	r3, r3, #19
 8003822:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	0151      	lsls	r1, r2, #5
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	440a      	add	r2, r1
 800383a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800383e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003842:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003846:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	429a      	cmp	r2, r3
 8003852:	d903      	bls.n	800385c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	4413      	add	r3, r2
 8003864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	0151      	lsls	r1, r2, #5
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	440a      	add	r2, r1
 8003872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003876:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800387a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003892:	6939      	ldr	r1, [r7, #16]
 8003894:	0148      	lsls	r0, r1, #5
 8003896:	6979      	ldr	r1, [r7, #20]
 8003898:	4401      	add	r1, r0
 800389a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800389e:	4313      	orrs	r3, r2
 80038a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d11e      	bne.n	80038e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d009      	beq.n	80038c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038bc:	461a      	mov	r2, r3
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	0151      	lsls	r1, r2, #5
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	440a      	add	r2, r1
 80038da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	e092      	b.n	8003a0c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	0151      	lsls	r1, r2, #5
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	440a      	add	r2, r1
 80038fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003900:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003904:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d07e      	beq.n	8003a0c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	2101      	movs	r1, #1
 8003920:	fa01 f303 	lsl.w	r3, r1, r3
 8003924:	6979      	ldr	r1, [r7, #20]
 8003926:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800392a:	4313      	orrs	r3, r2
 800392c:	634b      	str	r3, [r1, #52]	; 0x34
 800392e:	e06d      	b.n	8003a0c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	0151      	lsls	r1, r2, #5
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	440a      	add	r2, r1
 8003946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800394a:	0cdb      	lsrs	r3, r3, #19
 800394c:	04db      	lsls	r3, r3, #19
 800394e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	0151      	lsls	r1, r2, #5
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	440a      	add	r2, r1
 8003966:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800396a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800396e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003972:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	0151      	lsls	r1, r2, #5
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	440a      	add	r2, r1
 800399a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800399e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ba:	6939      	ldr	r1, [r7, #16]
 80039bc:	0148      	lsls	r0, r1, #5
 80039be:	6979      	ldr	r1, [r7, #20]
 80039c0:	4401      	add	r1, r0
 80039c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039c6:	4313      	orrs	r3, r2
 80039c8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d10d      	bne.n	80039ec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d009      	beq.n	80039ec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	68d9      	ldr	r1, [r3, #12]
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e8:	460a      	mov	r2, r1
 80039ea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	0151      	lsls	r1, r2, #5
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	440a      	add	r2, r1
 8003a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b089      	sub	sp, #36	; 0x24
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	4611      	mov	r1, r2
 8003a26:	461a      	mov	r2, r3
 8003a28:	460b      	mov	r3, r1
 8003a2a:	71fb      	strb	r3, [r7, #7]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003a38:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d11a      	bne.n	8003a76 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003a40:	88bb      	ldrh	r3, [r7, #4]
 8003a42:	3303      	adds	r3, #3
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	e00f      	b.n	8003a6e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	031a      	lsls	r2, r3, #12
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3304      	adds	r3, #4
 8003a66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d3eb      	bcc.n	8003a4e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3724      	adds	r7, #36	; 0x24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b089      	sub	sp, #36	; 0x24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	3303      	adds	r3, #3
 8003a9e:	089b      	lsrs	r3, r3, #2
 8003aa0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	e00b      	b.n	8003ac0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	3301      	adds	r3, #1
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d3ef      	bcc.n	8003aa8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003ac8:	69fb      	ldr	r3, [r7, #28]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3724      	adds	r7, #36	; 0x24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b085      	sub	sp, #20
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	785b      	ldrb	r3, [r3, #1]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d12c      	bne.n	8003b4c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	db12      	blt.n	8003b2a <USB_EPSetStall+0x54>
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00f      	beq.n	8003b2a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	0151      	lsls	r1, r2, #5
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	440a      	add	r2, r1
 8003b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b28:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	0151      	lsls	r1, r2, #5
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	440a      	add	r2, r1
 8003b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e02b      	b.n	8003ba4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	db12      	blt.n	8003b84 <USB_EPSetStall+0xae>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00f      	beq.n	8003b84 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	0151      	lsls	r1, r2, #5
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	440a      	add	r2, r1
 8003b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b82:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	0151      	lsls	r1, r2, #5
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	440a      	add	r2, r1
 8003b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ba2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b085      	sub	sp, #20
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	785b      	ldrb	r3, [r3, #1]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d128      	bne.n	8003c20 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	0151      	lsls	r1, r2, #5
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	440a      	add	r2, r1
 8003be4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	78db      	ldrb	r3, [r3, #3]
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d003      	beq.n	8003bfe <USB_EPClearStall+0x4c>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	78db      	ldrb	r3, [r3, #3]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d138      	bne.n	8003c70 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	0151      	lsls	r1, r2, #5
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	440a      	add	r2, r1
 8003c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e027      	b.n	8003c70 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	0151      	lsls	r1, r2, #5
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	440a      	add	r2, r1
 8003c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	78db      	ldrb	r3, [r3, #3]
 8003c44:	2b03      	cmp	r3, #3
 8003c46:	d003      	beq.n	8003c50 <USB_EPClearStall+0x9e>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	78db      	ldrb	r3, [r3, #3]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d10f      	bne.n	8003c70 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	0151      	lsls	r1, r2, #5
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	440a      	add	r2, r1
 8003c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	460b      	mov	r3, r1
 8003c88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c9c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ca0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	78fb      	ldrb	r3, [r7, #3]
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003cb2:	68f9      	ldr	r1, [r7, #12]
 8003cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b084      	sub	sp, #16
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ce4:	f023 0302 	bic.w	r3, r3, #2
 8003ce8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003cea:	2003      	movs	r0, #3
 8003cec:	f7fc fdd4 	bl	8000898 <HAL_Delay>

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d14:	f043 0302 	orr.w	r3, r3, #2
 8003d18:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003d1a:	2003      	movs	r0, #3
 8003d1c:	f7fc fdbc 	bl	8000898 <HAL_Delay>

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b085      	sub	sp, #20
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003d42:	68fb      	ldr	r3, [r7, #12]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	4013      	ands	r3, r2
 8003d72:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	0c1b      	lsrs	r3, r3, #16
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	4013      	ands	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	b29b      	uxth	r3, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	4013      	ands	r3, r2
 8003de4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003de6:	68bb      	ldr	r3, [r7, #8]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e16:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	fa22 f303 	lsr.w	r3, r2, r3
 8003e24:	01db      	lsls	r3, r3, #7
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e42:	68bb      	ldr	r3, [r7, #8]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e86:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e8a:	f023 0307 	bic.w	r3, r3, #7
 8003e8e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
	...

08003eb4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	333c      	adds	r3, #60	; 0x3c
 8003eca:	3304      	adds	r3, #4
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4a26      	ldr	r2, [pc, #152]	; (8003f6c <USB_EP0_OutStart+0xb8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d90a      	bls.n	8003eee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ee8:	d101      	bne.n	8003eee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e037      	b.n	8003f5e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f1c:	f043 0318 	orr.w	r3, r3, #24
 8003f20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f30:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003f34:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003f36:	7afb      	ldrb	r3, [r7, #11]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d10f      	bne.n	8003f5c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f42:	461a      	mov	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f56:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003f5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	4f54300a 	.word	0x4f54300a

08003f70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4a13      	ldr	r2, [pc, #76]	; (8003fd4 <USB_CoreReset+0x64>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e01b      	b.n	8003fc6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	daf2      	bge.n	8003f7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f043 0201 	orr.w	r2, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4a09      	ldr	r2, [pc, #36]	; (8003fd4 <USB_CoreReset+0x64>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d901      	bls.n	8003fb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e006      	b.n	8003fc6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d0f0      	beq.n	8003fa6 <USB_CoreReset+0x36>

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	00030d40 	.word	0x00030d40

08003fd8 <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	220a      	movs	r2, #10
 8003fe4:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8003fe6:	4b03      	ldr	r3, [pc, #12]	; (8003ff4 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	20000044 	.word	0x20000044

08003ff8 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  pInstance = pdev;
 8004004:	4a0c      	ldr	r2, [pc, #48]	; (8004038 <USBD_AUDIO_Init+0x40>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6013      	str	r3, [r2, #0]
  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 800400a:	2340      	movs	r3, #64	; 0x40
 800400c:	2202      	movs	r2, #2
 800400e:	2181      	movs	r1, #129	; 0x81
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f001 fe74 	bl	8005cfe <USBD_LL_OpenEP>
  (void)USBD_LL_OpenEP(pdev, MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 8004016:	2340      	movs	r3, #64	; 0x40
 8004018:	2202      	movs	r2, #2
 800401a:	2101      	movs	r1, #1
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f001 fe6e 	bl	8005cfe <USBD_LL_OpenEP>

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, MIDI_OUT_EP, (uint8_t*)(USB_Rx_Buffer), MIDI_DATA_OUT_PACKET_SIZE);
 8004022:	2340      	movs	r3, #64	; 0x40
 8004024:	4a05      	ldr	r2, [pc, #20]	; (800403c <USBD_AUDIO_Init+0x44>)
 8004026:	2101      	movs	r1, #1
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f001 ff57 	bl	8005edc <USBD_LL_PrepareReceive>

  return (uint8_t)USBD_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000158 	.word	0x20000158
 800403c:	20000170 	.word	0x20000170

08004040 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Open EP IN*/
  (void)USBD_LL_CloseEP(pdev, MIDI_IN_EP);
 800404c:	2181      	movs	r1, #129	; 0x81
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f001 fe7b 	bl	8005d4a <USBD_LL_CloseEP>
  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, MIDI_OUT_EP);
 8004054:	2101      	movs	r1, #1
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f001 fe77 	bl	8005d4a <USBD_LL_CloseEP>

  return (uint8_t)USBD_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2285      	movs	r2, #133	; 0x85
 8004074:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8004076:	4b03      	ldr	r3, [pc, #12]	; (8004084 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	20000050 	.word	0x20000050

08004088 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  if (USB_Tx_State == 1)
 8004094:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <USBD_AUDIO_DataIn+0x48>)
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d114      	bne.n	80040c6 <USBD_AUDIO_DataIn+0x3e>
  {
	  if (APP_Rx_length != 0)
 800409c:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <USBD_AUDIO_DataIn+0x4c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <USBD_AUDIO_DataIn+0x24>
	  {
	    USB_Tx_State = USB_TX_CONTINUE;
 80040a4:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <USBD_AUDIO_DataIn+0x48>)
 80040a6:	2202      	movs	r2, #2
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	e008      	b.n	80040be <USBD_AUDIO_DataIn+0x36>
	  }
	  else
	  {
	    APP_Rx_ptr_out = 0;
 80040ac:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <USBD_AUDIO_DataIn+0x50>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
	    APP_Rx_ptr_in = 0;
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <USBD_AUDIO_DataIn+0x54>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
	    USB_Tx_State = USB_TX_READY;
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <USBD_AUDIO_DataIn+0x48>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]
	  }
	  USBD_AUDIO_DataOut(pdev, MIDI_OUT_EP);
 80040be:	2101      	movs	r1, #1
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f819 	bl	80040f8 <USBD_AUDIO_DataOut>
  }
  return (uint8_t)USBD_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20000168 	.word	0x20000168
 80040d4:	20000164 	.word	0x20000164
 80040d8:	20000160 	.word	0x20000160
 80040dc:	2000015c 	.word	0x2000015c

080040e0 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
	...

080040f8 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;
  USBD_AUDIO_ItfTypeDef *pmidi;

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 800410a:	78fa      	ldrb	r2, [r7, #3]
 800410c:	4613      	mov	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	81fb      	strh	r3, [r7, #14]
  if (USB_Rx_Cnt)
 800411e:	89fb      	ldrh	r3, [r7, #14]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d009      	beq.n	8004138 <USBD_AUDIO_DataOut+0x40>
  {
	  pmidi = (USBD_AUDIO_ItfTypeDef *)(pdev->pUserData);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800412a:	60bb      	str	r3, [r7, #8]
	  pmidi->MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	89fa      	ldrh	r2, [r7, #14]
 8004132:	4611      	mov	r1, r2
 8004134:	4806      	ldr	r0, [pc, #24]	; (8004150 <USBD_AUDIO_DataOut+0x58>)
 8004136:	4798      	blx	r3
  }
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8004138:	2340      	movs	r3, #64	; 0x40
 800413a:	4a05      	ldr	r2, [pc, #20]	; (8004150 <USBD_AUDIO_DataOut+0x58>)
 800413c:	2101      	movs	r1, #1
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f001 fecc 	bl	8005edc <USBD_LL_PrepareReceive>

  return (uint8_t)USBD_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000170 	.word	0x20000170

08004154 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004164:	2303      	movs	r3, #3
 8004166:	e004      	b.n	8004172 <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
	...

08004180 <USBD_MIDI_SendPacket>:

/**
  * @}
  */
void USBD_MIDI_SendPacket(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if (USB_Tx_State != 1)
 8004186:	4b2e      	ldr	r3, [pc, #184]	; (8004240 <USBD_MIDI_SendPacket+0xc0>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d055      	beq.n	800423a <USBD_MIDI_SendPacket+0xba>
  {
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE)
 800418e:	4b2d      	ldr	r3, [pc, #180]	; (8004244 <USBD_MIDI_SendPacket+0xc4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004196:	d102      	bne.n	800419e <USBD_MIDI_SendPacket+0x1e>
    {
      APP_Rx_ptr_out = 0;
 8004198:	4b2a      	ldr	r3, [pc, #168]	; (8004244 <USBD_MIDI_SendPacket+0xc4>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
    }

    if(APP_Rx_ptr_out == APP_Rx_ptr_in)
 800419e:	4b29      	ldr	r3, [pc, #164]	; (8004244 <USBD_MIDI_SendPacket+0xc4>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	4b29      	ldr	r3, [pc, #164]	; (8004248 <USBD_MIDI_SendPacket+0xc8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d103      	bne.n	80041b2 <USBD_MIDI_SendPacket+0x32>
    {
      USB_Tx_State = USB_TX_READY;
 80041aa:	4b25      	ldr	r3, [pc, #148]	; (8004240 <USBD_MIDI_SendPacket+0xc0>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
      return;
 80041b0:	e043      	b.n	800423a <USBD_MIDI_SendPacket+0xba>
    }

    if(APP_Rx_ptr_out > APP_Rx_ptr_in)
 80041b2:	4b24      	ldr	r3, [pc, #144]	; (8004244 <USBD_MIDI_SendPacket+0xc4>)
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	4b24      	ldr	r3, [pc, #144]	; (8004248 <USBD_MIDI_SendPacket+0xc8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d906      	bls.n	80041cc <USBD_MIDI_SendPacket+0x4c>
    {
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 80041be:	4b21      	ldr	r3, [pc, #132]	; (8004244 <USBD_MIDI_SendPacket+0xc4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80041c6:	4a21      	ldr	r2, [pc, #132]	; (800424c <USBD_MIDI_SendPacket+0xcc>)
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	e006      	b.n	80041da <USBD_MIDI_SendPacket+0x5a>
    }
    else
    {
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 80041cc:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <USBD_MIDI_SendPacket+0xc8>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	4b1c      	ldr	r3, [pc, #112]	; (8004244 <USBD_MIDI_SendPacket+0xc4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	4a1d      	ldr	r2, [pc, #116]	; (800424c <USBD_MIDI_SendPacket+0xcc>)
 80041d8:	6013      	str	r3, [r2, #0]
    }

    if (APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE)
 80041da:	4b1c      	ldr	r3, [pc, #112]	; (800424c <USBD_MIDI_SendPacket+0xcc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b40      	cmp	r3, #64	; 0x40
 80041e0:	d90f      	bls.n	8004202 <USBD_MIDI_SendPacket+0x82>
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 80041e2:	4b18      	ldr	r3, [pc, #96]	; (8004244 <USBD_MIDI_SendPacket+0xc4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE;
 80041e8:	2340      	movs	r3, #64	; 0x40
 80041ea:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 80041ec:	4b15      	ldr	r3, [pc, #84]	; (8004244 <USBD_MIDI_SendPacket+0xc4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3340      	adds	r3, #64	; 0x40
 80041f2:	4a14      	ldr	r2, [pc, #80]	; (8004244 <USBD_MIDI_SendPacket+0xc4>)
 80041f4:	6013      	str	r3, [r2, #0]
      APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <USBD_MIDI_SendPacket+0xcc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3b40      	subs	r3, #64	; 0x40
 80041fc:	4a13      	ldr	r2, [pc, #76]	; (800424c <USBD_MIDI_SendPacket+0xcc>)
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	e00f      	b.n	8004222 <USBD_MIDI_SendPacket+0xa2>
    }
    else
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 8004202:	4b10      	ldr	r3, [pc, #64]	; (8004244 <USBD_MIDI_SendPacket+0xc4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = APP_Rx_length;
 8004208:	4b10      	ldr	r3, [pc, #64]	; (800424c <USBD_MIDI_SendPacket+0xcc>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += APP_Rx_length;
 800420e:	4b0d      	ldr	r3, [pc, #52]	; (8004244 <USBD_MIDI_SendPacket+0xc4>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4b0e      	ldr	r3, [pc, #56]	; (800424c <USBD_MIDI_SendPacket+0xcc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4413      	add	r3, r2
 8004218:	4a0a      	ldr	r2, [pc, #40]	; (8004244 <USBD_MIDI_SendPacket+0xc4>)
 800421a:	6013      	str	r3, [r2, #0]
      APP_Rx_length = 0;
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <USBD_MIDI_SendPacket+0xcc>)
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = USB_TX_BUSY;
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <USBD_MIDI_SendPacket+0xc0>)
 8004224:	2201      	movs	r2, #1
 8004226:	701a      	strb	r2, [r3, #0]

    USBD_LL_Transmit(pInstance, MIDI_IN_EP,&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length);
 8004228:	4b09      	ldr	r3, [pc, #36]	; (8004250 <USBD_MIDI_SendPacket+0xd0>)
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	4a09      	ldr	r2, [pc, #36]	; (8004254 <USBD_MIDI_SendPacket+0xd4>)
 8004230:	441a      	add	r2, r3
 8004232:	88bb      	ldrh	r3, [r7, #4]
 8004234:	2181      	movs	r1, #129	; 0x81
 8004236:	f001 fe30 	bl	8005e9a <USBD_LL_Transmit>
  }
}
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20000168 	.word	0x20000168
 8004244:	20000160 	.word	0x20000160
 8004248:	2000015c 	.word	0x2000015c
 800424c:	20000164 	.word	0x20000164
 8004250:	20000158 	.word	0x20000158
 8004254:	200001b0 	.word	0x200001b0

08004258 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800426c:	2303      	movs	r3, #3
 800426e:	e025      	b.n	80042bc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	79fa      	ldrb	r2, [r7, #7]
 80042ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f001 fcbd 	bl	8005c30 <USBD_LL_Init>
 80042b6:	4603      	mov	r3, r0
 80042b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80042d8:	2303      	movs	r3, #3
 80042da:	e010      	b.n	80042fe <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	f107 020e 	add.w	r2, r7, #14
 80042f0:	4610      	mov	r0, r2
 80042f2:	4798      	blx	r3
 80042f4:	4602      	mov	r2, r0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f001 fcda 	bl	8005cc8 <USBD_LL_Start>
 8004314:	4603      	mov	r3, r0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004340:	2303      	movs	r3, #3
 8004342:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	78fa      	ldrb	r2, [r7, #3]
 8004358:	4611      	mov	r1, r2
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	4798      	blx	r3
 800435e:	4603      	mov	r3, r0
 8004360:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004362:	7bfb      	ldrb	r3, [r7, #15]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d007      	beq.n	8004392 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	4611      	mov	r1, r2
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	4798      	blx	r3
  }

  return USBD_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80043ac:	6839      	ldr	r1, [r7, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 ff2c 	bl	800520c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80043c2:	461a      	mov	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80043d0:	f003 031f 	and.w	r3, r3, #31
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d00e      	beq.n	80043f6 <USBD_LL_SetupStage+0x5a>
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d302      	bcc.n	80043e2 <USBD_LL_SetupStage+0x46>
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d014      	beq.n	800440a <USBD_LL_SetupStage+0x6e>
 80043e0:	e01d      	b.n	800441e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fa18 	bl	8004820 <USBD_StdDevReq>
 80043f0:	4603      	mov	r3, r0
 80043f2:	73fb      	strb	r3, [r7, #15]
      break;
 80043f4:	e020      	b.n	8004438 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80043fc:	4619      	mov	r1, r3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fa7c 	bl	80048fc <USBD_StdItfReq>
 8004404:	4603      	mov	r3, r0
 8004406:	73fb      	strb	r3, [r7, #15]
      break;
 8004408:	e016      	b.n	8004438 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004410:	4619      	mov	r1, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fab8 	bl	8004988 <USBD_StdEPReq>
 8004418:	4603      	mov	r3, r0
 800441a:	73fb      	strb	r3, [r7, #15]
      break;
 800441c:	e00c      	b.n	8004438 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004424:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004428:	b2db      	uxtb	r3, r3
 800442a:	4619      	mov	r1, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f001 fcab 	bl	8005d88 <USBD_LL_StallEP>
 8004432:	4603      	mov	r3, r0
 8004434:	73fb      	strb	r3, [r7, #15]
      break;
 8004436:	bf00      	nop
  }

  return ret;
 8004438:	7bfb      	ldrb	r3, [r7, #15]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b086      	sub	sp, #24
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	460b      	mov	r3, r1
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004450:	7afb      	ldrb	r3, [r7, #11]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d137      	bne.n	80044c6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800445c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004464:	2b03      	cmp	r3, #3
 8004466:	d14a      	bne.n	80044fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	429a      	cmp	r2, r3
 8004472:	d913      	bls.n	800449c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	1ad2      	subs	r2, r2, r3
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	4293      	cmp	r3, r2
 800448c:	bf28      	it	cs
 800448e:	4613      	movcs	r3, r2
 8004490:	461a      	mov	r2, r3
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 ff90 	bl	80053ba <USBD_CtlContinueRx>
 800449a:	e030      	b.n	80044fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00a      	beq.n	80044be <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d105      	bne.n	80044be <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 ff8c 	bl	80053dc <USBD_CtlSendStatus>
 80044c4:	e01b      	b.n	80044fe <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d013      	beq.n	80044fa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d10e      	bne.n	80044fa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	7afa      	ldrb	r2, [r7, #11]
 80044e6:	4611      	mov	r1, r2
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	4798      	blx	r3
 80044ec:	4603      	mov	r3, r0
 80044ee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
 80044f8:	e002      	b.n	8004500 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e000      	b.n	8004500 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	460b      	mov	r3, r1
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004516:	7afb      	ldrb	r3, [r7, #11]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d16a      	bne.n	80045f2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3314      	adds	r3, #20
 8004520:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004528:	2b02      	cmp	r3, #2
 800452a:	d155      	bne.n	80045d8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	429a      	cmp	r2, r3
 8004536:	d914      	bls.n	8004562 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	1ad2      	subs	r2, r2, r3
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	461a      	mov	r2, r3
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 ff22 	bl	8005398 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004554:	2300      	movs	r3, #0
 8004556:	2200      	movs	r2, #0
 8004558:	2100      	movs	r1, #0
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f001 fcbe 	bl	8005edc <USBD_LL_PrepareReceive>
 8004560:	e03a      	b.n	80045d8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	429a      	cmp	r2, r3
 800456c:	d11c      	bne.n	80045a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004576:	429a      	cmp	r2, r3
 8004578:	d316      	bcc.n	80045a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004584:	429a      	cmp	r2, r3
 8004586:	d20f      	bcs.n	80045a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004588:	2200      	movs	r2, #0
 800458a:	2100      	movs	r1, #0
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 ff03 	bl	8005398 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800459a:	2300      	movs	r3, #0
 800459c:	2200      	movs	r2, #0
 800459e:	2100      	movs	r1, #0
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f001 fc9b 	bl	8005edc <USBD_LL_PrepareReceive>
 80045a6:	e017      	b.n	80045d8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d105      	bne.n	80045ca <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80045ca:	2180      	movs	r1, #128	; 0x80
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f001 fbdb 	bl	8005d88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 ff15 	bl	8005402 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d123      	bne.n	800462a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f7ff fe9b 	bl	800431e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80045f0:	e01b      	b.n	800462a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d013      	beq.n	8004626 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004604:	2b03      	cmp	r3, #3
 8004606:	d10e      	bne.n	8004626 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	7afa      	ldrb	r2, [r7, #11]
 8004612:	4611      	mov	r1, r2
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	4798      	blx	r3
 8004618:	4603      	mov	r3, r0
 800461a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8004622:	7dfb      	ldrb	r3, [r7, #23]
 8004624:	e002      	b.n	800462c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004626:	2303      	movs	r3, #3
 8004628:	e000      	b.n	800462c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004660:	2b00      	cmp	r3, #0
 8004662:	d009      	beq.n	8004678 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6852      	ldr	r2, [r2, #4]
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	4611      	mov	r1, r2
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004678:	2340      	movs	r3, #64	; 0x40
 800467a:	2200      	movs	r2, #0
 800467c:	2100      	movs	r1, #0
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f001 fb3d 	bl	8005cfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2240      	movs	r2, #64	; 0x40
 8004690:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004694:	2340      	movs	r3, #64	; 0x40
 8004696:	2200      	movs	r2, #0
 8004698:	2180      	movs	r1, #128	; 0x80
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f001 fb2f 	bl	8005cfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2240      	movs	r2, #64	; 0x40
 80046aa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	460b      	mov	r3, r1
 80046c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	78fa      	ldrb	r2, [r7, #3]
 80046c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2204      	movs	r2, #4
 80046ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800470e:	2b04      	cmp	r3, #4
 8004710:	d105      	bne.n	800471e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800473a:	2b03      	cmp	r3, #3
 800473c:	d10b      	bne.n	8004756 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	460b      	mov	r3, r1
 8004784:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b082      	sub	sp, #8
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d009      	beq.n	80047d8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6852      	ldr	r2, [r2, #4]
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	4611      	mov	r1, r2
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	4798      	blx	r3
  }

  return USBD_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b087      	sub	sp, #28
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	3301      	adds	r3, #1
 80047f8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004800:	8a3b      	ldrh	r3, [r7, #16]
 8004802:	021b      	lsls	r3, r3, #8
 8004804:	b21a      	sxth	r2, r3
 8004806:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800480a:	4313      	orrs	r3, r2
 800480c:	b21b      	sxth	r3, r3
 800480e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004810:	89fb      	ldrh	r3, [r7, #14]
}
 8004812:	4618      	mov	r0, r3
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
	...

08004820 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004836:	2b20      	cmp	r3, #32
 8004838:	d004      	beq.n	8004844 <USBD_StdDevReq+0x24>
 800483a:	2b40      	cmp	r3, #64	; 0x40
 800483c:	d002      	beq.n	8004844 <USBD_StdDevReq+0x24>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <USBD_StdDevReq+0x38>
 8004842:	e050      	b.n	80048e6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	6839      	ldr	r1, [r7, #0]
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	4798      	blx	r3
 8004852:	4603      	mov	r3, r0
 8004854:	73fb      	strb	r3, [r7, #15]
    break;
 8004856:	e04b      	b.n	80048f0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	785b      	ldrb	r3, [r3, #1]
 800485c:	2b09      	cmp	r3, #9
 800485e:	d83c      	bhi.n	80048da <USBD_StdDevReq+0xba>
 8004860:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <USBD_StdDevReq+0x48>)
 8004862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004866:	bf00      	nop
 8004868:	080048bd 	.word	0x080048bd
 800486c:	080048d1 	.word	0x080048d1
 8004870:	080048db 	.word	0x080048db
 8004874:	080048c7 	.word	0x080048c7
 8004878:	080048db 	.word	0x080048db
 800487c:	0800489b 	.word	0x0800489b
 8004880:	08004891 	.word	0x08004891
 8004884:	080048db 	.word	0x080048db
 8004888:	080048b3 	.word	0x080048b3
 800488c:	080048a5 	.word	0x080048a5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8004890:	6839      	ldr	r1, [r7, #0]
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f9ce 	bl	8004c34 <USBD_GetDescriptor>
      break;
 8004898:	e024      	b.n	80048e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800489a:	6839      	ldr	r1, [r7, #0]
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fb33 	bl	8004f08 <USBD_SetAddress>
      break;
 80048a2:	e01f      	b.n	80048e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80048a4:	6839      	ldr	r1, [r7, #0]
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fb70 	bl	8004f8c <USBD_SetConfig>
 80048ac:	4603      	mov	r3, r0
 80048ae:	73fb      	strb	r3, [r7, #15]
      break;
 80048b0:	e018      	b.n	80048e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80048b2:	6839      	ldr	r1, [r7, #0]
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fc0d 	bl	80050d4 <USBD_GetConfig>
      break;
 80048ba:	e013      	b.n	80048e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80048bc:	6839      	ldr	r1, [r7, #0]
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fc3c 	bl	800513c <USBD_GetStatus>
      break;
 80048c4:	e00e      	b.n	80048e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80048c6:	6839      	ldr	r1, [r7, #0]
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fc6a 	bl	80051a2 <USBD_SetFeature>
      break;
 80048ce:	e009      	b.n	80048e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80048d0:	6839      	ldr	r1, [r7, #0]
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fc79 	bl	80051ca <USBD_ClrFeature>
      break;
 80048d8:	e004      	b.n	80048e4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80048da:	6839      	ldr	r1, [r7, #0]
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fccf 	bl	8005280 <USBD_CtlError>
      break;
 80048e2:	bf00      	nop
    }
    break;
 80048e4:	e004      	b.n	80048f0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80048e6:	6839      	ldr	r1, [r7, #0]
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fcc9 	bl	8005280 <USBD_CtlError>
    break;
 80048ee:	bf00      	nop
  }

  return ret;
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop

080048fc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004912:	2b20      	cmp	r3, #32
 8004914:	d003      	beq.n	800491e <USBD_StdItfReq+0x22>
 8004916:	2b40      	cmp	r3, #64	; 0x40
 8004918:	d001      	beq.n	800491e <USBD_StdItfReq+0x22>
 800491a:	2b00      	cmp	r3, #0
 800491c:	d12a      	bne.n	8004974 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004924:	3b01      	subs	r3, #1
 8004926:	2b02      	cmp	r3, #2
 8004928:	d81d      	bhi.n	8004966 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	889b      	ldrh	r3, [r3, #4]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	d813      	bhi.n	800495c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	6839      	ldr	r1, [r7, #0]
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	4798      	blx	r3
 8004942:	4603      	mov	r3, r0
 8004944:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	88db      	ldrh	r3, [r3, #6]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d110      	bne.n	8004970 <USBD_StdItfReq+0x74>
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10d      	bne.n	8004970 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fd41 	bl	80053dc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800495a:	e009      	b.n	8004970 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fc8e 	bl	8005280 <USBD_CtlError>
      break;
 8004964:	e004      	b.n	8004970 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8004966:	6839      	ldr	r1, [r7, #0]
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fc89 	bl	8005280 <USBD_CtlError>
      break;
 800496e:	e000      	b.n	8004972 <USBD_StdItfReq+0x76>
      break;
 8004970:	bf00      	nop
    }
    break;
 8004972:	e004      	b.n	800497e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8004974:	6839      	ldr	r1, [r7, #0]
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fc82 	bl	8005280 <USBD_CtlError>
    break;
 800497c:	bf00      	nop
  }

  return ret;
 800497e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	889b      	ldrh	r3, [r3, #4]
 800499a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d004      	beq.n	80049b2 <USBD_StdEPReq+0x2a>
 80049a8:	2b40      	cmp	r3, #64	; 0x40
 80049aa:	d002      	beq.n	80049b2 <USBD_StdEPReq+0x2a>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <USBD_StdEPReq+0x3e>
 80049b0:	e135      	b.n	8004c1e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	6839      	ldr	r1, [r7, #0]
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	4798      	blx	r3
 80049c0:	4603      	mov	r3, r0
 80049c2:	73fb      	strb	r3, [r7, #15]
    break;
 80049c4:	e130      	b.n	8004c28 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	785b      	ldrb	r3, [r3, #1]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d03e      	beq.n	8004a4c <USBD_StdEPReq+0xc4>
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d002      	beq.n	80049d8 <USBD_StdEPReq+0x50>
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d077      	beq.n	8004ac6 <USBD_StdEPReq+0x13e>
 80049d6:	e11c      	b.n	8004c12 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d002      	beq.n	80049e8 <USBD_StdEPReq+0x60>
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d015      	beq.n	8004a12 <USBD_StdEPReq+0x8a>
 80049e6:	e02b      	b.n	8004a40 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80049e8:	7bbb      	ldrb	r3, [r7, #14]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00c      	beq.n	8004a08 <USBD_StdEPReq+0x80>
 80049ee:	7bbb      	ldrb	r3, [r7, #14]
 80049f0:	2b80      	cmp	r3, #128	; 0x80
 80049f2:	d009      	beq.n	8004a08 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80049f4:	7bbb      	ldrb	r3, [r7, #14]
 80049f6:	4619      	mov	r1, r3
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f001 f9c5 	bl	8005d88 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80049fe:	2180      	movs	r1, #128	; 0x80
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f001 f9c1 	bl	8005d88 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004a06:	e020      	b.n	8004a4a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8004a08:	6839      	ldr	r1, [r7, #0]
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fc38 	bl	8005280 <USBD_CtlError>
        break;
 8004a10:	e01b      	b.n	8004a4a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	885b      	ldrh	r3, [r3, #2]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10e      	bne.n	8004a38 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004a1a:	7bbb      	ldrb	r3, [r7, #14]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00b      	beq.n	8004a38 <USBD_StdEPReq+0xb0>
 8004a20:	7bbb      	ldrb	r3, [r7, #14]
 8004a22:	2b80      	cmp	r3, #128	; 0x80
 8004a24:	d008      	beq.n	8004a38 <USBD_StdEPReq+0xb0>
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	88db      	ldrh	r3, [r3, #6]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d104      	bne.n	8004a38 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8004a2e:	7bbb      	ldrb	r3, [r7, #14]
 8004a30:	4619      	mov	r1, r3
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f001 f9a8 	bl	8005d88 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f000 fccf 	bl	80053dc <USBD_CtlSendStatus>

        break;
 8004a3e:	e004      	b.n	8004a4a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8004a40:	6839      	ldr	r1, [r7, #0]
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fc1c 	bl	8005280 <USBD_CtlError>
        break;
 8004a48:	bf00      	nop
      }
      break;
 8004a4a:	e0e7      	b.n	8004c1c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d002      	beq.n	8004a5c <USBD_StdEPReq+0xd4>
 8004a56:	2b03      	cmp	r3, #3
 8004a58:	d015      	beq.n	8004a86 <USBD_StdEPReq+0xfe>
 8004a5a:	e02d      	b.n	8004ab8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a5c:	7bbb      	ldrb	r3, [r7, #14]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00c      	beq.n	8004a7c <USBD_StdEPReq+0xf4>
 8004a62:	7bbb      	ldrb	r3, [r7, #14]
 8004a64:	2b80      	cmp	r3, #128	; 0x80
 8004a66:	d009      	beq.n	8004a7c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004a68:	7bbb      	ldrb	r3, [r7, #14]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f001 f98b 	bl	8005d88 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004a72:	2180      	movs	r1, #128	; 0x80
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f001 f987 	bl	8005d88 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004a7a:	e023      	b.n	8004ac4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8004a7c:	6839      	ldr	r1, [r7, #0]
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fbfe 	bl	8005280 <USBD_CtlError>
        break;
 8004a84:	e01e      	b.n	8004ac4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	885b      	ldrh	r3, [r3, #2]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d119      	bne.n	8004ac2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004a8e:	7bbb      	ldrb	r3, [r7, #14]
 8004a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d004      	beq.n	8004aa2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004a98:	7bbb      	ldrb	r3, [r7, #14]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f001 f992 	bl	8005dc6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fc9a 	bl	80053dc <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	6839      	ldr	r1, [r7, #0]
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	4798      	blx	r3
        }
        break;
 8004ab6:	e004      	b.n	8004ac2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8004ab8:	6839      	ldr	r1, [r7, #0]
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fbe0 	bl	8005280 <USBD_CtlError>
        break;
 8004ac0:	e000      	b.n	8004ac4 <USBD_StdEPReq+0x13c>
        break;
 8004ac2:	bf00      	nop
      }
      break;
 8004ac4:	e0aa      	b.n	8004c1c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d002      	beq.n	8004ad6 <USBD_StdEPReq+0x14e>
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d032      	beq.n	8004b3a <USBD_StdEPReq+0x1b2>
 8004ad4:	e097      	b.n	8004c06 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ad6:	7bbb      	ldrb	r3, [r7, #14]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <USBD_StdEPReq+0x164>
 8004adc:	7bbb      	ldrb	r3, [r7, #14]
 8004ade:	2b80      	cmp	r3, #128	; 0x80
 8004ae0:	d004      	beq.n	8004aec <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8004ae2:	6839      	ldr	r1, [r7, #0]
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fbcb 	bl	8005280 <USBD_CtlError>
          break;
 8004aea:	e091      	b.n	8004c10 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004aec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	da0b      	bge.n	8004b0c <USBD_StdEPReq+0x184>
 8004af4:	7bbb      	ldrb	r3, [r7, #14]
 8004af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	3310      	adds	r3, #16
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	4413      	add	r3, r2
 8004b08:	3304      	adds	r3, #4
 8004b0a:	e00b      	b.n	8004b24 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8004b0c:	7bbb      	ldrb	r3, [r7, #14]
 8004b0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b12:	4613      	mov	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	4413      	add	r3, r2
 8004b22:	3304      	adds	r3, #4
 8004b24:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	4619      	mov	r1, r3
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fc15 	bl	8005362 <USBD_CtlSendData>
        break;
 8004b38:	e06a      	b.n	8004c10 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8004b3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	da11      	bge.n	8004b66 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004b42:	7bbb      	ldrb	r3, [r7, #14]
 8004b44:	f003 020f 	and.w	r2, r3, #15
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	3324      	adds	r3, #36	; 0x24
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d117      	bne.n	8004b8c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8004b5c:	6839      	ldr	r1, [r7, #0]
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fb8e 	bl	8005280 <USBD_CtlError>
            break;
 8004b64:	e054      	b.n	8004c10 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004b66:	7bbb      	ldrb	r3, [r7, #14]
 8004b68:	f003 020f 	and.w	r2, r3, #15
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004b7c:	881b      	ldrh	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d104      	bne.n	8004b8c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8004b82:	6839      	ldr	r1, [r7, #0]
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fb7b 	bl	8005280 <USBD_CtlError>
            break;
 8004b8a:	e041      	b.n	8004c10 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	da0b      	bge.n	8004bac <USBD_StdEPReq+0x224>
 8004b94:	7bbb      	ldrb	r3, [r7, #14]
 8004b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	3310      	adds	r3, #16
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	3304      	adds	r3, #4
 8004baa:	e00b      	b.n	8004bc4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8004bac:	7bbb      	ldrb	r3, [r7, #14]
 8004bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004bc6:	7bbb      	ldrb	r3, [r7, #14]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <USBD_StdEPReq+0x24a>
 8004bcc:	7bbb      	ldrb	r3, [r7, #14]
 8004bce:	2b80      	cmp	r3, #128	; 0x80
 8004bd0:	d103      	bne.n	8004bda <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e00e      	b.n	8004bf8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004bda:	7bbb      	ldrb	r3, [r7, #14]
 8004bdc:	4619      	mov	r1, r3
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f001 f910 	bl	8005e04 <USBD_LL_IsStallEP>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2201      	movs	r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	e002      	b.n	8004bf8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fbaf 	bl	8005362 <USBD_CtlSendData>
          break;
 8004c04:	e004      	b.n	8004c10 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8004c06:	6839      	ldr	r1, [r7, #0]
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fb39 	bl	8005280 <USBD_CtlError>
        break;
 8004c0e:	bf00      	nop
      }
      break;
 8004c10:	e004      	b.n	8004c1c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8004c12:	6839      	ldr	r1, [r7, #0]
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fb33 	bl	8005280 <USBD_CtlError>
      break;
 8004c1a:	bf00      	nop
    }
    break;
 8004c1c:	e004      	b.n	8004c28 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8004c1e:	6839      	ldr	r1, [r7, #0]
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fb2d 	bl	8005280 <USBD_CtlError>
    break;
 8004c26:	bf00      	nop
  }

  return ret;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	885b      	ldrh	r3, [r3, #2]
 8004c4e:	0a1b      	lsrs	r3, r3, #8
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	2b06      	cmp	r3, #6
 8004c56:	f200 8128 	bhi.w	8004eaa <USBD_GetDescriptor+0x276>
 8004c5a:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <USBD_GetDescriptor+0x2c>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004c7d 	.word	0x08004c7d
 8004c64:	08004c95 	.word	0x08004c95
 8004c68:	08004cd5 	.word	0x08004cd5
 8004c6c:	08004eab 	.word	0x08004eab
 8004c70:	08004eab 	.word	0x08004eab
 8004c74:	08004e4b 	.word	0x08004e4b
 8004c78:	08004e77 	.word	0x08004e77
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	7c12      	ldrb	r2, [r2, #16]
 8004c88:	f107 0108 	add.w	r1, r7, #8
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	4798      	blx	r3
 8004c90:	60f8      	str	r0, [r7, #12]
    break;
 8004c92:	e112      	b.n	8004eba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	7c1b      	ldrb	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10d      	bne.n	8004cb8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	f107 0208 	add.w	r2, r7, #8
 8004ca8:	4610      	mov	r0, r2
 8004caa:	4798      	blx	r3
 8004cac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004cb6:	e100      	b.n	8004eba <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	f107 0208 	add.w	r2, r7, #8
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	4798      	blx	r3
 8004cc8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	2202      	movs	r2, #2
 8004cd0:	701a      	strb	r2, [r3, #0]
    break;
 8004cd2:	e0f2      	b.n	8004eba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	885b      	ldrh	r3, [r3, #2]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b05      	cmp	r3, #5
 8004cdc:	f200 80ac 	bhi.w	8004e38 <USBD_GetDescriptor+0x204>
 8004ce0:	a201      	add	r2, pc, #4	; (adr r2, 8004ce8 <USBD_GetDescriptor+0xb4>)
 8004ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce6:	bf00      	nop
 8004ce8:	08004d01 	.word	0x08004d01
 8004cec:	08004d35 	.word	0x08004d35
 8004cf0:	08004d69 	.word	0x08004d69
 8004cf4:	08004d9d 	.word	0x08004d9d
 8004cf8:	08004dd1 	.word	0x08004dd1
 8004cfc:	08004e05 	.word	0x08004e05
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00b      	beq.n	8004d24 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	7c12      	ldrb	r2, [r2, #16]
 8004d18:	f107 0108 	add.w	r1, r7, #8
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4798      	blx	r3
 8004d20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004d22:	e091      	b.n	8004e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004d24:	6839      	ldr	r1, [r7, #0]
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 faaa 	bl	8005280 <USBD_CtlError>
        err++;
 8004d2c:	7afb      	ldrb	r3, [r7, #11]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	72fb      	strb	r3, [r7, #11]
      break;
 8004d32:	e089      	b.n	8004e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00b      	beq.n	8004d58 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	7c12      	ldrb	r2, [r2, #16]
 8004d4c:	f107 0108 	add.w	r1, r7, #8
 8004d50:	4610      	mov	r0, r2
 8004d52:	4798      	blx	r3
 8004d54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004d56:	e077      	b.n	8004e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004d58:	6839      	ldr	r1, [r7, #0]
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fa90 	bl	8005280 <USBD_CtlError>
        err++;
 8004d60:	7afb      	ldrb	r3, [r7, #11]
 8004d62:	3301      	adds	r3, #1
 8004d64:	72fb      	strb	r3, [r7, #11]
      break;
 8004d66:	e06f      	b.n	8004e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00b      	beq.n	8004d8c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	7c12      	ldrb	r2, [r2, #16]
 8004d80:	f107 0108 	add.w	r1, r7, #8
 8004d84:	4610      	mov	r0, r2
 8004d86:	4798      	blx	r3
 8004d88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004d8a:	e05d      	b.n	8004e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004d8c:	6839      	ldr	r1, [r7, #0]
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fa76 	bl	8005280 <USBD_CtlError>
        err++;
 8004d94:	7afb      	ldrb	r3, [r7, #11]
 8004d96:	3301      	adds	r3, #1
 8004d98:	72fb      	strb	r3, [r7, #11]
      break;
 8004d9a:	e055      	b.n	8004e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00b      	beq.n	8004dc0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	7c12      	ldrb	r2, [r2, #16]
 8004db4:	f107 0108 	add.w	r1, r7, #8
 8004db8:	4610      	mov	r0, r2
 8004dba:	4798      	blx	r3
 8004dbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004dbe:	e043      	b.n	8004e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 fa5c 	bl	8005280 <USBD_CtlError>
        err++;
 8004dc8:	7afb      	ldrb	r3, [r7, #11]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	72fb      	strb	r3, [r7, #11]
      break;
 8004dce:	e03b      	b.n	8004e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d00b      	beq.n	8004df4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	7c12      	ldrb	r2, [r2, #16]
 8004de8:	f107 0108 	add.w	r1, r7, #8
 8004dec:	4610      	mov	r0, r2
 8004dee:	4798      	blx	r3
 8004df0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004df2:	e029      	b.n	8004e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004df4:	6839      	ldr	r1, [r7, #0]
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fa42 	bl	8005280 <USBD_CtlError>
        err++;
 8004dfc:	7afb      	ldrb	r3, [r7, #11]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	72fb      	strb	r3, [r7, #11]
      break;
 8004e02:	e021      	b.n	8004e48 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00b      	beq.n	8004e28 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	7c12      	ldrb	r2, [r2, #16]
 8004e1c:	f107 0108 	add.w	r1, r7, #8
 8004e20:	4610      	mov	r0, r2
 8004e22:	4798      	blx	r3
 8004e24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004e26:	e00f      	b.n	8004e48 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004e28:	6839      	ldr	r1, [r7, #0]
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fa28 	bl	8005280 <USBD_CtlError>
        err++;
 8004e30:	7afb      	ldrb	r3, [r7, #11]
 8004e32:	3301      	adds	r3, #1
 8004e34:	72fb      	strb	r3, [r7, #11]
      break;
 8004e36:	e007      	b.n	8004e48 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8004e38:	6839      	ldr	r1, [r7, #0]
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fa20 	bl	8005280 <USBD_CtlError>
      err++;
 8004e40:	7afb      	ldrb	r3, [r7, #11]
 8004e42:	3301      	adds	r3, #1
 8004e44:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8004e46:	bf00      	nop
    }
    break;
 8004e48:	e037      	b.n	8004eba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	7c1b      	ldrb	r3, [r3, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5a:	f107 0208 	add.w	r2, r7, #8
 8004e5e:	4610      	mov	r0, r2
 8004e60:	4798      	blx	r3
 8004e62:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8004e64:	e029      	b.n	8004eba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8004e66:	6839      	ldr	r1, [r7, #0]
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fa09 	bl	8005280 <USBD_CtlError>
      err++;
 8004e6e:	7afb      	ldrb	r3, [r7, #11]
 8004e70:	3301      	adds	r3, #1
 8004e72:	72fb      	strb	r3, [r7, #11]
    break;
 8004e74:	e021      	b.n	8004eba <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	7c1b      	ldrb	r3, [r3, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10d      	bne.n	8004e9a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	f107 0208 	add.w	r2, r7, #8
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	4798      	blx	r3
 8004e8e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3301      	adds	r3, #1
 8004e94:	2207      	movs	r2, #7
 8004e96:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8004e98:	e00f      	b.n	8004eba <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8004e9a:	6839      	ldr	r1, [r7, #0]
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 f9ef 	bl	8005280 <USBD_CtlError>
      err++;
 8004ea2:	7afb      	ldrb	r3, [r7, #11]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	72fb      	strb	r3, [r7, #11]
    break;
 8004ea8:	e007      	b.n	8004eba <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8004eaa:	6839      	ldr	r1, [r7, #0]
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f9e7 	bl	8005280 <USBD_CtlError>
    err++;
 8004eb2:	7afb      	ldrb	r3, [r7, #11]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	72fb      	strb	r3, [r7, #11]
    break;
 8004eb8:	bf00      	nop
  }

  if (err != 0U)
 8004eba:	7afb      	ldrb	r3, [r7, #11]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d11e      	bne.n	8004efe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	88db      	ldrh	r3, [r3, #6]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d016      	beq.n	8004ef6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8004ec8:	893b      	ldrh	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00e      	beq.n	8004eec <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	88da      	ldrh	r2, [r3, #6]
 8004ed2:	893b      	ldrh	r3, [r7, #8]
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	bf28      	it	cs
 8004ed8:	4613      	movcs	r3, r2
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8004ede:	893b      	ldrh	r3, [r7, #8]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	68f9      	ldr	r1, [r7, #12]
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fa3c 	bl	8005362 <USBD_CtlSendData>
 8004eea:	e009      	b.n	8004f00 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8004eec:	6839      	ldr	r1, [r7, #0]
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f9c6 	bl	8005280 <USBD_CtlError>
 8004ef4:	e004      	b.n	8004f00 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fa70 	bl	80053dc <USBD_CtlSendStatus>
 8004efc:	e000      	b.n	8004f00 <USBD_GetDescriptor+0x2cc>
    return;
 8004efe:	bf00      	nop
    }
  }
}
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop

08004f08 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	889b      	ldrh	r3, [r3, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d130      	bne.n	8004f7c <USBD_SetAddress+0x74>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	88db      	ldrh	r3, [r3, #6]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d12c      	bne.n	8004f7c <USBD_SetAddress+0x74>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	885b      	ldrh	r3, [r3, #2]
 8004f26:	2b7f      	cmp	r3, #127	; 0x7f
 8004f28:	d828      	bhi.n	8004f7c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	885b      	ldrh	r3, [r3, #2]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d104      	bne.n	8004f4a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004f40:	6839      	ldr	r1, [r7, #0]
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f99c 	bl	8005280 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f48:	e01c      	b.n	8004f84 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	7bfa      	ldrb	r2, [r7, #15]
 8004f4e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 ff80 	bl	8005e5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fa3d 	bl	80053dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d004      	beq.n	8004f72 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f70:	e008      	b.n	8004f84 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f7a:	e003      	b.n	8004f84 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004f7c:	6839      	ldr	r1, [r7, #0]
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f97e 	bl	8005280 <USBD_CtlError>
  }
}
 8004f84:	bf00      	nop
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	885b      	ldrh	r3, [r3, #2]
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	4b4b      	ldr	r3, [pc, #300]	; (80050d0 <USBD_SetConfig+0x144>)
 8004fa2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004fa4:	4b4a      	ldr	r3, [pc, #296]	; (80050d0 <USBD_SetConfig+0x144>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d905      	bls.n	8004fb8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8004fac:	6839      	ldr	r1, [r7, #0]
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f966 	bl	8005280 <USBD_CtlError>
    return USBD_FAIL;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e087      	b.n	80050c8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d002      	beq.n	8004fc8 <USBD_SetConfig+0x3c>
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d025      	beq.n	8005012 <USBD_SetConfig+0x86>
 8004fc6:	e071      	b.n	80050ac <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8004fc8:	4b41      	ldr	r3, [pc, #260]	; (80050d0 <USBD_SetConfig+0x144>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01c      	beq.n	800500a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8004fd0:	4b3f      	ldr	r3, [pc, #252]	; (80050d0 <USBD_SetConfig+0x144>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8004fda:	4b3d      	ldr	r3, [pc, #244]	; (80050d0 <USBD_SetConfig+0x144>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff f9a7 	bl	8004334 <USBD_SetClassConfig>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d004      	beq.n	8004ffa <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8004ff0:	6839      	ldr	r1, [r7, #0]
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f944 	bl	8005280 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8004ff8:	e065      	b.n	80050c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f9ee 	bl	80053dc <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2203      	movs	r2, #3
 8005004:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005008:	e05d      	b.n	80050c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f9e6 	bl	80053dc <USBD_CtlSendStatus>
    break;
 8005010:	e059      	b.n	80050c6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005012:	4b2f      	ldr	r3, [pc, #188]	; (80050d0 <USBD_SetConfig+0x144>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d112      	bne.n	8005040 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2202      	movs	r2, #2
 800501e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005022:	4b2b      	ldr	r3, [pc, #172]	; (80050d0 <USBD_SetConfig+0x144>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800502c:	4b28      	ldr	r3, [pc, #160]	; (80050d0 <USBD_SetConfig+0x144>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	4619      	mov	r1, r3
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff f99a 	bl	800436c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f9cf 	bl	80053dc <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800503e:	e042      	b.n	80050c6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005040:	4b23      	ldr	r3, [pc, #140]	; (80050d0 <USBD_SetConfig+0x144>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	429a      	cmp	r2, r3
 800504c:	d02a      	beq.n	80050a4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	4619      	mov	r1, r3
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7ff f988 	bl	800436c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800505c:	4b1c      	ldr	r3, [pc, #112]	; (80050d0 <USBD_SetConfig+0x144>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005066:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <USBD_SetConfig+0x144>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	4619      	mov	r1, r3
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff f961 	bl	8004334 <USBD_SetClassConfig>
 8005072:	4603      	mov	r3, r0
 8005074:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00f      	beq.n	800509c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800507c:	6839      	ldr	r1, [r7, #0]
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f8fe 	bl	8005280 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	4619      	mov	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff f96d 	bl	800436c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800509a:	e014      	b.n	80050c6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f99d 	bl	80053dc <USBD_CtlSendStatus>
    break;
 80050a2:	e010      	b.n	80050c6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f999 	bl	80053dc <USBD_CtlSendStatus>
    break;
 80050aa:	e00c      	b.n	80050c6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80050ac:	6839      	ldr	r1, [r7, #0]
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f8e6 	bl	8005280 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80050b4:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <USBD_SetConfig+0x144>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	4619      	mov	r1, r3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7ff f956 	bl	800436c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80050c0:	2303      	movs	r3, #3
 80050c2:	73fb      	strb	r3, [r7, #15]
    break;
 80050c4:	bf00      	nop
  }

  return ret;
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000169 	.word	0x20000169

080050d4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	88db      	ldrh	r3, [r3, #6]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d004      	beq.n	80050f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80050e6:	6839      	ldr	r1, [r7, #0]
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f8c9 	bl	8005280 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80050ee:	e021      	b.n	8005134 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	db17      	blt.n	800512a <USBD_GetConfig+0x56>
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	dd02      	ble.n	8005104 <USBD_GetConfig+0x30>
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d00b      	beq.n	800511a <USBD_GetConfig+0x46>
 8005102:	e012      	b.n	800512a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3308      	adds	r3, #8
 800510e:	2201      	movs	r2, #1
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f925 	bl	8005362 <USBD_CtlSendData>
      break;
 8005118:	e00c      	b.n	8005134 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3304      	adds	r3, #4
 800511e:	2201      	movs	r2, #1
 8005120:	4619      	mov	r1, r3
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f91d 	bl	8005362 <USBD_CtlSendData>
      break;
 8005128:	e004      	b.n	8005134 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800512a:	6839      	ldr	r1, [r7, #0]
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f8a7 	bl	8005280 <USBD_CtlError>
      break;
 8005132:	bf00      	nop
}
 8005134:	bf00      	nop
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800514c:	3b01      	subs	r3, #1
 800514e:	2b02      	cmp	r3, #2
 8005150:	d81e      	bhi.n	8005190 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	88db      	ldrh	r3, [r3, #6]
 8005156:	2b02      	cmp	r3, #2
 8005158:	d004      	beq.n	8005164 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800515a:	6839      	ldr	r1, [r7, #0]
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f88f 	bl	8005280 <USBD_CtlError>
      break;
 8005162:	e01a      	b.n	800519a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d005      	beq.n	8005180 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f043 0202 	orr.w	r2, r3, #2
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	330c      	adds	r3, #12
 8005184:	2202      	movs	r2, #2
 8005186:	4619      	mov	r1, r3
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f8ea 	bl	8005362 <USBD_CtlSendData>
    break;
 800518e:	e004      	b.n	800519a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005190:	6839      	ldr	r1, [r7, #0]
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f874 	bl	8005280 <USBD_CtlError>
    break;
 8005198:	bf00      	nop
  }
}
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	885b      	ldrh	r3, [r3, #2]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d106      	bne.n	80051c2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f90d 	bl	80053dc <USBD_CtlSendStatus>
  }
}
 80051c2:	bf00      	nop
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051da:	3b01      	subs	r3, #1
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d80b      	bhi.n	80051f8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	885b      	ldrh	r3, [r3, #2]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d10c      	bne.n	8005202 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f8f3 	bl	80053dc <USBD_CtlSendStatus>
      }
      break;
 80051f6:	e004      	b.n	8005202 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80051f8:	6839      	ldr	r1, [r7, #0]
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f840 	bl	8005280 <USBD_CtlError>
      break;
 8005200:	e000      	b.n	8005204 <USBD_ClrFeature+0x3a>
      break;
 8005202:	bf00      	nop
  }
}
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	781a      	ldrb	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3301      	adds	r3, #1
 8005226:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	781a      	ldrb	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3301      	adds	r3, #1
 8005234:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f7ff fad3 	bl	80047e2 <SWAPBYTE>
 800523c:	4603      	mov	r3, r0
 800523e:	461a      	mov	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3301      	adds	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3301      	adds	r3, #1
 800524e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7ff fac6 	bl	80047e2 <SWAPBYTE>
 8005256:	4603      	mov	r3, r0
 8005258:	461a      	mov	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	3301      	adds	r3, #1
 8005262:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3301      	adds	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f7ff fab9 	bl	80047e2 <SWAPBYTE>
 8005270:	4603      	mov	r3, r0
 8005272:	461a      	mov	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	80da      	strh	r2, [r3, #6]
}
 8005278:	bf00      	nop
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800528a:	2180      	movs	r1, #128	; 0x80
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fd7b 	bl	8005d88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005292:	2100      	movs	r1, #0
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fd77 	bl	8005d88 <USBD_LL_StallEP>
}
 800529a:	bf00      	nop
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b086      	sub	sp, #24
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d036      	beq.n	8005326 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80052bc:	6938      	ldr	r0, [r7, #16]
 80052be:	f000 f836 	bl	800532e <USBD_GetLen>
 80052c2:	4603      	mov	r3, r0
 80052c4:	3301      	adds	r3, #1
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	4413      	add	r3, r2
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	7812      	ldrb	r2, [r2, #0]
 80052da:	701a      	strb	r2, [r3, #0]
  idx++;
 80052dc:	7dfb      	ldrb	r3, [r7, #23]
 80052de:	3301      	adds	r3, #1
 80052e0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80052e2:	7dfb      	ldrb	r3, [r7, #23]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	4413      	add	r3, r2
 80052e8:	2203      	movs	r2, #3
 80052ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80052ec:	7dfb      	ldrb	r3, [r7, #23]
 80052ee:	3301      	adds	r3, #1
 80052f0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80052f2:	e013      	b.n	800531c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80052f4:	7dfb      	ldrb	r3, [r7, #23]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	4413      	add	r3, r2
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	7812      	ldrb	r2, [r2, #0]
 80052fe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	3301      	adds	r3, #1
 8005304:	613b      	str	r3, [r7, #16]
    idx++;
 8005306:	7dfb      	ldrb	r3, [r7, #23]
 8005308:	3301      	adds	r3, #1
 800530a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800530c:	7dfb      	ldrb	r3, [r7, #23]
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	4413      	add	r3, r2
 8005312:	2200      	movs	r2, #0
 8005314:	701a      	strb	r2, [r3, #0]
    idx++;
 8005316:	7dfb      	ldrb	r3, [r7, #23]
 8005318:	3301      	adds	r3, #1
 800531a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e7      	bne.n	80052f4 <USBD_GetString+0x52>
 8005324:	e000      	b.n	8005328 <USBD_GetString+0x86>
    return;
 8005326:	bf00      	nop
  }
}
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800532e:	b480      	push	{r7}
 8005330:	b085      	sub	sp, #20
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800533e:	e005      	b.n	800534c <USBD_GetLen+0x1e>
  {
    len++;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	3301      	adds	r3, #1
 8005344:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	3301      	adds	r3, #1
 800534a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1f5      	bne.n	8005340 <USBD_GetLen+0x12>
  }

  return len;
 8005354:	7bfb      	ldrb	r3, [r7, #15]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2202      	movs	r2, #2
 8005372:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	2100      	movs	r1, #0
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 fd86 	bl	8005e9a <USBD_LL_Transmit>

  return USBD_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	2100      	movs	r1, #0
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 fd75 	bl	8005e9a <USBD_LL_Transmit>

  return USBD_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	2100      	movs	r1, #0
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 fd85 	bl	8005edc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2204      	movs	r2, #4
 80053e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80053ec:	2300      	movs	r3, #0
 80053ee:	2200      	movs	r2, #0
 80053f0:	2100      	movs	r1, #0
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fd51 	bl	8005e9a <USBD_LL_Transmit>

  return USBD_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b082      	sub	sp, #8
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2205      	movs	r2, #5
 800540e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005412:	2300      	movs	r3, #0
 8005414:	2200      	movs	r2, #0
 8005416:	2100      	movs	r1, #0
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fd5f 	bl	8005edc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800542c:	2200      	movs	r2, #0
 800542e:	4912      	ldr	r1, [pc, #72]	; (8005478 <MX_USB_DEVICE_Init+0x50>)
 8005430:	4812      	ldr	r0, [pc, #72]	; (800547c <MX_USB_DEVICE_Init+0x54>)
 8005432:	f7fe ff11 	bl	8004258 <USBD_Init>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800543c:	f7fb f912 	bl	8000664 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8005440:	490f      	ldr	r1, [pc, #60]	; (8005480 <MX_USB_DEVICE_Init+0x58>)
 8005442:	480e      	ldr	r0, [pc, #56]	; (800547c <MX_USB_DEVICE_Init+0x54>)
 8005444:	f7fe ff3e 	bl	80042c4 <USBD_RegisterClass>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800544e:	f7fb f909 	bl	8000664 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 8005452:	490c      	ldr	r1, [pc, #48]	; (8005484 <MX_USB_DEVICE_Init+0x5c>)
 8005454:	4809      	ldr	r0, [pc, #36]	; (800547c <MX_USB_DEVICE_Init+0x54>)
 8005456:	f7fe fe7d 	bl	8004154 <USBD_AUDIO_RegisterInterface>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005460:	f7fb f900 	bl	8000664 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005464:	4805      	ldr	r0, [pc, #20]	; (800547c <MX_USB_DEVICE_Init+0x54>)
 8005466:	f7fe ff4e 	bl	8004306 <USBD_Start>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005470:	f7fb f8f8 	bl	8000664 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005474:	bf00      	nop
 8005476:	bd80      	pop	{r7, pc}
 8005478:	200000ec 	.word	0x200000ec
 800547c:	200009b0 	.word	0x200009b0
 8005480:	2000000c 	.word	0x2000000c
 8005484:	200000d8 	.word	0x200000d8

08005488 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use 
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8005494:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 80054aa:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	4613      	mov	r3, r2
 80054c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */

  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 80054c6:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <MIDI_DataTx_FS>:

//fill midi tx buffer
static uint8_t MIDI_DataTx_FS(uint8_t *msg, uint16_t length)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	807b      	strh	r3, [r7, #2]
  uint16_t i = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	81fb      	strh	r3, [r7, #14]
  while (i < length) {
 80054e4:	e017      	b.n	8005516 <MIDI_DataTx_FS+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 80054e6:	89fb      	ldrh	r3, [r7, #14]
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	441a      	add	r2, r3
 80054ec:	4b0f      	ldr	r3, [pc, #60]	; (800552c <MIDI_DataTx_FS+0x58>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	7811      	ldrb	r1, [r2, #0]
 80054f2:	4a0f      	ldr	r2, [pc, #60]	; (8005530 <MIDI_DataTx_FS+0x5c>)
 80054f4:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 80054f6:	4b0d      	ldr	r3, [pc, #52]	; (800552c <MIDI_DataTx_FS+0x58>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3301      	adds	r3, #1
 80054fc:	4a0b      	ldr	r2, [pc, #44]	; (800552c <MIDI_DataTx_FS+0x58>)
 80054fe:	6013      	str	r3, [r2, #0]
    i++;
 8005500:	89fb      	ldrh	r3, [r7, #14]
 8005502:	3301      	adds	r3, #1
 8005504:	81fb      	strh	r3, [r7, #14]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 8005506:	4b09      	ldr	r3, [pc, #36]	; (800552c <MIDI_DataTx_FS+0x58>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800550e:	d102      	bne.n	8005516 <MIDI_DataTx_FS+0x42>
      APP_Rx_ptr_in = 0;
 8005510:	4b06      	ldr	r3, [pc, #24]	; (800552c <MIDI_DataTx_FS+0x58>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
  while (i < length) {
 8005516:	89fa      	ldrh	r2, [r7, #14]
 8005518:	887b      	ldrh	r3, [r7, #2]
 800551a:	429a      	cmp	r2, r3
 800551c:	d3e3      	bcc.n	80054e6 <MIDI_DataTx_FS+0x12>
    }
  }
  return (USBD_OK);
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	2000015c 	.word	0x2000015c
 8005530:	200001b0 	.word	0x200001b0

08005534 <MIDI_DataRx_FS>:


//process recived midi data
static uint8_t MIDI_DataRx_FS(uint8_t* msg, uint16_t length)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	807b      	strh	r3, [r7, #2]
  //uint16_t chk = length % 4; //if (chk != 0) return;
  //uint16_t *pid;
  //uint8_t *pbuf;
  tUsbMidiCable* pcable;

  for (cnt = 0; cnt < length; cnt += 4)
 8005540:	2300      	movs	r3, #0
 8005542:	81fb      	strh	r3, [r7, #14]
 8005544:	e0bb      	b.n	80056be <MIDI_DataRx_FS+0x18a>
  {
    switch ( msg[cnt] >> 4 ) {
 8005546:	89fb      	ldrh	r3, [r7, #14]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	4413      	add	r3, r2
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	091b      	lsrs	r3, r3, #4
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <MIDI_DataRx_FS+0x28>
 8005556:	2b01      	cmp	r3, #1
 8005558:	d003      	beq.n	8005562 <MIDI_DataRx_FS+0x2e>
      break;
    case 1:
      pcable = &usbmidicable2;
      break;
    default:
      continue;
 800555a:	e0ad      	b.n	80056b8 <MIDI_DataRx_FS+0x184>
      pcable = &usbmidicable1;
 800555c:	4b5e      	ldr	r3, [pc, #376]	; (80056d8 <MIDI_DataRx_FS+0x1a4>)
 800555e:	60bb      	str	r3, [r7, #8]
      break;
 8005560:	e002      	b.n	8005568 <MIDI_DataRx_FS+0x34>
      pcable = &usbmidicable2;
 8005562:	4b5e      	ldr	r3, [pc, #376]	; (80056dc <MIDI_DataRx_FS+0x1a8>)
 8005564:	60bb      	str	r3, [r7, #8]
      break;
 8005566:	bf00      	nop
    };

    switch ( msg[cnt] & 0x0F ) {
 8005568:	89fb      	ldrh	r3, [r7, #14]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	f003 030f 	and.w	r3, r3, #15
 8005574:	2b0f      	cmp	r3, #15
 8005576:	d861      	bhi.n	800563c <MIDI_DataRx_FS+0x108>
 8005578:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <MIDI_DataRx_FS+0x4c>)
 800557a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557e:	bf00      	nop
 8005580:	080056b7 	.word	0x080056b7
 8005584:	080056b7 	.word	0x080056b7
 8005588:	080055eb 	.word	0x080055eb
 800558c:	0800563d 	.word	0x0800563d
 8005590:	0800563d 	.word	0x0800563d
 8005594:	080055c1 	.word	0x080055c1
 8005598:	080055eb 	.word	0x080055eb
 800559c:	0800563d 	.word	0x0800563d
 80055a0:	0800563d 	.word	0x0800563d
 80055a4:	0800563d 	.word	0x0800563d
 80055a8:	0800563d 	.word	0x0800563d
 80055ac:	0800563d 	.word	0x0800563d
 80055b0:	080055eb 	.word	0x080055eb
 80055b4:	080055eb 	.word	0x080055eb
 80055b8:	0800563d 	.word	0x0800563d
 80055bc:	080055c1 	.word	0x080055c1
    case 0x0:
    case 0x1:
      continue;
    case 0x5:
    case 0xF:
      pcable->buf[ pcable->curidx ] = msg[ cnt+1 ];
 80055c0:	89fb      	ldrh	r3, [r7, #14]
 80055c2:	3301      	adds	r3, #1
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	4413      	add	r3, r2
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	8812      	ldrh	r2, [r2, #0]
 80055cc:	4611      	mov	r1, r2
 80055ce:	781a      	ldrb	r2, [r3, #0]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	440b      	add	r3, r1
 80055d4:	711a      	strb	r2, [r3, #4]
      pcable->curidx = NEXTBYTE(pcable->curidx, USBMIDIMASK);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	3301      	adds	r3, #1
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	801a      	strh	r2, [r3, #0]
      break;
 80055e8:	e066      	b.n	80056b8 <MIDI_DataRx_FS+0x184>
    case 0x2:
    case 0x6:
    case 0xC:
    case 0xD:
      pcable->buf[ pcable->curidx ] = msg[ cnt+1 ];
 80055ea:	89fb      	ldrh	r3, [r7, #14]
 80055ec:	3301      	adds	r3, #1
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	4413      	add	r3, r2
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	8812      	ldrh	r2, [r2, #0]
 80055f6:	4611      	mov	r1, r2
 80055f8:	781a      	ldrb	r2, [r3, #0]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	440b      	add	r3, r1
 80055fe:	711a      	strb	r2, [r3, #4]
      pcable->curidx = NEXTBYTE(pcable->curidx, USBMIDIMASK);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	3301      	adds	r3, #1
 8005606:	b29b      	uxth	r3, r3
 8005608:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800560c:	b29a      	uxth	r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	801a      	strh	r2, [r3, #0]
      pcable->buf[ pcable->curidx ] = msg[ cnt+2 ];
 8005612:	89fb      	ldrh	r3, [r7, #14]
 8005614:	3302      	adds	r3, #2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	4413      	add	r3, r2
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	8812      	ldrh	r2, [r2, #0]
 800561e:	4611      	mov	r1, r2
 8005620:	781a      	ldrb	r2, [r3, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	440b      	add	r3, r1
 8005626:	711a      	strb	r2, [r3, #4]
      pcable->curidx = NEXTBYTE(pcable->curidx, USBMIDIMASK);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	3301      	adds	r3, #1
 800562e:	b29b      	uxth	r3, r3
 8005630:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005634:	b29a      	uxth	r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	801a      	strh	r2, [r3, #0]
      break;
 800563a:	e03d      	b.n	80056b8 <MIDI_DataRx_FS+0x184>
    default:
      pcable->buf[ pcable->curidx ] = msg[ cnt+1 ];
 800563c:	89fb      	ldrh	r3, [r7, #14]
 800563e:	3301      	adds	r3, #1
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	4413      	add	r3, r2
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	8812      	ldrh	r2, [r2, #0]
 8005648:	4611      	mov	r1, r2
 800564a:	781a      	ldrb	r2, [r3, #0]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	440b      	add	r3, r1
 8005650:	711a      	strb	r2, [r3, #4]
      pcable->curidx = NEXTBYTE(pcable->curidx, USBMIDIMASK);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	3301      	adds	r3, #1
 8005658:	b29b      	uxth	r3, r3
 800565a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800565e:	b29a      	uxth	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	801a      	strh	r2, [r3, #0]
      pcable->buf[ pcable->curidx ] = msg[ cnt+2 ];
 8005664:	89fb      	ldrh	r3, [r7, #14]
 8005666:	3302      	adds	r3, #2
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	4413      	add	r3, r2
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	8812      	ldrh	r2, [r2, #0]
 8005670:	4611      	mov	r1, r2
 8005672:	781a      	ldrb	r2, [r3, #0]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	440b      	add	r3, r1
 8005678:	711a      	strb	r2, [r3, #4]
      pcable->curidx = NEXTBYTE(pcable->curidx, USBMIDIMASK);
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	3301      	adds	r3, #1
 8005680:	b29b      	uxth	r3, r3
 8005682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005686:	b29a      	uxth	r2, r3
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	801a      	strh	r2, [r3, #0]
      pcable->buf[ pcable->curidx ] = msg[ cnt+3 ];
 800568c:	89fb      	ldrh	r3, [r7, #14]
 800568e:	3303      	adds	r3, #3
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	4413      	add	r3, r2
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	8812      	ldrh	r2, [r2, #0]
 8005698:	4611      	mov	r1, r2
 800569a:	781a      	ldrb	r2, [r3, #0]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	440b      	add	r3, r1
 80056a0:	711a      	strb	r2, [r3, #4]
      pcable->curidx = NEXTBYTE(pcable->curidx, USBMIDIMASK);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	3301      	adds	r3, #1
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	801a      	strh	r2, [r3, #0]
      break;
 80056b4:	e000      	b.n	80056b8 <MIDI_DataRx_FS+0x184>
      continue;
 80056b6:	bf00      	nop
  for (cnt = 0; cnt < length; cnt += 4)
 80056b8:	89fb      	ldrh	r3, [r7, #14]
 80056ba:	3304      	adds	r3, #4
 80056bc:	81fb      	strh	r3, [r7, #14]
 80056be:	89fa      	ldrh	r2, [r7, #14]
 80056c0:	887b      	ldrh	r3, [r7, #2]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	f4ff af3f 	bcc.w	8005546 <MIDI_DataRx_FS+0x12>
    };
  };

  return (USBD_OK);
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	20001484 	.word	0x20001484
 80056dc:	20000c80 	.word	0x20000c80

080056e0 <USBD_SendMidiMessages>:

void USBD_SendMidiMessages(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
  if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 80056e4:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <USBD_SendMidiMessages+0x30>)
 80056e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d10a      	bne.n	8005704 <USBD_SendMidiMessages+0x24>
  {
    if (!USB_Tx_State)
 80056ee:	4b09      	ldr	r3, [pc, #36]	; (8005714 <USBD_SendMidiMessages+0x34>)
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d102      	bne.n	80056fc <USBD_SendMidiMessages+0x1c>
      USBD_MIDI_SendPacket();
 80056f6:	f7fe fd43 	bl	8004180 <USBD_MIDI_SendPacket>
  }
  else
  {
      USB_Tx_State = USB_TX_READY;
  }
}
 80056fa:	e006      	b.n	800570a <USBD_SendMidiMessages+0x2a>
      USB_Tx_State = USB_TX_CONTINUE;
 80056fc:	4b05      	ldr	r3, [pc, #20]	; (8005714 <USBD_SendMidiMessages+0x34>)
 80056fe:	2202      	movs	r2, #2
 8005700:	701a      	strb	r2, [r3, #0]
}
 8005702:	e002      	b.n	800570a <USBD_SendMidiMessages+0x2a>
      USB_Tx_State = USB_TX_READY;
 8005704:	4b03      	ldr	r3, [pc, #12]	; (8005714 <USBD_SendMidiMessages+0x34>)
 8005706:	2200      	movs	r2, #0
 8005708:	701a      	strb	r2, [r3, #0]
}
 800570a:	bf00      	nop
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	200009b0 	.word	0x200009b0
 8005714:	20000168 	.word	0x20000168

08005718 <USBD_AddNoteOn>:


/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void USBD_AddNoteOn(uint8_t cable, uint8_t ch, uint8_t note, uint8_t vel)
{
 8005718:	b590      	push	{r4, r7, lr}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	4604      	mov	r4, r0
 8005720:	4608      	mov	r0, r1
 8005722:	4611      	mov	r1, r2
 8005724:	461a      	mov	r2, r3
 8005726:	4623      	mov	r3, r4
 8005728:	71fb      	strb	r3, [r7, #7]
 800572a:	4603      	mov	r3, r0
 800572c:	71bb      	strb	r3, [r7, #6]
 800572e:	460b      	mov	r3, r1
 8005730:	717b      	strb	r3, [r7, #5]
 8005732:	4613      	mov	r3, r2
 8005734:	713b      	strb	r3, [r7, #4]
  //uint8_t cable = 0;
  uint8_t txbuf[4];

  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED) return;
 8005736:	4b13      	ldr	r3, [pc, #76]	; (8005784 <USBD_AddNoteOn+0x6c>)
 8005738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800573c:	2b03      	cmp	r3, #3
 800573e:	d11c      	bne.n	800577a <USBD_AddNoteOn+0x62>
  cable <<= 4;
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	71fb      	strb	r3, [r7, #7]
  txbuf[0] = cable + 0x9;
 8005746:	79fb      	ldrb	r3, [r7, #7]
 8005748:	3309      	adds	r3, #9
 800574a:	b2db      	uxtb	r3, r3
 800574c:	733b      	strb	r3, [r7, #12]
  txbuf[1] = 0x90 | ch;
 800574e:	79bb      	ldrb	r3, [r7, #6]
 8005750:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8005754:	b2db      	uxtb	r3, r3
 8005756:	737b      	strb	r3, [r7, #13]
  txbuf[2] = 0x7F & note;
 8005758:	797b      	ldrb	r3, [r7, #5]
 800575a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800575e:	b2db      	uxtb	r3, r3
 8005760:	73bb      	strb	r3, [r7, #14]
  txbuf[3] = 0x7F & vel;
 8005762:	793b      	ldrb	r3, [r7, #4]
 8005764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005768:	b2db      	uxtb	r3, r3
 800576a:	73fb      	strb	r3, [r7, #15]
  MIDI_DataTx_FS(txbuf, 4);
 800576c:	f107 030c 	add.w	r3, r7, #12
 8005770:	2104      	movs	r1, #4
 8005772:	4618      	mov	r0, r3
 8005774:	f7ff feae 	bl	80054d4 <MIDI_DataTx_FS>
 8005778:	e000      	b.n	800577c <USBD_AddNoteOn+0x64>
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED) return;
 800577a:	bf00      	nop
}
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	bd90      	pop	{r4, r7, pc}
 8005782:	bf00      	nop
 8005784:	200009b0 	.word	0x200009b0

08005788 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	6039      	str	r1, [r7, #0]
 8005792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2212      	movs	r2, #18
 8005798:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800579a:	4b03      	ldr	r3, [pc, #12]	; (80057a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800579c:	4618      	mov	r0, r3
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	20000108 	.word	0x20000108

080057ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	6039      	str	r1, [r7, #0]
 80057b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2204      	movs	r2, #4
 80057bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80057be:	4b03      	ldr	r3, [pc, #12]	; (80057cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	2000011c 	.word	0x2000011c

080057d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	4603      	mov	r3, r0
 80057d8:	6039      	str	r1, [r7, #0]
 80057da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d105      	bne.n	80057ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	4907      	ldr	r1, [pc, #28]	; (8005804 <USBD_FS_ProductStrDescriptor+0x34>)
 80057e6:	4808      	ldr	r0, [pc, #32]	; (8005808 <USBD_FS_ProductStrDescriptor+0x38>)
 80057e8:	f7ff fd5b 	bl	80052a2 <USBD_GetString>
 80057ec:	e004      	b.n	80057f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	4904      	ldr	r1, [pc, #16]	; (8005804 <USBD_FS_ProductStrDescriptor+0x34>)
 80057f2:	4805      	ldr	r0, [pc, #20]	; (8005808 <USBD_FS_ProductStrDescriptor+0x38>)
 80057f4:	f7ff fd55 	bl	80052a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80057f8:	4b02      	ldr	r3, [pc, #8]	; (8005804 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20001c88 	.word	0x20001c88
 8005808:	08005fe8 	.word	0x08005fe8

0800580c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	4603      	mov	r3, r0
 8005814:	6039      	str	r1, [r7, #0]
 8005816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	4904      	ldr	r1, [pc, #16]	; (800582c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800581c:	4804      	ldr	r0, [pc, #16]	; (8005830 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800581e:	f7ff fd40 	bl	80052a2 <USBD_GetString>
  return USBD_StrDesc;
 8005822:	4b02      	ldr	r3, [pc, #8]	; (800582c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	20001c88 	.word	0x20001c88
 8005830:	08005ff4 	.word	0x08005ff4

08005834 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	4603      	mov	r3, r0
 800583c:	6039      	str	r1, [r7, #0]
 800583e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	221a      	movs	r2, #26
 8005844:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005846:	f000 f843 	bl	80058d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800584a:	4b02      	ldr	r3, [pc, #8]	; (8005854 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000120 	.word	0x20000120

08005858 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	4603      	mov	r3, r0
 8005860:	6039      	str	r1, [r7, #0]
 8005862:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005864:	79fb      	ldrb	r3, [r7, #7]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d105      	bne.n	8005876 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	4907      	ldr	r1, [pc, #28]	; (800588c <USBD_FS_ConfigStrDescriptor+0x34>)
 800586e:	4808      	ldr	r0, [pc, #32]	; (8005890 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005870:	f7ff fd17 	bl	80052a2 <USBD_GetString>
 8005874:	e004      	b.n	8005880 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	4904      	ldr	r1, [pc, #16]	; (800588c <USBD_FS_ConfigStrDescriptor+0x34>)
 800587a:	4805      	ldr	r0, [pc, #20]	; (8005890 <USBD_FS_ConfigStrDescriptor+0x38>)
 800587c:	f7ff fd11 	bl	80052a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005880:	4b02      	ldr	r3, [pc, #8]	; (800588c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20001c88 	.word	0x20001c88
 8005890:	08006000 	.word	0x08006000

08005894 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	4603      	mov	r3, r0
 800589c:	6039      	str	r1, [r7, #0]
 800589e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80058a0:	79fb      	ldrb	r3, [r7, #7]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d105      	bne.n	80058b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	4907      	ldr	r1, [pc, #28]	; (80058c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80058aa:	4808      	ldr	r0, [pc, #32]	; (80058cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80058ac:	f7ff fcf9 	bl	80052a2 <USBD_GetString>
 80058b0:	e004      	b.n	80058bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	4904      	ldr	r1, [pc, #16]	; (80058c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80058b6:	4805      	ldr	r0, [pc, #20]	; (80058cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80058b8:	f7ff fcf3 	bl	80052a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80058bc:	4b02      	ldr	r3, [pc, #8]	; (80058c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20001c88 	.word	0x20001c88
 80058cc:	0800600c 	.word	0x0800600c

080058d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80058d6:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <Get_SerialNum+0x44>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80058dc:	4b0e      	ldr	r3, [pc, #56]	; (8005918 <Get_SerialNum+0x48>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80058e2:	4b0e      	ldr	r3, [pc, #56]	; (800591c <Get_SerialNum+0x4c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4413      	add	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d009      	beq.n	800590a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80058f6:	2208      	movs	r2, #8
 80058f8:	4909      	ldr	r1, [pc, #36]	; (8005920 <Get_SerialNum+0x50>)
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f814 	bl	8005928 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005900:	2204      	movs	r2, #4
 8005902:	4908      	ldr	r1, [pc, #32]	; (8005924 <Get_SerialNum+0x54>)
 8005904:	68b8      	ldr	r0, [r7, #8]
 8005906:	f000 f80f 	bl	8005928 <IntToUnicode>
  }
}
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	1fff7a10 	.word	0x1fff7a10
 8005918:	1fff7a14 	.word	0x1fff7a14
 800591c:	1fff7a18 	.word	0x1fff7a18
 8005920:	20000122 	.word	0x20000122
 8005924:	20000132 	.word	0x20000132

08005928 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	4613      	mov	r3, r2
 8005934:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800593a:	2300      	movs	r3, #0
 800593c:	75fb      	strb	r3, [r7, #23]
 800593e:	e027      	b.n	8005990 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	0f1b      	lsrs	r3, r3, #28
 8005944:	2b09      	cmp	r3, #9
 8005946:	d80b      	bhi.n	8005960 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	0f1b      	lsrs	r3, r3, #28
 800594c:	b2da      	uxtb	r2, r3
 800594e:	7dfb      	ldrb	r3, [r7, #23]
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	4619      	mov	r1, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	440b      	add	r3, r1
 8005958:	3230      	adds	r2, #48	; 0x30
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]
 800595e:	e00a      	b.n	8005976 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	0f1b      	lsrs	r3, r3, #28
 8005964:	b2da      	uxtb	r2, r3
 8005966:	7dfb      	ldrb	r3, [r7, #23]
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	4619      	mov	r1, r3
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	440b      	add	r3, r1
 8005970:	3237      	adds	r2, #55	; 0x37
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800597c:	7dfb      	ldrb	r3, [r7, #23]
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	3301      	adds	r3, #1
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	4413      	add	r3, r2
 8005986:	2200      	movs	r2, #0
 8005988:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800598a:	7dfb      	ldrb	r3, [r7, #23]
 800598c:	3301      	adds	r3, #1
 800598e:	75fb      	strb	r3, [r7, #23]
 8005990:	7dfa      	ldrb	r2, [r7, #23]
 8005992:	79fb      	ldrb	r3, [r7, #7]
 8005994:	429a      	cmp	r2, r3
 8005996:	d3d3      	bcc.n	8005940 <IntToUnicode+0x18>
  }
}
 8005998:	bf00      	nop
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08a      	sub	sp, #40	; 0x28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059ac:	f107 0314 	add.w	r3, r7, #20
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	605a      	str	r2, [r3, #4]
 80059b6:	609a      	str	r2, [r3, #8]
 80059b8:	60da      	str	r2, [r3, #12]
 80059ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059c4:	d13a      	bne.n	8005a3c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059c6:	2300      	movs	r3, #0
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	4b1e      	ldr	r3, [pc, #120]	; (8005a44 <HAL_PCD_MspInit+0xa0>)
 80059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ce:	4a1d      	ldr	r2, [pc, #116]	; (8005a44 <HAL_PCD_MspInit+0xa0>)
 80059d0:	f043 0301 	orr.w	r3, r3, #1
 80059d4:	6313      	str	r3, [r2, #48]	; 0x30
 80059d6:	4b1b      	ldr	r3, [pc, #108]	; (8005a44 <HAL_PCD_MspInit+0xa0>)
 80059d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	613b      	str	r3, [r7, #16]
 80059e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80059e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80059e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059e8:	2302      	movs	r3, #2
 80059ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ec:	2300      	movs	r3, #0
 80059ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059f0:	2303      	movs	r3, #3
 80059f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80059f4:	230a      	movs	r3, #10
 80059f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059f8:	f107 0314 	add.w	r3, r7, #20
 80059fc:	4619      	mov	r1, r3
 80059fe:	4812      	ldr	r0, [pc, #72]	; (8005a48 <HAL_PCD_MspInit+0xa4>)
 8005a00:	f7fb f87e 	bl	8000b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005a04:	4b0f      	ldr	r3, [pc, #60]	; (8005a44 <HAL_PCD_MspInit+0xa0>)
 8005a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a08:	4a0e      	ldr	r2, [pc, #56]	; (8005a44 <HAL_PCD_MspInit+0xa0>)
 8005a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a0e:	6353      	str	r3, [r2, #52]	; 0x34
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <HAL_PCD_MspInit+0xa0>)
 8005a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a18:	4a0a      	ldr	r2, [pc, #40]	; (8005a44 <HAL_PCD_MspInit+0xa0>)
 8005a1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a1e:	6453      	str	r3, [r2, #68]	; 0x44
 8005a20:	4b08      	ldr	r3, [pc, #32]	; (8005a44 <HAL_PCD_MspInit+0xa0>)
 8005a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2100      	movs	r1, #0
 8005a30:	2043      	movs	r0, #67	; 0x43
 8005a32:	f7fb f82e 	bl	8000a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005a36:	2043      	movs	r0, #67	; 0x43
 8005a38:	f7fb f847 	bl	8000aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005a3c:	bf00      	nop
 8005a3e:	3728      	adds	r7, #40	; 0x28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	40023800 	.word	0x40023800
 8005a48:	40020000 	.word	0x40020000

08005a4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a60:	4619      	mov	r1, r3
 8005a62:	4610      	mov	r0, r2
 8005a64:	f7fe fc9a 	bl	800439c <USBD_LL_SetupStage>
}
 8005a68:	bf00      	nop
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005a82:	78fa      	ldrb	r2, [r7, #3]
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	1a9b      	subs	r3, r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	440b      	add	r3, r1
 8005a90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	78fb      	ldrb	r3, [r7, #3]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	f7fe fcd2 	bl	8004442 <USBD_LL_DataOutStage>
}
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005ab8:	78fa      	ldrb	r2, [r7, #3]
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	4613      	mov	r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	1a9b      	subs	r3, r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	3348      	adds	r3, #72	; 0x48
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	78fb      	ldrb	r3, [r7, #3]
 8005acc:	4619      	mov	r1, r3
 8005ace:	f7fe fd1b 	bl	8004508 <USBD_LL_DataInStage>
}
 8005ad2:	bf00      	nop
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b082      	sub	sp, #8
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7fe fe1f 	bl	800472c <USBD_LL_SOF>
}
 8005aee:	bf00      	nop
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005afe:	2301      	movs	r3, #1
 8005b00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d102      	bne.n	8005b10 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	73fb      	strb	r3, [r7, #15]
 8005b0e:	e008      	b.n	8005b22 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d102      	bne.n	8005b1e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	73fb      	strb	r3, [r7, #15]
 8005b1c:	e001      	b.n	8005b22 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005b1e:	f7fa fda1 	bl	8000664 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b28:	7bfa      	ldrb	r2, [r7, #15]
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fe fdc2 	bl	80046b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fe fd7b 	bl	8004634 <USBD_LL_Reset>
}
 8005b3e:	bf00      	nop
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fdbd 	bl	80046d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6812      	ldr	r2, [r2, #0]
 8005b6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b6e:	f043 0301 	orr.w	r3, r3, #1
 8005b72:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d005      	beq.n	8005b88 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005b7c:	4b04      	ldr	r3, [pc, #16]	; (8005b90 <HAL_PCD_SuspendCallback+0x48>)
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	4a03      	ldr	r2, [pc, #12]	; (8005b90 <HAL_PCD_SuspendCallback+0x48>)
 8005b82:	f043 0306 	orr.w	r3, r3, #6
 8005b86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005b88:	bf00      	nop
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	e000ed00 	.word	0xe000ed00

08005b94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe fdac 	bl	8004700 <USBD_LL_Resume>
}
 8005ba8:	bf00      	nop
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005bc2:	78fa      	ldrb	r2, [r7, #3]
 8005bc4:	4611      	mov	r1, r2
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fe fdd7 	bl	800477a <USBD_LL_IsoOUTIncomplete>
}
 8005bcc:	bf00      	nop
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005be6:	78fa      	ldrb	r2, [r7, #3]
 8005be8:	4611      	mov	r1, r2
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe fdb8 	bl	8004760 <USBD_LL_IsoINIncomplete>
}
 8005bf0:	bf00      	nop
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fe fdc4 	bl	8004794 <USBD_LL_DevConnected>
}
 8005c0c:	bf00      	nop
 8005c0e:	3708      	adds	r7, #8
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fe fdc1 	bl	80047aa <USBD_LL_DevDisconnected>
}
 8005c28:	bf00      	nop
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d13c      	bne.n	8005cba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005c40:	4a20      	ldr	r2, [pc, #128]	; (8005cc4 <USBD_LL_Init+0x94>)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a1e      	ldr	r2, [pc, #120]	; (8005cc4 <USBD_LL_Init+0x94>)
 8005c4c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005c50:	4b1c      	ldr	r3, [pc, #112]	; (8005cc4 <USBD_LL_Init+0x94>)
 8005c52:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005c56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005c58:	4b1a      	ldr	r3, [pc, #104]	; (8005cc4 <USBD_LL_Init+0x94>)
 8005c5a:	2204      	movs	r2, #4
 8005c5c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005c5e:	4b19      	ldr	r3, [pc, #100]	; (8005cc4 <USBD_LL_Init+0x94>)
 8005c60:	2202      	movs	r2, #2
 8005c62:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005c64:	4b17      	ldr	r3, [pc, #92]	; (8005cc4 <USBD_LL_Init+0x94>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005c6a:	4b16      	ldr	r3, [pc, #88]	; (8005cc4 <USBD_LL_Init+0x94>)
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005c70:	4b14      	ldr	r3, [pc, #80]	; (8005cc4 <USBD_LL_Init+0x94>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005c76:	4b13      	ldr	r3, [pc, #76]	; (8005cc4 <USBD_LL_Init+0x94>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005c7c:	4b11      	ldr	r3, [pc, #68]	; (8005cc4 <USBD_LL_Init+0x94>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005c82:	4b10      	ldr	r3, [pc, #64]	; (8005cc4 <USBD_LL_Init+0x94>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005c88:	4b0e      	ldr	r3, [pc, #56]	; (8005cc4 <USBD_LL_Init+0x94>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005c8e:	480d      	ldr	r0, [pc, #52]	; (8005cc4 <USBD_LL_Init+0x94>)
 8005c90:	f7fb f8e8 	bl	8000e64 <HAL_PCD_Init>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005c9a:	f7fa fce3 	bl	8000664 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005c9e:	2180      	movs	r1, #128	; 0x80
 8005ca0:	4808      	ldr	r0, [pc, #32]	; (8005cc4 <USBD_LL_Init+0x94>)
 8005ca2:	f7fc fa2e 	bl	8002102 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005ca6:	2240      	movs	r2, #64	; 0x40
 8005ca8:	2100      	movs	r1, #0
 8005caa:	4806      	ldr	r0, [pc, #24]	; (8005cc4 <USBD_LL_Init+0x94>)
 8005cac:	f7fc f9e2 	bl	8002074 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005cb0:	2280      	movs	r2, #128	; 0x80
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	4803      	ldr	r0, [pc, #12]	; (8005cc4 <USBD_LL_Init+0x94>)
 8005cb6:	f7fc f9dd 	bl	8002074 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	20001e88 	.word	0x20001e88

08005cc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fb f9dd 	bl	800109e <HAL_PCD_Start>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 f918 	bl	8005f20 <USBD_Get_USB_Status>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005cf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b084      	sub	sp, #16
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	4608      	mov	r0, r1
 8005d08:	4611      	mov	r1, r2
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	70fb      	strb	r3, [r7, #3]
 8005d10:	460b      	mov	r3, r1
 8005d12:	70bb      	strb	r3, [r7, #2]
 8005d14:	4613      	mov	r3, r2
 8005d16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005d26:	78bb      	ldrb	r3, [r7, #2]
 8005d28:	883a      	ldrh	r2, [r7, #0]
 8005d2a:	78f9      	ldrb	r1, [r7, #3]
 8005d2c:	f7fb fdc1 	bl	80018b2 <HAL_PCD_EP_Open>
 8005d30:	4603      	mov	r3, r0
 8005d32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 f8f2 	bl	8005f20 <USBD_Get_USB_Status>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005d40:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	460b      	mov	r3, r1
 8005d54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d64:	78fa      	ldrb	r2, [r7, #3]
 8005d66:	4611      	mov	r1, r2
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fb fe0a 	bl	8001982 <HAL_PCD_EP_Close>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 f8d3 	bl	8005f20 <USBD_Get_USB_Status>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005d7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005da2:	78fa      	ldrb	r2, [r7, #3]
 8005da4:	4611      	mov	r1, r2
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fb feca 	bl	8001b40 <HAL_PCD_EP_SetStall>
 8005dac:	4603      	mov	r3, r0
 8005dae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 f8b4 	bl	8005f20 <USBD_Get_USB_Status>
 8005db8:	4603      	mov	r3, r0
 8005dba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8005dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b084      	sub	sp, #16
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005de0:	78fa      	ldrb	r2, [r7, #3]
 8005de2:	4611      	mov	r1, r2
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fb ff0f 	bl	8001c08 <HAL_PCD_EP_ClrStall>
 8005dea:	4603      	mov	r3, r0
 8005dec:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 f895 	bl	8005f20 <USBD_Get_USB_Status>
 8005df6:	4603      	mov	r3, r0
 8005df8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8005dfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005e16:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	da0b      	bge.n	8005e38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e26:	68f9      	ldr	r1, [r7, #12]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	1a9b      	subs	r3, r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	333e      	adds	r3, #62	; 0x3e
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	e00b      	b.n	8005e50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e3e:	68f9      	ldr	r1, [r7, #12]
 8005e40:	4613      	mov	r3, r2
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	1a9b      	subs	r3, r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	440b      	add	r3, r1
 8005e4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005e4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005e76:	78fa      	ldrb	r2, [r7, #3]
 8005e78:	4611      	mov	r1, r2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fb fcf4 	bl	8001868 <HAL_PCD_SetAddress>
 8005e80:	4603      	mov	r3, r0
 8005e82:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 f84a 	bl	8005f20 <USBD_Get_USB_Status>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8005e90:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b086      	sub	sp, #24
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005eb8:	7af9      	ldrb	r1, [r7, #11]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	f7fb fdf5 	bl	8001aac <HAL_PCD_EP_Transmit>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 f829 	bl	8005f20 <USBD_Get_USB_Status>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005ed2:	7dbb      	ldrb	r3, [r7, #22]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	607a      	str	r2, [r7, #4]
 8005ee6:	603b      	str	r3, [r7, #0]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005efa:	7af9      	ldrb	r1, [r7, #11]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	f7fb fd89 	bl	8001a16 <HAL_PCD_EP_Receive>
 8005f04:	4603      	mov	r3, r0
 8005f06:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 f808 	bl	8005f20 <USBD_Get_USB_Status>
 8005f10:	4603      	mov	r3, r0
 8005f12:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8005f14:	7dbb      	ldrb	r3, [r7, #22]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d817      	bhi.n	8005f64 <USBD_Get_USB_Status+0x44>
 8005f34:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <USBD_Get_USB_Status+0x1c>)
 8005f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3a:	bf00      	nop
 8005f3c:	08005f4d 	.word	0x08005f4d
 8005f40:	08005f53 	.word	0x08005f53
 8005f44:	08005f59 	.word	0x08005f59
 8005f48:	08005f5f 	.word	0x08005f5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8005f50:	e00b      	b.n	8005f6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005f52:	2303      	movs	r3, #3
 8005f54:	73fb      	strb	r3, [r7, #15]
    break;
 8005f56:	e008      	b.n	8005f6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	73fb      	strb	r3, [r7, #15]
    break;
 8005f5c:	e005      	b.n	8005f6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	73fb      	strb	r3, [r7, #15]
    break;
 8005f62:	e002      	b.n	8005f6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005f64:	2303      	movs	r3, #3
 8005f66:	73fb      	strb	r3, [r7, #15]
    break;
 8005f68:	bf00      	nop
  }
  return usb_status;
 8005f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <__libc_init_array>:
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	4e0d      	ldr	r6, [pc, #52]	; (8005fb0 <__libc_init_array+0x38>)
 8005f7c:	4c0d      	ldr	r4, [pc, #52]	; (8005fb4 <__libc_init_array+0x3c>)
 8005f7e:	1ba4      	subs	r4, r4, r6
 8005f80:	10a4      	asrs	r4, r4, #2
 8005f82:	2500      	movs	r5, #0
 8005f84:	42a5      	cmp	r5, r4
 8005f86:	d109      	bne.n	8005f9c <__libc_init_array+0x24>
 8005f88:	4e0b      	ldr	r6, [pc, #44]	; (8005fb8 <__libc_init_array+0x40>)
 8005f8a:	4c0c      	ldr	r4, [pc, #48]	; (8005fbc <__libc_init_array+0x44>)
 8005f8c:	f000 f820 	bl	8005fd0 <_init>
 8005f90:	1ba4      	subs	r4, r4, r6
 8005f92:	10a4      	asrs	r4, r4, #2
 8005f94:	2500      	movs	r5, #0
 8005f96:	42a5      	cmp	r5, r4
 8005f98:	d105      	bne.n	8005fa6 <__libc_init_array+0x2e>
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
 8005f9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fa0:	4798      	blx	r3
 8005fa2:	3501      	adds	r5, #1
 8005fa4:	e7ee      	b.n	8005f84 <__libc_init_array+0xc>
 8005fa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005faa:	4798      	blx	r3
 8005fac:	3501      	adds	r5, #1
 8005fae:	e7f2      	b.n	8005f96 <__libc_init_array+0x1e>
 8005fb0:	08006034 	.word	0x08006034
 8005fb4:	08006034 	.word	0x08006034
 8005fb8:	08006034 	.word	0x08006034
 8005fbc:	08006038 	.word	0x08006038

08005fc0 <memset>:
 8005fc0:	4402      	add	r2, r0
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d100      	bne.n	8005fca <memset+0xa>
 8005fc8:	4770      	bx	lr
 8005fca:	f803 1b01 	strb.w	r1, [r3], #1
 8005fce:	e7f9      	b.n	8005fc4 <memset+0x4>

08005fd0 <_init>:
 8005fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd2:	bf00      	nop
 8005fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd6:	bc08      	pop	{r3}
 8005fd8:	469e      	mov	lr, r3
 8005fda:	4770      	bx	lr

08005fdc <_fini>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	bf00      	nop
 8005fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe2:	bc08      	pop	{r3}
 8005fe4:	469e      	mov	lr, r3
 8005fe6:	4770      	bx	lr
