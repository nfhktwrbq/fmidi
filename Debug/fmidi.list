
fmidi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000781c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080079a4  080079a4  000179a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079f0  080079f0  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  080079f0  080079f0  000179f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079f8  080079f8  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08007a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024f4  2000013c  08007b3c  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002630  08007b3c  00022630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018220  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000333f  00000000  00000000  0003838c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a0  00000000  00000000  0003b6d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001028  00000000  00000000  0003c870  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002482d  00000000  00000000  0003d898  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000104c3  00000000  00000000  000620c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf903  00000000  00000000  00072588  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00141e8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004930  00000000  00000000  00141f08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000013c 	.word	0x2000013c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800798c 	.word	0x0800798c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000140 	.word	0x20000140
 80001c4:	0800798c 	.word	0x0800798c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fcff 	bl	8000ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f82b 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 fa49 	bl	800096c <MX_GPIO_Init>
  MX_DMA_Init();
 80004da:	f000 fa17 	bl	800090c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80004de:	f006 fc81 	bl	8006de4 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80004e2:	f000 f9c1 	bl	8000868 <MX_TIM2_Init>
  MX_ADC1_Init();
 80004e6:	f000 f88b 	bl	8000600 <MX_ADC1_Init>
  MX_ADC2_Init();
 80004ea:	f000 f8f9 	bl	80006e0 <MX_ADC2_Init>
  MX_ADC3_Init();
 80004ee:	f000 f959 	bl	80007a4 <MX_ADC3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t buttonPressFlag = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)== GPIO_PIN_SET)
 80004f6:	2101      	movs	r1, #1
 80004f8:	480b      	ldr	r0, [pc, #44]	; (8000528 <main+0x60>)
 80004fa:	f001 febd 	bl	8002278 <HAL_GPIO_ReadPin>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b01      	cmp	r3, #1
 8000502:	d10d      	bne.n	8000520 <main+0x58>
	  {
		  if(buttonPressFlag==0)
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1f5      	bne.n	80004f6 <main+0x2e>
		  {
			  buttonPressFlag = 1;
 800050a:	2301      	movs	r3, #1
 800050c:	71fb      	strb	r3, [r7, #7]
			  USBD_AddNoteOn(0, 0, 55, 55);
 800050e:	2337      	movs	r3, #55	; 0x37
 8000510:	2237      	movs	r2, #55	; 0x37
 8000512:	2100      	movs	r1, #0
 8000514:	2000      	movs	r0, #0
 8000516:	f006 fddd 	bl	80070d4 <USBD_AddNoteOn>
			  USBD_SendMidiMessages();
 800051a:	f006 fdbf 	bl	800709c <USBD_SendMidiMessages>
 800051e:	e7ea      	b.n	80004f6 <main+0x2e>
		  }
	  }
	  else
	  {
		  buttonPressFlag = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	71fb      	strb	r3, [r7, #7]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)== GPIO_PIN_SET)
 8000524:	e7e7      	b.n	80004f6 <main+0x2e>
 8000526:	bf00      	nop
 8000528:	40020000 	.word	0x40020000

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f007 fa1e 	bl	800797c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	; (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <SystemClock_Config+0xd0>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2301      	movs	r3, #1
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800059c:	2304      	movs	r3, #4
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005a0:	23a8      	movs	r3, #168	; 0xa8
 80005a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a8:	2307      	movs	r3, #7
 80005aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 ffe5 	bl	8003580 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005bc:	f000 fa2e 	bl	8000a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2302      	movs	r3, #2
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2105      	movs	r1, #5
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 fa3e 	bl	8003a60 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ea:	f000 fa17 	bl	8000a1c <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_Init 0 */
  //ADC1->CR1 |= ADC_CR1_EOCIE;
  /* USER CODE END ADC1_Init 0 */

  //ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
  HAL_NVIC_SetPriority(ADC_IRQn, 4, 0);
 8000612:	2200      	movs	r2, #0
 8000614:	2104      	movs	r1, #4
 8000616:	2012      	movs	r0, #18
 8000618:	f001 f90b 	bl	8001832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 800061c:	2012      	movs	r0, #18
 800061e:	f001 f924 	bl	800186a <HAL_NVIC_EnableIRQ>
  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <MX_ADC1_Init+0xd8>)
 8000624:	4a2d      	ldr	r2, [pc, #180]	; (80006dc <MX_ADC1_Init+0xdc>)
 8000626:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000628:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <MX_ADC1_Init+0xd8>)
 800062a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800062e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000630:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_ADC1_Init+0xd8>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <MX_ADC1_Init+0xd8>)
 8000638:	2201      	movs	r2, #1
 800063a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063c:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_ADC1_Init+0xd8>)
 800063e:	2200      	movs	r2, #0
 8000640:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000642:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <MX_ADC1_Init+0xd8>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <MX_ADC1_Init+0xd8>)
 800064c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000652:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_ADC1_Init+0xd8>)
 8000654:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000658:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_ADC1_Init+0xd8>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_ADC1_Init+0xd8>)
 8000662:	2202      	movs	r2, #2
 8000664:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_ADC1_Init+0xd8>)
 8000668:	2201      	movs	r2, #1
 800066a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_ADC1_Init+0xd8>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	4818      	ldr	r0, [pc, #96]	; (80006d8 <MX_ADC1_Init+0xd8>)
 8000676:	f000 fcbf 	bl	8000ff8 <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x84>
  {
    Error_Handler();
 8000680:	f000 f9cc 	bl	8000a1c <Error_Handler>
//  {
//    Error_Handler();
//  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000684:	2308      	movs	r3, #8
 8000686:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000688:	2301      	movs	r3, #1
 800068a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000690:	463b      	mov	r3, r7
 8000692:	4619      	mov	r1, r3
 8000694:	4810      	ldr	r0, [pc, #64]	; (80006d8 <MX_ADC1_Init+0xd8>)
 8000696:	f000 fdd3 	bl	8001240 <HAL_ADC_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 80006a0:	f000 f9bc 	bl	8000a1c <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_9;
 80006a4:	2309      	movs	r3, #9
 80006a6:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	4808      	ldr	r0, [pc, #32]	; (80006d8 <MX_ADC1_Init+0xd8>)
 80006b6:	f000 fdc3 	bl	8001240 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xc4>
    {
      Error_Handler();
 80006c0:	f000 f9ac 	bl	8000a1c <Error_Handler>
    }
  /* USER CODE BEGIN ADC1_Init 2 */
    ADC1->CR1 |= ADC_CR1_EOCIE;
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <MX_ADC1_Init+0xdc>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <MX_ADC1_Init+0xdc>)
 80006ca:	f043 0320 	orr.w	r3, r3, #32
 80006ce:	6053      	str	r3, [r2, #4]
  /* USER CODE END ADC1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000037c 	.word	0x2000037c
 80006dc:	40012000 	.word	0x40012000

080006e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 80006f2:	4b2a      	ldr	r3, [pc, #168]	; (800079c <MX_ADC2_Init+0xbc>)
 80006f4:	4a2a      	ldr	r2, [pc, #168]	; (80007a0 <MX_ADC2_Init+0xc0>)
 80006f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f8:	4b28      	ldr	r3, [pc, #160]	; (800079c <MX_ADC2_Init+0xbc>)
 80006fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000700:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_ADC2_Init+0xbc>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8000706:	4b25      	ldr	r3, [pc, #148]	; (800079c <MX_ADC2_Init+0xbc>)
 8000708:	2201      	movs	r2, #1
 800070a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800070c:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_ADC2_Init+0xbc>)
 800070e:	2200      	movs	r2, #0
 8000710:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <MX_ADC2_Init+0xbc>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_ADC2_Init+0xbc>)
 800071c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000722:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_ADC2_Init+0xbc>)
 8000724:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000728:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_ADC2_Init+0xbc>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_ADC2_Init+0xbc>)
 8000732:	2202      	movs	r2, #2
 8000734:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_ADC2_Init+0xbc>)
 8000738:	2201      	movs	r2, #1
 800073a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_ADC2_Init+0xbc>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000744:	4815      	ldr	r0, [pc, #84]	; (800079c <MX_ADC2_Init+0xbc>)
 8000746:	f000 fc57 	bl	8000ff8 <HAL_ADC_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8000750:	f000 f964 	bl	8000a1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000754:	230b      	movs	r3, #11
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000758:	2301      	movs	r3, #1
 800075a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_ADC2_Init+0xbc>)
 8000766:	f000 fd6b 	bl	8001240 <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8000770:	f000 f954 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  sConfig.Channel = ADC_CHANNEL_12;
 8000774:	230c      	movs	r3, #12
 8000776:	603b      	str	r3, [r7, #0]
	sConfig.Rank =2;
 8000778:	2302      	movs	r3, #2
 800077a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000780:	463b      	mov	r3, r7
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_ADC2_Init+0xbc>)
 8000786:	f000 fd5b 	bl	8001240 <HAL_ADC_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC2_Init+0xb4>
	{
	  Error_Handler();
 8000790:	f000 f944 	bl	8000a1c <Error_Handler>
	}
  /* USER CODE END ADC2_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200002d4 	.word	0x200002d4
 80007a0:	40012100 	.word	0x40012100

080007a4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	463b      	mov	r3, r7
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80007b6:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <MX_ADC3_Init+0xbc>)
 80007b8:	4a2a      	ldr	r2, [pc, #168]	; (8000864 <MX_ADC3_Init+0xc0>)
 80007ba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <MX_ADC3_Init+0xbc>)
 80007be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007c2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007c4:	4b26      	ldr	r3, [pc, #152]	; (8000860 <MX_ADC3_Init+0xbc>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80007ca:	4b25      	ldr	r3, [pc, #148]	; (8000860 <MX_ADC3_Init+0xbc>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007d0:	4b23      	ldr	r3, [pc, #140]	; (8000860 <MX_ADC3_Init+0xbc>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007d6:	4b22      	ldr	r3, [pc, #136]	; (8000860 <MX_ADC3_Init+0xbc>)
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <MX_ADC3_Init+0xbc>)
 80007e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_ADC3_Init+0xbc>)
 80007e8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ee:	4b1c      	ldr	r3, [pc, #112]	; (8000860 <MX_ADC3_Init+0xbc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_ADC3_Init+0xbc>)
 80007f6:	2202      	movs	r2, #2
 80007f8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_ADC3_Init+0xbc>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_ADC3_Init+0xbc>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000808:	4815      	ldr	r0, [pc, #84]	; (8000860 <MX_ADC3_Init+0xbc>)
 800080a:	f000 fbf5 	bl	8000ff8 <HAL_ADC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8000814:	f000 f902 	bl	8000a1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000818:	2301      	movs	r3, #1
 800081a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	480d      	ldr	r0, [pc, #52]	; (8000860 <MX_ADC3_Init+0xbc>)
 800082a:	f000 fd09 	bl	8001240 <HAL_ADC_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000834:	f000 f8f2 	bl	8000a1c <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_2;
 8000838:	2302      	movs	r3, #2
 800083a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800083c:	2301      	movs	r3, #1
 800083e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_ADC3_Init+0xbc>)
 800084a:	f000 fcf9 	bl	8001240 <HAL_ADC_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC3_Init+0xb4>
  {
	Error_Handler();
 8000854:	f000 f8e2 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200003c4 	.word	0x200003c4
 8000864:	40012200 	.word	0x40012200

08000868 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <MX_TIM2_Init+0xa0>)
 8000886:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800088a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0xffff;
 800088c:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <MX_TIM2_Init+0xa0>)
 800088e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000892:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_TIM2_Init+0xa0>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x1fff;
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_TIM2_Init+0xa0>)
 800089c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80008a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_TIM2_Init+0xa0>)
 80008a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_TIM2_Init+0xa0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b0:	4815      	ldr	r0, [pc, #84]	; (8000908 <MX_TIM2_Init+0xa0>)
 80008b2:	f003 fa9f 	bl	8003df4 <HAL_TIM_Base_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80008bc:	f000 f8ae 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	4619      	mov	r1, r3
 80008cc:	480e      	ldr	r0, [pc, #56]	; (8000908 <MX_TIM2_Init+0xa0>)
 80008ce:	f003 fae0 	bl	8003e92 <HAL_TIM_ConfigClockSource>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80008d8:	f000 f8a0 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008dc:	2320      	movs	r3, #32
 80008de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	4619      	mov	r1, r3
 80008e8:	4807      	ldr	r0, [pc, #28]	; (8000908 <MX_TIM2_Init+0xa0>)
 80008ea:	f003 fcc3 	bl	8004274 <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80008f4:	f000 f892 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start(&htim2);
 80008f8:	4803      	ldr	r0, [pc, #12]	; (8000908 <MX_TIM2_Init+0xa0>)
 80008fa:	f003 faa6 	bl	8003e4a <HAL_TIM_Base_Start>
  /* USER CODE END TIM2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2000046c 	.word	0x2000046c

0800090c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_DMA_Init+0x5c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a13      	ldr	r2, [pc, #76]	; (8000968 <MX_DMA_Init+0x5c>)
 800091c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_DMA_Init+0x5c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	2038      	movs	r0, #56	; 0x38
 8000934:	f000 ff7d 	bl	8001832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000938:	2038      	movs	r0, #56	; 0x38
 800093a:	f000 ff96 	bl	800186a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2039      	movs	r0, #57	; 0x39
 8000944:	f000 ff75 	bl	8001832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000948:	2039      	movs	r0, #57	; 0x39
 800094a:	f000 ff8e 	bl	800186a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	203a      	movs	r0, #58	; 0x3a
 8000954:	f000 ff6d 	bl	8001832 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000958:	203a      	movs	r0, #58	; 0x3a
 800095a:	f000 ff86 	bl	800186a <HAL_NVIC_EnableIRQ>

}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <MX_GPIO_Init+0xa8>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a22      	ldr	r2, [pc, #136]	; (8000a14 <MX_GPIO_Init+0xa8>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <MX_GPIO_Init+0xa8>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <MX_GPIO_Init+0xa8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a1b      	ldr	r2, [pc, #108]	; (8000a14 <MX_GPIO_Init+0xa8>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_GPIO_Init+0xa8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_GPIO_Init+0xa8>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <MX_GPIO_Init+0xa8>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <MX_GPIO_Init+0xa8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_GPIO_Init+0xa8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <MX_GPIO_Init+0xa8>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_GPIO_Init+0xa8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f2:	2301      	movs	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_GPIO_Init+0xac>)
 8000a06:	f001 fa9d 	bl	8001f44 <HAL_GPIO_Init>

}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	; 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020000 	.word	0x40020000

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a9e      	ldr	r2, [pc, #632]	; (8000d14 <HAL_ADC_MspInit+0x298>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d163      	bne.n	8000b66 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */
	 memset(arrADC1, 0, ARR_LEN * sizeof(arrADC1[0]));
 8000a9e:	2278      	movs	r2, #120	; 0x78
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	489d      	ldr	r0, [pc, #628]	; (8000d18 <HAL_ADC_MspInit+0x29c>)
 8000aa4:	f006 ff6a 	bl	800797c <memset>
  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	623b      	str	r3, [r7, #32]
 8000aac:	4b9b      	ldr	r3, [pc, #620]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab0:	4a9a      	ldr	r2, [pc, #616]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab8:	4b98      	ldr	r3, [pc, #608]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ac0:	623b      	str	r3, [r7, #32]
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
 8000ac8:	4b94      	ldr	r3, [pc, #592]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a93      	ldr	r2, [pc, #588]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000ace:	f043 0302 	orr.w	r3, r3, #2
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad4:	4b91      	ldr	r3, [pc, #580]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	61fb      	str	r3, [r7, #28]
 8000ade:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af0:	4619      	mov	r1, r3
 8000af2:	488b      	ldr	r0, [pc, #556]	; (8000d20 <HAL_ADC_MspInit+0x2a4>)
 8000af4:	f001 fa26 	bl	8001f44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000af8:	4b8a      	ldr	r3, [pc, #552]	; (8000d24 <HAL_ADC_MspInit+0x2a8>)
 8000afa:	4a8b      	ldr	r2, [pc, #556]	; (8000d28 <HAL_ADC_MspInit+0x2ac>)
 8000afc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000afe:	4b89      	ldr	r3, [pc, #548]	; (8000d24 <HAL_ADC_MspInit+0x2a8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b04:	4b87      	ldr	r3, [pc, #540]	; (8000d24 <HAL_ADC_MspInit+0x2a8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0a:	4b86      	ldr	r3, [pc, #536]	; (8000d24 <HAL_ADC_MspInit+0x2a8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b10:	4b84      	ldr	r3, [pc, #528]	; (8000d24 <HAL_ADC_MspInit+0x2a8>)
 8000b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b18:	4b82      	ldr	r3, [pc, #520]	; (8000d24 <HAL_ADC_MspInit+0x2a8>)
 8000b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b20:	4b80      	ldr	r3, [pc, #512]	; (8000d24 <HAL_ADC_MspInit+0x2a8>)
 8000b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b26:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b28:	4b7e      	ldr	r3, [pc, #504]	; (8000d24 <HAL_ADC_MspInit+0x2a8>)
 8000b2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000b30:	4b7c      	ldr	r3, [pc, #496]	; (8000d24 <HAL_ADC_MspInit+0x2a8>)
 8000b32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b36:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b38:	4b7a      	ldr	r3, [pc, #488]	; (8000d24 <HAL_ADC_MspInit+0x2a8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b3e:	4879      	ldr	r0, [pc, #484]	; (8000d24 <HAL_ADC_MspInit+0x2a8>)
 8000b40:	f000 feae 	bl	80018a0 <HAL_DMA_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_ADC_MspInit+0xd2>
    {
      Error_Handler();
 8000b4a:	f7ff ff67 	bl	8000a1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a74      	ldr	r2, [pc, #464]	; (8000d24 <HAL_ADC_MspInit+0x2a8>)
 8000b52:	639a      	str	r2, [r3, #56]	; 0x38
 8000b54:	4a73      	ldr	r2, [pc, #460]	; (8000d24 <HAL_ADC_MspInit+0x2a8>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */
    HAL_ADC_Start_DMA(hadc, (uint32_t *)arrADC1, ARR_LEN);
 8000b5a:	223c      	movs	r2, #60	; 0x3c
 8000b5c:	496e      	ldr	r1, [pc, #440]	; (8000d18 <HAL_ADC_MspInit+0x29c>)
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f000 fa8e 	bl	8001080 <HAL_ADC_Start_DMA>
  /* USER CODE BEGIN ADC3_MspInit 1 */
    HAL_ADC_Start_DMA(hadc, (uint32_t *)arrADC3, ARR_LEN );
  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000b64:	e0d1      	b.n	8000d0a <HAL_ADC_MspInit+0x28e>
  else if(hadc->Instance==ADC2)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a70      	ldr	r2, [pc, #448]	; (8000d2c <HAL_ADC_MspInit+0x2b0>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d164      	bne.n	8000c3a <HAL_ADC_MspInit+0x1be>
	  memset(arrADC2, 0, ARR_LEN * sizeof(arrADC1[0]));
 8000b70:	2278      	movs	r2, #120	; 0x78
 8000b72:	2100      	movs	r1, #0
 8000b74:	486e      	ldr	r0, [pc, #440]	; (8000d30 <HAL_ADC_MspInit+0x2b4>)
 8000b76:	f006 ff01 	bl	800797c <memset>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	4b67      	ldr	r3, [pc, #412]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a66      	ldr	r2, [pc, #408]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000b84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b64      	ldr	r3, [pc, #400]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	4b60      	ldr	r3, [pc, #384]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a5f      	ldr	r2, [pc, #380]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b5d      	ldr	r3, [pc, #372]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000bb2:	2306      	movs	r3, #6
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	485b      	ldr	r0, [pc, #364]	; (8000d34 <HAL_ADC_MspInit+0x2b8>)
 8000bc6:	f001 f9bd 	bl	8001f44 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000bca:	4b5b      	ldr	r3, [pc, #364]	; (8000d38 <HAL_ADC_MspInit+0x2bc>)
 8000bcc:	4a5b      	ldr	r2, [pc, #364]	; (8000d3c <HAL_ADC_MspInit+0x2c0>)
 8000bce:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000bd0:	4b59      	ldr	r3, [pc, #356]	; (8000d38 <HAL_ADC_MspInit+0x2bc>)
 8000bd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bd6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bd8:	4b57      	ldr	r3, [pc, #348]	; (8000d38 <HAL_ADC_MspInit+0x2bc>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bde:	4b56      	ldr	r3, [pc, #344]	; (8000d38 <HAL_ADC_MspInit+0x2bc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000be4:	4b54      	ldr	r3, [pc, #336]	; (8000d38 <HAL_ADC_MspInit+0x2bc>)
 8000be6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bea:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bec:	4b52      	ldr	r3, [pc, #328]	; (8000d38 <HAL_ADC_MspInit+0x2bc>)
 8000bee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bf2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bf4:	4b50      	ldr	r3, [pc, #320]	; (8000d38 <HAL_ADC_MspInit+0x2bc>)
 8000bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfa:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000bfc:	4b4e      	ldr	r3, [pc, #312]	; (8000d38 <HAL_ADC_MspInit+0x2bc>)
 8000bfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c02:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8000c04:	4b4c      	ldr	r3, [pc, #304]	; (8000d38 <HAL_ADC_MspInit+0x2bc>)
 8000c06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c0a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c0c:	4b4a      	ldr	r3, [pc, #296]	; (8000d38 <HAL_ADC_MspInit+0x2bc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000c12:	4849      	ldr	r0, [pc, #292]	; (8000d38 <HAL_ADC_MspInit+0x2bc>)
 8000c14:	f000 fe44 	bl	80018a0 <HAL_DMA_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_ADC_MspInit+0x1a6>
      Error_Handler();
 8000c1e:	f7ff fefd 	bl	8000a1c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a44      	ldr	r2, [pc, #272]	; (8000d38 <HAL_ADC_MspInit+0x2bc>)
 8000c26:	639a      	str	r2, [r3, #56]	; 0x38
 8000c28:	4a43      	ldr	r2, [pc, #268]	; (8000d38 <HAL_ADC_MspInit+0x2bc>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_ADC_Start_DMA(hadc, (uint32_t *)arrADC2, ARR_LEN );
 8000c2e:	223c      	movs	r2, #60	; 0x3c
 8000c30:	493f      	ldr	r1, [pc, #252]	; (8000d30 <HAL_ADC_MspInit+0x2b4>)
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f000 fa24 	bl	8001080 <HAL_ADC_Start_DMA>
}
 8000c38:	e067      	b.n	8000d0a <HAL_ADC_MspInit+0x28e>
  else if(hadc->Instance==ADC3)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a40      	ldr	r2, [pc, #256]	; (8000d40 <HAL_ADC_MspInit+0x2c4>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d162      	bne.n	8000d0a <HAL_ADC_MspInit+0x28e>
	  memset(arrADC3, 0, ARR_LEN * sizeof(arrADC1[0]));
 8000c44:	2278      	movs	r2, #120	; 0x78
 8000c46:	2100      	movs	r1, #0
 8000c48:	483e      	ldr	r0, [pc, #248]	; (8000d44 <HAL_ADC_MspInit+0x2c8>)
 8000c4a:	f006 fe97 	bl	800797c <memset>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a31      	ldr	r2, [pc, #196]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000c58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b2f      	ldr	r3, [pc, #188]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a2a      	ldr	r2, [pc, #168]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <HAL_ADC_MspInit+0x2a0>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000c86:	2306      	movs	r3, #6
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	482b      	ldr	r0, [pc, #172]	; (8000d48 <HAL_ADC_MspInit+0x2cc>)
 8000c9a:	f001 f953 	bl	8001f44 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000c9e:	4b2b      	ldr	r3, [pc, #172]	; (8000d4c <HAL_ADC_MspInit+0x2d0>)
 8000ca0:	4a2b      	ldr	r2, [pc, #172]	; (8000d50 <HAL_ADC_MspInit+0x2d4>)
 8000ca2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000ca4:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <HAL_ADC_MspInit+0x2d0>)
 8000ca6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000caa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <HAL_ADC_MspInit+0x2d0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <HAL_ADC_MspInit+0x2d0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <HAL_ADC_MspInit+0x2d0>)
 8000cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cbe:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <HAL_ADC_MspInit+0x2d0>)
 8000cc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cc6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cc8:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <HAL_ADC_MspInit+0x2d0>)
 8000cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cce:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000cd0:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <HAL_ADC_MspInit+0x2d0>)
 8000cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <HAL_ADC_MspInit+0x2d0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cde:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <HAL_ADC_MspInit+0x2d0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000ce4:	4819      	ldr	r0, [pc, #100]	; (8000d4c <HAL_ADC_MspInit+0x2d0>)
 8000ce6:	f000 fddb 	bl	80018a0 <HAL_DMA_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <HAL_ADC_MspInit+0x278>
      Error_Handler();
 8000cf0:	f7ff fe94 	bl	8000a1c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a15      	ldr	r2, [pc, #84]	; (8000d4c <HAL_ADC_MspInit+0x2d0>)
 8000cf8:	639a      	str	r2, [r3, #56]	; 0x38
 8000cfa:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <HAL_ADC_MspInit+0x2d0>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_ADC_Start_DMA(hadc, (uint32_t *)arrADC3, ARR_LEN );
 8000d00:	223c      	movs	r2, #60	; 0x3c
 8000d02:	4910      	ldr	r1, [pc, #64]	; (8000d44 <HAL_ADC_MspInit+0x2c8>)
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f000 f9bb 	bl	8001080 <HAL_ADC_Start_DMA>
}
 8000d0a:	bf00      	nop
 8000d0c:	3738      	adds	r7, #56	; 0x38
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40012000 	.word	0x40012000
 8000d18:	20000158 	.word	0x20000158
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020400 	.word	0x40020400
 8000d24:	2000040c 	.word	0x2000040c
 8000d28:	40026410 	.word	0x40026410
 8000d2c:	40012100 	.word	0x40012100
 8000d30:	200001d0 	.word	0x200001d0
 8000d34:	40020800 	.word	0x40020800
 8000d38:	200004ac 	.word	0x200004ac
 8000d3c:	40026440 	.word	0x40026440
 8000d40:	40012200 	.word	0x40012200
 8000d44:	20000248 	.word	0x20000248
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	2000031c 	.word	0x2000031c
 8000d50:	40026428 	.word	0x40026428

08000d54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d64:	d10d      	bne.n	8000d82 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_TIM_Base_MspInit+0x3c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_TIM_Base_MspInit+0x3c>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_TIM_Base_MspInit+0x3c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <MemManage_Handler+0x4>

08000dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f000 f8c4 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <DMA2_Stream0_IRQHandler+0x10>)
 8000df6:	f000 fe3d 	bl	8001a74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000040c 	.word	0x2000040c

08000e04 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <DMA2_Stream1_IRQHandler+0x10>)
 8000e0a:	f000 fe33 	bl	8001a74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000031c 	.word	0x2000031c

08000e18 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <DMA2_Stream2_IRQHandler+0x10>)
 8000e1e:	f000 fe29 	bl	8001a74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200004ac 	.word	0x200004ac

08000e2c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <OTG_FS_IRQHandler+0x10>)
 8000e32:	f001 fb89 	bl	8002548 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20002228 	.word	0x20002228

08000e40 <ADC_IRQHandler>:

/* USER CODE BEGIN 1 */
void ADC_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 8000e44:	200a      	movs	r0, #10
 8000e46:	f000 f8b5 	bl	8000fb4 <HAL_Delay>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <SystemInit+0x28>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5a:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <SystemInit+0x28>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SystemInit+0x28>)
 8000e66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e6a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <Reset_Handler>:
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb4 <LoopFillZerobss+0x14>
 8000e80:	2100      	movs	r1, #0
 8000e82:	e003      	b.n	8000e8c <LoopCopyDataInit>

08000e84 <CopyDataInit>:
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <LoopFillZerobss+0x18>)
 8000e86:	585b      	ldr	r3, [r3, r1]
 8000e88:	5043      	str	r3, [r0, r1]
 8000e8a:	3104      	adds	r1, #4

08000e8c <LoopCopyDataInit>:
 8000e8c:	480b      	ldr	r0, [pc, #44]	; (8000ebc <LoopFillZerobss+0x1c>)
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <LoopFillZerobss+0x20>)
 8000e90:	1842      	adds	r2, r0, r1
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d3f6      	bcc.n	8000e84 <CopyDataInit>
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <LoopFillZerobss+0x24>)
 8000e98:	e002      	b.n	8000ea0 <LoopFillZerobss>

08000e9a <FillZerobss>:
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f842 3b04 	str.w	r3, [r2], #4

08000ea0 <LoopFillZerobss>:
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <LoopFillZerobss+0x28>)
 8000ea2:	429a      	cmp	r2, r3
 8000ea4:	d3f9      	bcc.n	8000e9a <FillZerobss>
 8000ea6:	f7ff ffd3 	bl	8000e50 <SystemInit>
 8000eaa:	f006 fd43 	bl	8007934 <__libc_init_array>
 8000eae:	f7ff fb0b 	bl	80004c8 <main>
 8000eb2:	4770      	bx	lr
 8000eb4:	20020000 	.word	0x20020000
 8000eb8:	08007a00 	.word	0x08007a00
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	2000013c 	.word	0x2000013c
 8000ec4:	2000013c 	.word	0x2000013c
 8000ec8:	20002630 	.word	0x20002630

08000ecc <CAN1_RX0_IRQHandler>:
 8000ecc:	e7fe      	b.n	8000ecc <CAN1_RX0_IRQHandler>
	...

08000ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <HAL_Init+0x40>)
 8000eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_Init+0x40>)
 8000ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_Init+0x40>)
 8000ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 fc8f 	bl	800181c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 f808 	bl	8000f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f04:	f7ff fd92 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023c00 	.word	0x40023c00

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x54>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x58>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fca7 	bl	8001886 <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00e      	b.n	8000f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d80a      	bhi.n	8000f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f50:	f000 fc6f 	bl	8001832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <HAL_InitTick+0x5c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e000      	b.n	8000f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000004 	.word	0x20000004

08000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008
 8000f98:	2000050c 	.word	0x2000050c

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2000050c 	.word	0x2000050c

08000fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fbc:	f7ff ffee 	bl	8000f9c <HAL_GetTick>
 8000fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fcc:	d005      	beq.n	8000fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_Delay+0x40>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fda:	bf00      	nop
 8000fdc:	f7ff ffde 	bl	8000f9c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8f7      	bhi.n	8000fdc <HAL_Delay+0x28>
  {
  }
}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000008 	.word	0x20000008

08000ff8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e033      	b.n	8001076 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	2b00      	cmp	r3, #0
 8001014:	d109      	bne.n	800102a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff fd30 	bl	8000a7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	2b00      	cmp	r3, #0
 8001034:	d118      	bne.n	8001068 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800103e:	f023 0302 	bic.w	r3, r3, #2
 8001042:	f043 0202 	orr.w	r2, r3, #2
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 fa1a 	bl	8001484 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f023 0303 	bic.w	r3, r3, #3
 800105e:	f043 0201 	orr.w	r2, r3, #1
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	641a      	str	r2, [r3, #64]	; 0x40
 8001066:	e001      	b.n	800106c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001096:	2b01      	cmp	r3, #1
 8001098:	d101      	bne.n	800109e <HAL_ADC_Start_DMA+0x1e>
 800109a:	2302      	movs	r3, #2
 800109c:	e0c0      	b.n	8001220 <HAL_ADC_Start_DMA+0x1a0>
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2201      	movs	r2, #1
 80010a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d018      	beq.n	80010e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 0201 	orr.w	r2, r2, #1
 80010c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010c4:	4b58      	ldr	r3, [pc, #352]	; (8001228 <HAL_ADC_Start_DMA+0x1a8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a58      	ldr	r2, [pc, #352]	; (800122c <HAL_ADC_Start_DMA+0x1ac>)
 80010ca:	fba2 2303 	umull	r2, r3, r2, r3
 80010ce:	0c9a      	lsrs	r2, r3, #18
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010d8:	e002      	b.n	80010e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	3b01      	subs	r3, #1
 80010de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f9      	bne.n	80010da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	f040 8094 	bne.w	800121e <HAL_ADC_Start_DMA+0x19e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010fe:	f023 0301 	bic.w	r3, r3, #1
 8001102:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001114:	2b00      	cmp	r3, #0
 8001116:	d007      	beq.n	8001128 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001120:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001134:	d106      	bne.n	8001144 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f023 0206 	bic.w	r2, r3, #6
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	645a      	str	r2, [r3, #68]	; 0x44
 8001142:	e002      	b.n	800114a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001152:	4b37      	ldr	r3, [pc, #220]	; (8001230 <HAL_ADC_Start_DMA+0x1b0>)
 8001154:	617b      	str	r3, [r7, #20]
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800115e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800116e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800117e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	334c      	adds	r3, #76	; 0x4c
 800118a:	4619      	mov	r1, r3
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f000 fc34 	bl	80019fc <HAL_DMA_Start>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 031f 	and.w	r3, r3, #31
 800119c:	2b00      	cmp	r3, #0
 800119e:	d12a      	bne.n	80011f6 <HAL_ADC_Start_DMA+0x176>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a23      	ldr	r2, [pc, #140]	; (8001234 <HAL_ADC_Start_DMA+0x1b4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d015      	beq.n	80011d6 <HAL_ADC_Start_DMA+0x156>
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a22      	ldr	r2, [pc, #136]	; (8001238 <HAL_ADC_Start_DMA+0x1b8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d105      	bne.n	80011c0 <HAL_ADC_Start_DMA+0x140>
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <HAL_ADC_Start_DMA+0x1b0>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 031f 	and.w	r3, r3, #31
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00a      	beq.n	80011d6 <HAL_ADC_Start_DMA+0x156>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a1d      	ldr	r2, [pc, #116]	; (800123c <HAL_ADC_Start_DMA+0x1bc>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d129      	bne.n	800121e <HAL_ADC_Start_DMA+0x19e>
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_ADC_Start_DMA+0x1b0>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	2b0f      	cmp	r3, #15
 80011d4:	d823      	bhi.n	800121e <HAL_ADC_Start_DMA+0x19e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d11c      	bne.n	800121e <HAL_ADC_Start_DMA+0x19e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	e013      	b.n	800121e <HAL_ADC_Start_DMA+0x19e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <HAL_ADC_Start_DMA+0x1b4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d10e      	bne.n	800121e <HAL_ADC_Start_DMA+0x19e>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d107      	bne.n	800121e <HAL_ADC_Start_DMA+0x19e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800121c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000000 	.word	0x20000000
 800122c:	431bde83 	.word	0x431bde83
 8001230:	40012300 	.word	0x40012300
 8001234:	40012000 	.word	0x40012000
 8001238:	40012100 	.word	0x40012100
 800123c:	40012200 	.word	0x40012200

08001240 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_ADC_ConfigChannel+0x1c>
 8001258:	2302      	movs	r3, #2
 800125a:	e105      	b.n	8001468 <HAL_ADC_ConfigChannel+0x228>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b09      	cmp	r3, #9
 800126a:	d925      	bls.n	80012b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68d9      	ldr	r1, [r3, #12]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	b29b      	uxth	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	4613      	mov	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	3b1e      	subs	r3, #30
 8001282:	2207      	movs	r2, #7
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43da      	mvns	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	400a      	ands	r2, r1
 8001290:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68d9      	ldr	r1, [r3, #12]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	4603      	mov	r3, r0
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4403      	add	r3, r0
 80012aa:	3b1e      	subs	r3, #30
 80012ac:	409a      	lsls	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	e022      	b.n	80012fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6919      	ldr	r1, [r3, #16]
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	461a      	mov	r2, r3
 80012c6:	4613      	mov	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	2207      	movs	r2, #7
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	400a      	ands	r2, r1
 80012da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6919      	ldr	r1, [r3, #16]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689a      	ldr	r2, [r3, #8]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	4618      	mov	r0, r3
 80012ee:	4603      	mov	r3, r0
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4403      	add	r3, r0
 80012f4:	409a      	lsls	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b06      	cmp	r3, #6
 8001304:	d824      	bhi.n	8001350 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	3b05      	subs	r3, #5
 8001318:	221f      	movs	r2, #31
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	400a      	ands	r2, r1
 8001326:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	4618      	mov	r0, r3
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	3b05      	subs	r3, #5
 8001342:	fa00 f203 	lsl.w	r2, r0, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	635a      	str	r2, [r3, #52]	; 0x34
 800134e:	e04c      	b.n	80013ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b0c      	cmp	r3, #12
 8001356:	d824      	bhi.n	80013a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	3b23      	subs	r3, #35	; 0x23
 800136a:	221f      	movs	r2, #31
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43da      	mvns	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	400a      	ands	r2, r1
 8001378:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	b29b      	uxth	r3, r3
 8001386:	4618      	mov	r0, r3
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	3b23      	subs	r3, #35	; 0x23
 8001394:	fa00 f203 	lsl.w	r2, r0, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	631a      	str	r2, [r3, #48]	; 0x30
 80013a0:	e023      	b.n	80013ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	3b41      	subs	r3, #65	; 0x41
 80013b4:	221f      	movs	r2, #31
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	400a      	ands	r2, r1
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	4618      	mov	r0, r3
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	3b41      	subs	r3, #65	; 0x41
 80013de:	fa00 f203 	lsl.w	r2, r0, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <HAL_ADC_ConfigChannel+0x234>)
 80013ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a21      	ldr	r2, [pc, #132]	; (8001478 <HAL_ADC_ConfigChannel+0x238>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d109      	bne.n	800140c <HAL_ADC_ConfigChannel+0x1cc>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b12      	cmp	r3, #18
 80013fe:	d105      	bne.n	800140c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a19      	ldr	r2, [pc, #100]	; (8001478 <HAL_ADC_ConfigChannel+0x238>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d123      	bne.n	800145e <HAL_ADC_ConfigChannel+0x21e>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b10      	cmp	r3, #16
 800141c:	d003      	beq.n	8001426 <HAL_ADC_ConfigChannel+0x1e6>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b11      	cmp	r3, #17
 8001424:	d11b      	bne.n	800145e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b10      	cmp	r3, #16
 8001438:	d111      	bne.n	800145e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <HAL_ADC_ConfigChannel+0x23c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a10      	ldr	r2, [pc, #64]	; (8001480 <HAL_ADC_ConfigChannel+0x240>)
 8001440:	fba2 2303 	umull	r2, r3, r2, r3
 8001444:	0c9a      	lsrs	r2, r3, #18
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001450:	e002      	b.n	8001458 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	3b01      	subs	r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f9      	bne.n	8001452 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40012300 	.word	0x40012300
 8001478:	40012000 	.word	0x40012000
 800147c:	20000000 	.word	0x20000000
 8001480:	431bde83 	.word	0x431bde83

08001484 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800148c:	4b79      	ldr	r3, [pc, #484]	; (8001674 <ADC_Init+0x1f0>)
 800148e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	431a      	orrs	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6859      	ldr	r1, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	021a      	lsls	r2, r3, #8
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6859      	ldr	r1, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6899      	ldr	r1, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001516:	4a58      	ldr	r2, [pc, #352]	; (8001678 <ADC_Init+0x1f4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d022      	beq.n	8001562 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800152a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6899      	ldr	r1, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800154c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6899      	ldr	r1, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	e00f      	b.n	8001582 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001570:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001580:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 0202 	bic.w	r2, r2, #2
 8001590:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6899      	ldr	r1, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7e1b      	ldrb	r3, [r3, #24]
 800159c:	005a      	lsls	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d01b      	beq.n	80015e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6859      	ldr	r1, [r3, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	3b01      	subs	r3, #1
 80015dc:	035a      	lsls	r2, r3, #13
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	e007      	b.n	80015f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001606:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	3b01      	subs	r3, #1
 8001614:	051a      	lsls	r2, r3, #20
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800162c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6899      	ldr	r1, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800163a:	025a      	lsls	r2, r3, #9
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001652:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6899      	ldr	r1, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	029a      	lsls	r2, r3, #10
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	609a      	str	r2, [r3, #8]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	40012300 	.word	0x40012300
 8001678:	0f000001 	.word	0x0f000001

0800167c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	db0b      	blt.n	800170a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 021f 	and.w	r2, r3, #31
 80016f8:	4907      	ldr	r1, [pc, #28]	; (8001718 <__NVIC_EnableIRQ+0x38>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	2001      	movs	r0, #1
 8001702:	fa00 f202 	lsl.w	r2, r0, r2
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000e100 	.word	0xe000e100

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	; (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	; (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e8:	d301      	bcc.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00f      	b.n	800180e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <SysTick_Config+0x40>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	210f      	movs	r1, #15
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017fc:	f7ff ff8e 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <SysTick_Config+0x40>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001806:	4b04      	ldr	r3, [pc, #16]	; (8001818 <SysTick_Config+0x40>)
 8001808:	2207      	movs	r2, #7
 800180a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	e000e010 	.word	0xe000e010

0800181c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff29 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	4603      	mov	r3, r0
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
 800183e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001844:	f7ff ff3e 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 8001848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	6978      	ldr	r0, [r7, #20]
 8001850:	f7ff ff8e 	bl	8001770 <NVIC_EncodePriority>
 8001854:	4602      	mov	r2, r0
 8001856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff5d 	bl	800171c <__NVIC_SetPriority>
}
 8001862:	bf00      	nop
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff31 	bl	80016e0 <__NVIC_EnableIRQ>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffa2 	bl	80017d8 <SysTick_Config>
 8001894:	4603      	mov	r3, r0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff fb76 	bl	8000f9c <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e099      	b.n	80019f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2202      	movs	r2, #2
 80018c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018dc:	e00f      	b.n	80018fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018de:	f7ff fb5d 	bl	8000f9c <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d908      	bls.n	80018fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2220      	movs	r2, #32
 80018f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2203      	movs	r2, #3
 80018f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e078      	b.n	80019f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1e8      	bne.n	80018de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	4b38      	ldr	r3, [pc, #224]	; (80019f8 <HAL_DMA_Init+0x158>)
 8001918:	4013      	ands	r3, r2
 800191a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800192a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001936:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001942:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4313      	orrs	r3, r2
 800194e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	2b04      	cmp	r3, #4
 8001956:	d107      	bne.n	8001968 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	4313      	orrs	r3, r2
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4313      	orrs	r3, r2
 8001966:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f023 0307 	bic.w	r3, r3, #7
 800197e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	4313      	orrs	r3, r2
 8001988:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	2b04      	cmp	r3, #4
 8001990:	d117      	bne.n	80019c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4313      	orrs	r3, r2
 800199a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00e      	beq.n	80019c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 fa53 	bl	8001e50 <DMA_CheckFifoParam>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2240      	movs	r2, #64	; 0x40
 80019b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019be:	2301      	movs	r3, #1
 80019c0:	e016      	b.n	80019f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fa0a 	bl	8001de4 <DMA_CalcBaseAndBitshift>
 80019d0:	4603      	mov	r3, r0
 80019d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d8:	223f      	movs	r2, #63	; 0x3f
 80019da:	409a      	lsls	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	f010803f 	.word	0xf010803f

080019fc <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_DMA_Start+0x20>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e026      	b.n	8001a6a <HAL_DMA_Start+0x6e>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d115      	bne.n	8001a5c <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f000 f99f 	bl	8001d88 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f042 0201 	orr.w	r2, r2, #1
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	e005      	b.n	8001a68 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a64:	2302      	movs	r3, #2
 8001a66:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a80:	4b92      	ldr	r3, [pc, #584]	; (8001ccc <HAL_DMA_IRQHandler+0x258>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a92      	ldr	r2, [pc, #584]	; (8001cd0 <HAL_DMA_IRQHandler+0x25c>)
 8001a86:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8a:	0a9b      	lsrs	r3, r3, #10
 8001a8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d01a      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d013      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0204 	bic.w	r2, r2, #4
 8001ac6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001acc:	2208      	movs	r2, #8
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad8:	f043 0201 	orr.w	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d012      	beq.n	8001b16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00b      	beq.n	8001b16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b02:	2201      	movs	r2, #1
 8001b04:	409a      	lsls	r2, r3
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0e:	f043 0202 	orr.w	r2, r3, #2
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d012      	beq.n	8001b4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00b      	beq.n	8001b4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b38:	2204      	movs	r2, #4
 8001b3a:	409a      	lsls	r2, r3
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b44:	f043 0204 	orr.w	r2, r3, #4
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	2210      	movs	r2, #16
 8001b52:	409a      	lsls	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d043      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d03c      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6e:	2210      	movs	r2, #16
 8001b70:	409a      	lsls	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d018      	beq.n	8001bb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d108      	bne.n	8001ba4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d024      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	4798      	blx	r3
 8001ba2:	e01f      	b.n	8001be4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d01b      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	4798      	blx	r3
 8001bb4:	e016      	b.n	8001be4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d107      	bne.n	8001bd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0208 	bic.w	r2, r2, #8
 8001bd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be8:	2220      	movs	r2, #32
 8001bea:	409a      	lsls	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 808e 	beq.w	8001d12 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0310 	and.w	r3, r3, #16
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 8086 	beq.w	8001d12 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b05      	cmp	r3, #5
 8001c1c:	d136      	bne.n	8001c8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0216 	bic.w	r2, r2, #22
 8001c2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	695a      	ldr	r2, [r3, #20]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d103      	bne.n	8001c4e <HAL_DMA_IRQHandler+0x1da>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0208 	bic.w	r2, r2, #8
 8001c5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c62:	223f      	movs	r2, #63	; 0x3f
 8001c64:	409a      	lsls	r2, r3
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d07d      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	4798      	blx	r3
        }
        return;
 8001c8a:	e078      	b.n	8001d7e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d01c      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d108      	bne.n	8001cba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d030      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	4798      	blx	r3
 8001cb8:	e02b      	b.n	8001d12 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d027      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4798      	blx	r3
 8001cca:	e022      	b.n	8001d12 <HAL_DMA_IRQHandler+0x29e>
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10f      	bne.n	8001d02 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0210 	bic.w	r2, r2, #16
 8001cf0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d032      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d022      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2205      	movs	r2, #5
 8001d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0201 	bic.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	3301      	adds	r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d307      	bcc.n	8001d5a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f2      	bne.n	8001d3e <HAL_DMA_IRQHandler+0x2ca>
 8001d58:	e000      	b.n	8001d5c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d5a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	4798      	blx	r3
 8001d7c:	e000      	b.n	8001d80 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d7e:	bf00      	nop
    }
  }
}
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop

08001d88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
 8001d94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001da4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b40      	cmp	r3, #64	; 0x40
 8001db4:	d108      	bne.n	8001dc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dc6:	e007      	b.n	8001dd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	60da      	str	r2, [r3, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	3b10      	subs	r3, #16
 8001df4:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <DMA_CalcBaseAndBitshift+0x64>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	091b      	lsrs	r3, r3, #4
 8001dfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dfe:	4a13      	ldr	r2, [pc, #76]	; (8001e4c <DMA_CalcBaseAndBitshift+0x68>)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d909      	bls.n	8001e26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e1a:	f023 0303 	bic.w	r3, r3, #3
 8001e1e:	1d1a      	adds	r2, r3, #4
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	659a      	str	r2, [r3, #88]	; 0x58
 8001e24:	e007      	b.n	8001e36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e2e:	f023 0303 	bic.w	r3, r3, #3
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	aaaaaaab 	.word	0xaaaaaaab
 8001e4c:	080079e8 	.word	0x080079e8

08001e50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d11f      	bne.n	8001eaa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d855      	bhi.n	8001f1c <DMA_CheckFifoParam+0xcc>
 8001e70:	a201      	add	r2, pc, #4	; (adr r2, 8001e78 <DMA_CheckFifoParam+0x28>)
 8001e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e76:	bf00      	nop
 8001e78:	08001e89 	.word	0x08001e89
 8001e7c:	08001e9b 	.word	0x08001e9b
 8001e80:	08001e89 	.word	0x08001e89
 8001e84:	08001f1d 	.word	0x08001f1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d045      	beq.n	8001f20 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e98:	e042      	b.n	8001f20 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ea2:	d13f      	bne.n	8001f24 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ea8:	e03c      	b.n	8001f24 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eb2:	d121      	bne.n	8001ef8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d836      	bhi.n	8001f28 <DMA_CheckFifoParam+0xd8>
 8001eba:	a201      	add	r2, pc, #4	; (adr r2, 8001ec0 <DMA_CheckFifoParam+0x70>)
 8001ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec0:	08001ed1 	.word	0x08001ed1
 8001ec4:	08001ed7 	.word	0x08001ed7
 8001ec8:	08001ed1 	.word	0x08001ed1
 8001ecc:	08001ee9 	.word	0x08001ee9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed4:	e02f      	b.n	8001f36 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d024      	beq.n	8001f2c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ee6:	e021      	b.n	8001f2c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ef0:	d11e      	bne.n	8001f30 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ef6:	e01b      	b.n	8001f30 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d902      	bls.n	8001f04 <DMA_CheckFifoParam+0xb4>
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d003      	beq.n	8001f0a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f02:	e018      	b.n	8001f36 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
      break;
 8001f08:	e015      	b.n	8001f36 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00e      	beq.n	8001f34 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
      break;
 8001f1a:	e00b      	b.n	8001f34 <DMA_CheckFifoParam+0xe4>
      break;
 8001f1c:	bf00      	nop
 8001f1e:	e00a      	b.n	8001f36 <DMA_CheckFifoParam+0xe6>
      break;
 8001f20:	bf00      	nop
 8001f22:	e008      	b.n	8001f36 <DMA_CheckFifoParam+0xe6>
      break;
 8001f24:	bf00      	nop
 8001f26:	e006      	b.n	8001f36 <DMA_CheckFifoParam+0xe6>
      break;
 8001f28:	bf00      	nop
 8001f2a:	e004      	b.n	8001f36 <DMA_CheckFifoParam+0xe6>
      break;
 8001f2c:	bf00      	nop
 8001f2e:	e002      	b.n	8001f36 <DMA_CheckFifoParam+0xe6>
      break;   
 8001f30:	bf00      	nop
 8001f32:	e000      	b.n	8001f36 <DMA_CheckFifoParam+0xe6>
      break;
 8001f34:	bf00      	nop
    }
  } 
  
  return status; 
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	e16b      	b.n	8002238 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f60:	2201      	movs	r2, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	f040 815a 	bne.w	8002232 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d00b      	beq.n	8001f9e <HAL_GPIO_Init+0x5a>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d007      	beq.n	8001f9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f92:	2b11      	cmp	r3, #17
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b12      	cmp	r3, #18
 8001f9c:	d130      	bne.n	8002000 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2203      	movs	r2, #3
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 0201 	and.w	r2, r3, #1
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	2203      	movs	r2, #3
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0xfc>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b12      	cmp	r3, #18
 800203e:	d123      	bne.n	8002088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	08da      	lsrs	r2, r3, #3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3208      	adds	r2, #8
 8002048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	220f      	movs	r2, #15
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	08da      	lsrs	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3208      	adds	r2, #8
 8002082:	69b9      	ldr	r1, [r7, #24]
 8002084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0203 	and.w	r2, r3, #3
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80b4 	beq.w	8002232 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b5f      	ldr	r3, [pc, #380]	; (800224c <HAL_GPIO_Init+0x308>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a5e      	ldr	r2, [pc, #376]	; (800224c <HAL_GPIO_Init+0x308>)
 80020d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b5c      	ldr	r3, [pc, #368]	; (800224c <HAL_GPIO_Init+0x308>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020e6:	4a5a      	ldr	r2, [pc, #360]	; (8002250 <HAL_GPIO_Init+0x30c>)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	3302      	adds	r3, #2
 80020ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	220f      	movs	r2, #15
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a51      	ldr	r2, [pc, #324]	; (8002254 <HAL_GPIO_Init+0x310>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d02b      	beq.n	800216a <HAL_GPIO_Init+0x226>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a50      	ldr	r2, [pc, #320]	; (8002258 <HAL_GPIO_Init+0x314>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d025      	beq.n	8002166 <HAL_GPIO_Init+0x222>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4f      	ldr	r2, [pc, #316]	; (800225c <HAL_GPIO_Init+0x318>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d01f      	beq.n	8002162 <HAL_GPIO_Init+0x21e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4e      	ldr	r2, [pc, #312]	; (8002260 <HAL_GPIO_Init+0x31c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d019      	beq.n	800215e <HAL_GPIO_Init+0x21a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4d      	ldr	r2, [pc, #308]	; (8002264 <HAL_GPIO_Init+0x320>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d013      	beq.n	800215a <HAL_GPIO_Init+0x216>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4c      	ldr	r2, [pc, #304]	; (8002268 <HAL_GPIO_Init+0x324>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00d      	beq.n	8002156 <HAL_GPIO_Init+0x212>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4b      	ldr	r2, [pc, #300]	; (800226c <HAL_GPIO_Init+0x328>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d007      	beq.n	8002152 <HAL_GPIO_Init+0x20e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a4a      	ldr	r2, [pc, #296]	; (8002270 <HAL_GPIO_Init+0x32c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d101      	bne.n	800214e <HAL_GPIO_Init+0x20a>
 800214a:	2307      	movs	r3, #7
 800214c:	e00e      	b.n	800216c <HAL_GPIO_Init+0x228>
 800214e:	2308      	movs	r3, #8
 8002150:	e00c      	b.n	800216c <HAL_GPIO_Init+0x228>
 8002152:	2306      	movs	r3, #6
 8002154:	e00a      	b.n	800216c <HAL_GPIO_Init+0x228>
 8002156:	2305      	movs	r3, #5
 8002158:	e008      	b.n	800216c <HAL_GPIO_Init+0x228>
 800215a:	2304      	movs	r3, #4
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x228>
 800215e:	2303      	movs	r3, #3
 8002160:	e004      	b.n	800216c <HAL_GPIO_Init+0x228>
 8002162:	2302      	movs	r3, #2
 8002164:	e002      	b.n	800216c <HAL_GPIO_Init+0x228>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_GPIO_Init+0x228>
 800216a:	2300      	movs	r3, #0
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	f002 0203 	and.w	r2, r2, #3
 8002172:	0092      	lsls	r2, r2, #2
 8002174:	4093      	lsls	r3, r2
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800217c:	4934      	ldr	r1, [pc, #208]	; (8002250 <HAL_GPIO_Init+0x30c>)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800218a:	4b3a      	ldr	r3, [pc, #232]	; (8002274 <HAL_GPIO_Init+0x330>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ae:	4a31      	ldr	r2, [pc, #196]	; (8002274 <HAL_GPIO_Init+0x330>)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021b4:	4b2f      	ldr	r3, [pc, #188]	; (8002274 <HAL_GPIO_Init+0x330>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021d8:	4a26      	ldr	r2, [pc, #152]	; (8002274 <HAL_GPIO_Init+0x330>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021de:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HAL_GPIO_Init+0x330>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002202:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <HAL_GPIO_Init+0x330>)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002208:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <HAL_GPIO_Init+0x330>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800222c:	4a11      	ldr	r2, [pc, #68]	; (8002274 <HAL_GPIO_Init+0x330>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3301      	adds	r3, #1
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	2b0f      	cmp	r3, #15
 800223c:	f67f ae90 	bls.w	8001f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002240:	bf00      	nop
 8002242:	3724      	adds	r7, #36	; 0x24
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40023800 	.word	0x40023800
 8002250:	40013800 	.word	0x40013800
 8002254:	40020000 	.word	0x40020000
 8002258:	40020400 	.word	0x40020400
 800225c:	40020800 	.word	0x40020800
 8002260:	40020c00 	.word	0x40020c00
 8002264:	40021000 	.word	0x40021000
 8002268:	40021400 	.word	0x40021400
 800226c:	40021800 	.word	0x40021800
 8002270:	40021c00 	.word	0x40021c00
 8002274:	40013c00 	.word	0x40013c00

08002278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
 8002294:	e001      	b.n	800229a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022aa:	b08f      	sub	sp, #60	; 0x3c
 80022ac:	af0a      	add	r7, sp, #40	; 0x28
 80022ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e10f      	b.n	80024da <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d106      	bne.n	80022da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f005 f843 	bl	8007360 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2203      	movs	r2, #3
 80022de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f002 f94c 	bl	8004596 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	687e      	ldr	r6, [r7, #4]
 8002306:	466d      	mov	r5, sp
 8002308:	f106 0410 	add.w	r4, r6, #16
 800230c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800230e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002314:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002318:	e885 0003 	stmia.w	r5, {r0, r1}
 800231c:	1d33      	adds	r3, r6, #4
 800231e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002320:	6838      	ldr	r0, [r7, #0]
 8002322:	f002 f823 	bl	800436c <USB_CoreInit>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0d0      	b.n	80024da <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f002 f93a 	bl	80045b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e04a      	b.n	80023e0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	333d      	adds	r3, #61	; 0x3d
 800235a:	2201      	movs	r2, #1
 800235c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	333c      	adds	r3, #60	; 0x3c
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	b298      	uxth	r0, r3
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	3342      	adds	r3, #66	; 0x42
 8002386:	4602      	mov	r2, r0
 8002388:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	333f      	adds	r3, #63	; 0x3f
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	3344      	adds	r3, #68	; 0x44
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	3348      	adds	r3, #72	; 0x48
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	3350      	adds	r3, #80	; 0x50
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	3301      	adds	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d3af      	bcc.n	800234a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	73fb      	strb	r3, [r7, #15]
 80023ee:	e044      	b.n	800247a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	1a9b      	subs	r3, r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	3301      	adds	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	429a      	cmp	r2, r3
 8002482:	d3b5      	bcc.n	80023f0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	687e      	ldr	r6, [r7, #4]
 800248c:	466d      	mov	r5, sp
 800248e:	f106 0410 	add.w	r4, r6, #16
 8002492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800249e:	e885 0003 	stmia.w	r5, {r0, r1}
 80024a2:	1d33      	adds	r3, r6, #4
 80024a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024a6:	6838      	ldr	r0, [r7, #0]
 80024a8:	f002 f8b0 	bl	800460c <USB_DevInit>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2202      	movs	r2, #2
 80024b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00d      	b.n	80024da <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f003 f8ef 	bl	80056b6 <USB_DevDisconnect>

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_PCD_Start+0x1c>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e020      	b.n	8002540 <HAL_PCD_Start+0x5e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250a:	2b01      	cmp	r3, #1
 800250c:	d109      	bne.n	8002522 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002512:	2b01      	cmp	r3, #1
 8002514:	d005      	beq.n	8002522 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f003 f8ad 	bl	8005686 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f002 f81f 	bl	8004574 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b08d      	sub	sp, #52	; 0x34
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f003 f954 	bl	800580c <USB_GetMode>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 839d 	bne.w	8002ca6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f003 f8b8 	bl	80056e6 <USB_ReadInterrupts>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 8393 	beq.w	8002ca4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f003 f8af 	bl	80056e6 <USB_ReadInterrupts>
 8002588:	4603      	mov	r3, r0
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b02      	cmp	r3, #2
 8002590:	d107      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f002 0202 	and.w	r2, r2, #2
 80025a0:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 f89d 	bl	80056e6 <USB_ReadInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b10      	cmp	r3, #16
 80025b4:	d161      	bne.n	800267a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699a      	ldr	r2, [r3, #24]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0210 	bic.w	r2, r2, #16
 80025c4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	f003 020f 	and.w	r2, r3, #15
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	3304      	adds	r3, #4
 80025e4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	0c5b      	lsrs	r3, r3, #17
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d124      	bne.n	800263c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025f8:	4013      	ands	r3, r2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d035      	beq.n	800266a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002608:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800260c:	b29b      	uxth	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	6a38      	ldr	r0, [r7, #32]
 8002612:	f002 ff15 	bl	8005440 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002622:	441a      	add	r2, r3
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	699a      	ldr	r2, [r3, #24]
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002634:	441a      	add	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	619a      	str	r2, [r3, #24]
 800263a:	e016      	b.n	800266a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	0c5b      	lsrs	r3, r3, #17
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	2b06      	cmp	r3, #6
 8002646:	d110      	bne.n	800266a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800264e:	2208      	movs	r2, #8
 8002650:	4619      	mov	r1, r3
 8002652:	6a38      	ldr	r0, [r7, #32]
 8002654:	f002 fef4 	bl	8005440 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002664:	441a      	add	r2, r3
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	699a      	ldr	r2, [r3, #24]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0210 	orr.w	r2, r2, #16
 8002678:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f003 f831 	bl	80056e6 <USB_ReadInterrupts>
 8002684:	4603      	mov	r3, r0
 8002686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800268a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800268e:	d16e      	bne.n	800276e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f003 f837 	bl	800570c <USB_ReadDevAllOutEpInterrupt>
 800269e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80026a0:	e062      	b.n	8002768 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80026a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d057      	beq.n	800275c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 f85c 	bl	8005774 <USB_ReadDevOutEPInterrupt>
 80026bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00c      	beq.n	80026e2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026d4:	461a      	mov	r2, r3
 80026d6:	2301      	movs	r3, #1
 80026d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 fd99 	bl	8003214 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00c      	beq.n	8002706 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f8:	461a      	mov	r2, r3
 80026fa:	2308      	movs	r3, #8
 80026fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fe93 	bl	800342c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	4413      	add	r3, r2
 8002718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271c:	461a      	mov	r2, r3
 800271e:	2310      	movs	r3, #16
 8002720:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002738:	461a      	mov	r2, r3
 800273a:	2320      	movs	r3, #32
 800273c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d009      	beq.n	800275c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	4413      	add	r3, r2
 8002750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002754:	461a      	mov	r2, r3
 8002756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800275a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	3301      	adds	r3, #1
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	2b00      	cmp	r3, #0
 800276c:	d199      	bne.n	80026a2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f002 ffb7 	bl	80056e6 <USB_ReadInterrupts>
 8002778:	4603      	mov	r3, r0
 800277a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800277e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002782:	f040 80c0 	bne.w	8002906 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f002 ffd8 	bl	8005740 <USB_ReadDevAllInEpInterrupt>
 8002790:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002796:	e0b2      	b.n	80028fe <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 80a7 	beq.w	80028f2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 fffe 	bl	80057b0 <USB_ReadDevInEPInterrupt>
 80027b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d057      	beq.n	8002870 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	2201      	movs	r2, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	43db      	mvns	r3, r3
 80027da:	69f9      	ldr	r1, [r7, #28]
 80027dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027e0:	4013      	ands	r3, r2
 80027e2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027f0:	461a      	mov	r2, r3
 80027f2:	2301      	movs	r3, #1
 80027f4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d132      	bne.n	8002864 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3348      	adds	r3, #72	; 0x48
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4403      	add	r3, r0
 800281e:	3344      	adds	r3, #68	; 0x44
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4419      	add	r1, r3
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4403      	add	r3, r0
 8002832:	3348      	adds	r3, #72	; 0x48
 8002834:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	2b00      	cmp	r3, #0
 800283a:	d113      	bne.n	8002864 <HAL_PCD_IRQHandler+0x31c>
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	3350      	adds	r3, #80	; 0x50
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d108      	bne.n	8002864 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800285c:	461a      	mov	r2, r3
 800285e:	2101      	movs	r1, #1
 8002860:	f003 f806 	bl	8005870 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	b2db      	uxtb	r3, r3
 8002868:	4619      	mov	r1, r3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f004 fdf9 	bl	8007462 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	4413      	add	r3, r2
 8002882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002886:	461a      	mov	r2, r3
 8002888:	2308      	movs	r3, #8
 800288a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	4413      	add	r3, r2
 800289e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a2:	461a      	mov	r2, r3
 80028a4:	2310      	movs	r3, #16
 80028a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028be:	461a      	mov	r2, r3
 80028c0:	2340      	movs	r3, #64	; 0x40
 80028c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d008      	beq.n	80028e0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028da:	461a      	mov	r2, r3
 80028dc:	2302      	movs	r3, #2
 80028de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fc03 	bl	80030f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	3301      	adds	r3, #1
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002900:	2b00      	cmp	r3, #0
 8002902:	f47f af49 	bne.w	8002798 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f002 feeb 	bl	80056e6 <USB_ReadInterrupts>
 8002910:	4603      	mov	r3, r0
 8002912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800291a:	d122      	bne.n	8002962 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002936:	2b01      	cmp	r3, #1
 8002938:	d108      	bne.n	800294c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002942:	2100      	movs	r1, #0
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fe0f 	bl	8003568 <HAL_PCDEx_LPM_Callback>
 800294a:	e002      	b.n	8002952 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f004 fdff 	bl	8007550 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f002 febd 	bl	80056e6 <USB_ReadInterrupts>
 800296c:	4603      	mov	r3, r0
 800296e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002976:	d112      	bne.n	800299e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b01      	cmp	r3, #1
 8002986:	d102      	bne.n	800298e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f004 fdbb 	bl	8007504 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800299c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f002 fe9f 	bl	80056e6 <USB_ReadInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b2:	f040 80c7 	bne.w	8002b44 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2110      	movs	r1, #16
 80029d0:	4618      	mov	r0, r3
 80029d2:	f001 ff7f 	bl	80048d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029da:	e056      	b.n	8002a8a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e8:	461a      	mov	r2, r3
 80029ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029ee:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a00:	0151      	lsls	r1, r2, #5
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	440a      	add	r2, r1
 8002a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a0e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a20:	0151      	lsls	r1, r2, #5
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	440a      	add	r2, r1
 8002a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a42:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a54:	0151      	lsls	r1, r2, #5
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	440a      	add	r2, r1
 8002a5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a62:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a74:	0151      	lsls	r1, r2, #5
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	440a      	add	r2, r1
 8002a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a82:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a86:	3301      	adds	r3, #1
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d3a3      	bcc.n	80029dc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002aa6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d016      	beq.n	8002ade <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ac0:	f043 030b 	orr.w	r3, r3, #11
 8002ac4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad6:	f043 030b 	orr.w	r3, r3, #11
 8002ada:	6453      	str	r3, [r2, #68]	; 0x44
 8002adc:	e015      	b.n	8002b0a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	69fa      	ldr	r2, [r7, #28]
 8002ae8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002af0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002af4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b04:	f043 030b 	orr.w	r3, r3, #11
 8002b08:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b18:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b1c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b2e:	461a      	mov	r2, r3
 8002b30:	f002 fe9e 	bl	8005870 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f002 fdcc 	bl	80056e6 <USB_ReadInterrupts>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b58:	d124      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f002 fe62 	bl	8005828 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f001 ff14 	bl	8004996 <USB_GetDevSpeed>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681c      	ldr	r4, [r3, #0]
 8002b7a:	f001 f92f 	bl	8003ddc <HAL_RCC_GetHCLKFreq>
 8002b7e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f001 fc51 	bl	8004430 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f004 fc8f 	bl	80074b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ba2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f002 fd9c 	bl	80056e6 <USB_ReadInterrupts>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d10a      	bne.n	8002bce <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f004 fc6c 	bl	8007496 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f002 0208 	and.w	r2, r2, #8
 8002bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f002 fd87 	bl	80056e6 <USB_ReadInterrupts>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002be2:	d10f      	bne.n	8002c04 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	4619      	mov	r1, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f004 fcce 	bl	8007590 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f002 fd6c 	bl	80056e6 <USB_ReadInterrupts>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c18:	d10f      	bne.n	8002c3a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	4619      	mov	r1, r3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f004 fca1 	bl	800756c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f002 fd51 	bl	80056e6 <USB_ReadInterrupts>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4e:	d10a      	bne.n	8002c66 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f004 fcaf 	bl	80075b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695a      	ldr	r2, [r3, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f002 fd3b 	bl	80056e6 <USB_ReadInterrupts>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d115      	bne.n	8002ca6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f004 fc9f 	bl	80075d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6859      	ldr	r1, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	e000      	b.n	8002ca6 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002ca4:	bf00      	nop
    }
  }
}
 8002ca6:	3734      	adds	r7, #52	; 0x34
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd90      	pop	{r4, r7, pc}

08002cac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_PCD_SetAddress+0x1a>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e013      	b.n	8002cee <HAL_PCD_SetAddress+0x42>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f002 fcab 	bl	800563a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	4608      	mov	r0, r1
 8002d00:	4611      	mov	r1, r2
 8002d02:	461a      	mov	r2, r3
 8002d04:	4603      	mov	r3, r0
 8002d06:	70fb      	strb	r3, [r7, #3]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	803b      	strh	r3, [r7, #0]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	da0f      	bge.n	8002d3c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	f003 020f 	and.w	r2, r3, #15
 8002d22:	4613      	mov	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	3338      	adds	r3, #56	; 0x38
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	4413      	add	r3, r2
 8002d30:	3304      	adds	r3, #4
 8002d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	705a      	strb	r2, [r3, #1]
 8002d3a:	e00f      	b.n	8002d5c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	f003 020f 	and.w	r2, r3, #15
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	3304      	adds	r3, #4
 8002d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d68:	883a      	ldrh	r2, [r7, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	78ba      	ldrb	r2, [r7, #2]
 8002d72:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	785b      	ldrb	r3, [r3, #1]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d004      	beq.n	8002d86 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d86:	78bb      	ldrb	r3, [r7, #2]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d102      	bne.n	8002d92 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_PCD_EP_Open+0xaa>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e00e      	b.n	8002dbe <HAL_PCD_EP_Open+0xc8>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68f9      	ldr	r1, [r7, #12]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f001 fe16 	bl	80049e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002dbc:	7afb      	ldrb	r3, [r7, #11]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	da0f      	bge.n	8002dfa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dda:	78fb      	ldrb	r3, [r7, #3]
 8002ddc:	f003 020f 	and.w	r2, r3, #15
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	3338      	adds	r3, #56	; 0x38
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	3304      	adds	r3, #4
 8002df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	705a      	strb	r2, [r3, #1]
 8002df8:	e00f      	b.n	8002e1a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	f003 020f 	and.w	r2, r3, #15
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	4413      	add	r3, r2
 8002e10:	3304      	adds	r3, #4
 8002e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_PCD_EP_Close+0x6e>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e00e      	b.n	8002e52 <HAL_PCD_EP_Close+0x8c>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68f9      	ldr	r1, [r7, #12]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f001 fe54 	bl	8004af0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	460b      	mov	r3, r1
 8002e68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e6a:	7afb      	ldrb	r3, [r7, #11]
 8002e6c:	f003 020f 	and.w	r2, r3, #15
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	3304      	adds	r3, #4
 8002e82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2200      	movs	r2, #0
 8002e94:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9c:	7afb      	ldrb	r3, [r7, #11]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d102      	bne.n	8002eb6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eb6:	7afb      	ldrb	r3, [r7, #11]
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	6979      	ldr	r1, [r7, #20]
 8002ece:	f002 f92f 	bl	8005130 <USB_EP0StartXfer>
 8002ed2:	e008      	b.n	8002ee6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	6979      	ldr	r1, [r7, #20]
 8002ee2:	f001 fee1 	bl	8004ca8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	460b      	mov	r3, r1
 8002efe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f00:	7afb      	ldrb	r3, [r7, #11]
 8002f02:	f003 020f 	and.w	r2, r3, #15
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	3338      	adds	r3, #56	; 0x38
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4413      	add	r3, r2
 8002f14:	3304      	adds	r3, #4
 8002f16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2200      	movs	r2, #0
 8002f28:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f30:	7afb      	ldrb	r3, [r7, #11]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d102      	bne.n	8002f4a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f4a:	7afb      	ldrb	r3, [r7, #11]
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d109      	bne.n	8002f68 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6979      	ldr	r1, [r7, #20]
 8002f62:	f002 f8e5 	bl	8005130 <USB_EP0StartXfer>
 8002f66:	e008      	b.n	8002f7a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	6979      	ldr	r1, [r7, #20]
 8002f76:	f001 fe97 	bl	8004ca8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 020f 	and.w	r2, r3, #15
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d901      	bls.n	8002fa2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e050      	b.n	8003044 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	da0f      	bge.n	8002fca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	f003 020f 	and.w	r2, r3, #15
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	3338      	adds	r3, #56	; 0x38
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	705a      	strb	r2, [r3, #1]
 8002fc8:	e00d      	b.n	8002fe6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	3304      	adds	r3, #4
 8002fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_PCD_EP_SetStall+0x82>
 8003002:	2302      	movs	r3, #2
 8003004:	e01e      	b.n	8003044 <HAL_PCD_EP_SetStall+0xc0>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68f9      	ldr	r1, [r7, #12]
 8003014:	4618      	mov	r0, r3
 8003016:	f002 fa3c 	bl	8005492 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	b2d9      	uxtb	r1, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003034:	461a      	mov	r2, r3
 8003036:	f002 fc1b 	bl	8005870 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	f003 020f 	and.w	r2, r3, #15
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	429a      	cmp	r2, r3
 8003064:	d901      	bls.n	800306a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e042      	b.n	80030f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800306a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800306e:	2b00      	cmp	r3, #0
 8003070:	da0f      	bge.n	8003092 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	f003 020f 	and.w	r2, r3, #15
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	3338      	adds	r3, #56	; 0x38
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	3304      	adds	r3, #4
 8003088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	705a      	strb	r2, [r3, #1]
 8003090:	e00f      	b.n	80030b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	4413      	add	r3, r2
 80030a8:	3304      	adds	r3, #4
 80030aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_PCD_EP_ClrStall+0x86>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e00e      	b.n	80030f0 <HAL_PCD_EP_ClrStall+0xa4>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68f9      	ldr	r1, [r7, #12]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f002 fa44 	bl	800556e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08a      	sub	sp, #40	; 0x28
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	3338      	adds	r3, #56	; 0x38
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	3304      	adds	r3, #4
 800311e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	699a      	ldr	r2, [r3, #24]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	429a      	cmp	r2, r3
 800312a:	d901      	bls.n	8003130 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e06c      	b.n	800320a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	429a      	cmp	r2, r3
 8003144:	d902      	bls.n	800314c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	3303      	adds	r3, #3
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003154:	e02b      	b.n	80031ae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	429a      	cmp	r2, r3
 800316a:	d902      	bls.n	8003172 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3303      	adds	r3, #3
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	68d9      	ldr	r1, [r3, #12]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	b2da      	uxtb	r2, r3
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800318a:	b2db      	uxtb	r3, r3
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	4603      	mov	r3, r0
 8003190:	6978      	ldr	r0, [r7, #20]
 8003192:	f002 f920 	bl	80053d6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	441a      	add	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	699a      	ldr	r2, [r3, #24]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	441a      	add	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d809      	bhi.n	80031d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	699a      	ldr	r2, [r3, #24]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d203      	bcs.n	80031d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1be      	bne.n	8003156 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	695a      	ldr	r2, [r3, #20]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d811      	bhi.n	8003208 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	2201      	movs	r2, #1
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	6939      	ldr	r1, [r7, #16]
 8003200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003204:	4013      	ands	r3, r2
 8003206:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3720      	adds	r7, #32
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	333c      	adds	r3, #60	; 0x3c
 800322c:	3304      	adds	r3, #4
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b01      	cmp	r3, #1
 8003248:	f040 80a0 	bne.w	800338c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d015      	beq.n	8003282 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4a72      	ldr	r2, [pc, #456]	; (8003424 <PCD_EP_OutXfrComplete_int+0x210>)
 800325a:	4293      	cmp	r3, r2
 800325c:	f240 80dd 	bls.w	800341a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80d7 	beq.w	800341a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003278:	461a      	mov	r2, r3
 800327a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800327e:	6093      	str	r3, [r2, #8]
 8003280:	e0cb      	b.n	800341a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4413      	add	r3, r2
 8003294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003298:	461a      	mov	r2, r3
 800329a:	2320      	movs	r3, #32
 800329c:	6093      	str	r3, [r2, #8]
 800329e:	e0bc      	b.n	800341a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 80b7 	bne.w	800341a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a5d      	ldr	r2, [pc, #372]	; (8003424 <PCD_EP_OutXfrComplete_int+0x210>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d90f      	bls.n	80032d4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ca:	461a      	mov	r2, r3
 80032cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032d0:	6093      	str	r3, [r2, #8]
 80032d2:	e0a2      	b.n	800341a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032e6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	0159      	lsls	r1, r3, #5
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	440b      	add	r3, r1
 80032f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80032fa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4403      	add	r3, r0
 800330a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800330e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003322:	6819      	ldr	r1, [r3, #0]
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4403      	add	r3, r0
 8003332:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4419      	add	r1, r3
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	4613      	mov	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4403      	add	r3, r0
 8003348:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800334c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d114      	bne.n	800337e <PCD_EP_OutXfrComplete_int+0x16a>
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d108      	bne.n	800337e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003376:	461a      	mov	r2, r3
 8003378:	2101      	movs	r1, #1
 800337a:	f002 fa79 	bl	8005870 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	4619      	mov	r1, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f004 f851 	bl	800742c <HAL_PCD_DataOutStageCallback>
 800338a:	e046      	b.n	800341a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a26      	ldr	r2, [pc, #152]	; (8003428 <PCD_EP_OutXfrComplete_int+0x214>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d124      	bne.n	80033de <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033aa:	461a      	mov	r2, r3
 80033ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033b0:	6093      	str	r3, [r2, #8]
 80033b2:	e032      	b.n	800341a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ca:	461a      	mov	r2, r3
 80033cc:	2320      	movs	r3, #32
 80033ce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	4619      	mov	r1, r3
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f004 f828 	bl	800742c <HAL_PCD_DataOutStageCallback>
 80033dc:	e01d      	b.n	800341a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d114      	bne.n	800340e <PCD_EP_OutXfrComplete_int+0x1fa>
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d108      	bne.n	800340e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003406:	461a      	mov	r2, r3
 8003408:	2100      	movs	r1, #0
 800340a:	f002 fa31 	bl	8005870 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f004 f809 	bl	800742c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	4f54300a 	.word	0x4f54300a
 8003428:	4f54310a 	.word	0x4f54310a

0800342c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	333c      	adds	r3, #60	; 0x3c
 8003444:	3304      	adds	r3, #4
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d90e      	bls.n	8003480 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003468:	2b00      	cmp	r3, #0
 800346a:	d009      	beq.n	8003480 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003478:	461a      	mov	r2, r3
 800347a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f003 ffc1 	bl	8007408 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d90c      	bls.n	80034a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d108      	bne.n	80034a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80034a0:	461a      	mov	r2, r3
 80034a2:	2101      	movs	r1, #1
 80034a4:	f002 f9e4 	bl	8005870 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	4f54300a 	.word	0x4f54300a

080034b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	70fb      	strb	r3, [r7, #3]
 80034c4:	4613      	mov	r3, r2
 80034c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034d0:	78fb      	ldrb	r3, [r7, #3]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d107      	bne.n	80034e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034d6:	883b      	ldrh	r3, [r7, #0]
 80034d8:	0419      	lsls	r1, r3, #16
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	629a      	str	r2, [r3, #40]	; 0x28
 80034e4:	e028      	b.n	8003538 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	4413      	add	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034f4:	2300      	movs	r3, #0
 80034f6:	73fb      	strb	r3, [r7, #15]
 80034f8:	e00d      	b.n	8003516 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	3340      	adds	r3, #64	; 0x40
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	4413      	add	r3, r2
 800350e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	3301      	adds	r3, #1
 8003514:	73fb      	strb	r3, [r7, #15]
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	3b01      	subs	r3, #1
 800351c:	429a      	cmp	r2, r3
 800351e:	d3ec      	bcc.n	80034fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003520:	883b      	ldrh	r3, [r7, #0]
 8003522:	0418      	lsls	r0, r3, #16
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6819      	ldr	r1, [r3, #0]
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	3b01      	subs	r3, #1
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	4302      	orrs	r2, r0
 8003530:	3340      	adds	r3, #64	; 0x40
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	460b      	mov	r3, r1
 8003550:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	887a      	ldrh	r2, [r7, #2]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e25b      	b.n	8003a4a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d075      	beq.n	800368a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800359e:	4ba3      	ldr	r3, [pc, #652]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d00c      	beq.n	80035c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035aa:	4ba0      	ldr	r3, [pc, #640]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d112      	bne.n	80035dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b6:	4b9d      	ldr	r3, [pc, #628]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c2:	d10b      	bne.n	80035dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c4:	4b99      	ldr	r3, [pc, #612]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d05b      	beq.n	8003688 <HAL_RCC_OscConfig+0x108>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d157      	bne.n	8003688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e236      	b.n	8003a4a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e4:	d106      	bne.n	80035f4 <HAL_RCC_OscConfig+0x74>
 80035e6:	4b91      	ldr	r3, [pc, #580]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a90      	ldr	r2, [pc, #576]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	e01d      	b.n	8003630 <HAL_RCC_OscConfig+0xb0>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x98>
 80035fe:	4b8b      	ldr	r3, [pc, #556]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a8a      	ldr	r2, [pc, #552]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 8003604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b88      	ldr	r3, [pc, #544]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a87      	ldr	r2, [pc, #540]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0xb0>
 8003618:	4b84      	ldr	r3, [pc, #528]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a83      	ldr	r2, [pc, #524]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 800361e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	4b81      	ldr	r3, [pc, #516]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a80      	ldr	r2, [pc, #512]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 800362a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7fd fcb0 	bl	8000f9c <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003640:	f7fd fcac 	bl	8000f9c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	; 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e1fb      	b.n	8003a4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b76      	ldr	r3, [pc, #472]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0xc0>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7fd fc9c 	bl	8000f9c <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003668:	f7fd fc98 	bl	8000f9c <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	; 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e1e7      	b.n	8003a4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800367a:	4b6c      	ldr	r3, [pc, #432]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0xe8>
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d063      	beq.n	800375e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003696:	4b65      	ldr	r3, [pc, #404]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00b      	beq.n	80036ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a2:	4b62      	ldr	r3, [pc, #392]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036aa:	2b08      	cmp	r3, #8
 80036ac:	d11c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ae:	4b5f      	ldr	r3, [pc, #380]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d116      	bne.n	80036e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ba:	4b5c      	ldr	r3, [pc, #368]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_RCC_OscConfig+0x152>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d001      	beq.n	80036d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e1bb      	b.n	8003a4a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d2:	4b56      	ldr	r3, [pc, #344]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4952      	ldr	r1, [pc, #328]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036e6:	e03a      	b.n	800375e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d020      	beq.n	8003732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f0:	4b4f      	ldr	r3, [pc, #316]	; (8003830 <HAL_RCC_OscConfig+0x2b0>)
 80036f2:	2201      	movs	r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7fd fc51 	bl	8000f9c <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036fe:	f7fd fc4d 	bl	8000f9c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e19c      	b.n	8003a4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003710:	4b46      	ldr	r3, [pc, #280]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371c:	4b43      	ldr	r3, [pc, #268]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4940      	ldr	r1, [pc, #256]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 800372c:	4313      	orrs	r3, r2
 800372e:	600b      	str	r3, [r1, #0]
 8003730:	e015      	b.n	800375e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003732:	4b3f      	ldr	r3, [pc, #252]	; (8003830 <HAL_RCC_OscConfig+0x2b0>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7fd fc30 	bl	8000f9c <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003740:	f7fd fc2c 	bl	8000f9c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e17b      	b.n	8003a4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003752:	4b36      	ldr	r3, [pc, #216]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d030      	beq.n	80037cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003772:	4b30      	ldr	r3, [pc, #192]	; (8003834 <HAL_RCC_OscConfig+0x2b4>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003778:	f7fd fc10 	bl	8000f9c <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003780:	f7fd fc0c 	bl	8000f9c <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e15b      	b.n	8003a4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003792:	4b26      	ldr	r3, [pc, #152]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 8003794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x200>
 800379e:	e015      	b.n	80037cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a0:	4b24      	ldr	r3, [pc, #144]	; (8003834 <HAL_RCC_OscConfig+0x2b4>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a6:	f7fd fbf9 	bl	8000f9c <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ae:	f7fd fbf5 	bl	8000f9c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e144      	b.n	8003a4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c0:	4b1a      	ldr	r3, [pc, #104]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 80037c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f0      	bne.n	80037ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80a0 	beq.w	800391a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037de:	4b13      	ldr	r3, [pc, #76]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10f      	bne.n	800380a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	4b0f      	ldr	r3, [pc, #60]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	4a0e      	ldr	r2, [pc, #56]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 80037f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f8:	6413      	str	r3, [r2, #64]	; 0x40
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003806:	2301      	movs	r3, #1
 8003808:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380a:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_RCC_OscConfig+0x2b8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d121      	bne.n	800385a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003816:	4b08      	ldr	r3, [pc, #32]	; (8003838 <HAL_RCC_OscConfig+0x2b8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a07      	ldr	r2, [pc, #28]	; (8003838 <HAL_RCC_OscConfig+0x2b8>)
 800381c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003822:	f7fd fbbb 	bl	8000f9c <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003828:	e011      	b.n	800384e <HAL_RCC_OscConfig+0x2ce>
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
 8003830:	42470000 	.word	0x42470000
 8003834:	42470e80 	.word	0x42470e80
 8003838:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383c:	f7fd fbae 	bl	8000f9c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e0fd      	b.n	8003a4a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384e:	4b81      	ldr	r3, [pc, #516]	; (8003a54 <HAL_RCC_OscConfig+0x4d4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d106      	bne.n	8003870 <HAL_RCC_OscConfig+0x2f0>
 8003862:	4b7d      	ldr	r3, [pc, #500]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	4a7c      	ldr	r2, [pc, #496]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6713      	str	r3, [r2, #112]	; 0x70
 800386e:	e01c      	b.n	80038aa <HAL_RCC_OscConfig+0x32a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b05      	cmp	r3, #5
 8003876:	d10c      	bne.n	8003892 <HAL_RCC_OscConfig+0x312>
 8003878:	4b77      	ldr	r3, [pc, #476]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	4a76      	ldr	r2, [pc, #472]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 800387e:	f043 0304 	orr.w	r3, r3, #4
 8003882:	6713      	str	r3, [r2, #112]	; 0x70
 8003884:	4b74      	ldr	r3, [pc, #464]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	4a73      	ldr	r2, [pc, #460]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	6713      	str	r3, [r2, #112]	; 0x70
 8003890:	e00b      	b.n	80038aa <HAL_RCC_OscConfig+0x32a>
 8003892:	4b71      	ldr	r3, [pc, #452]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	4a70      	ldr	r2, [pc, #448]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	6713      	str	r3, [r2, #112]	; 0x70
 800389e:	4b6e      	ldr	r3, [pc, #440]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	4a6d      	ldr	r2, [pc, #436]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 80038a4:	f023 0304 	bic.w	r3, r3, #4
 80038a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d015      	beq.n	80038de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b2:	f7fd fb73 	bl	8000f9c <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b8:	e00a      	b.n	80038d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ba:	f7fd fb6f 	bl	8000f9c <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e0bc      	b.n	8003a4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d0:	4b61      	ldr	r3, [pc, #388]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0ee      	beq.n	80038ba <HAL_RCC_OscConfig+0x33a>
 80038dc:	e014      	b.n	8003908 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038de:	f7fd fb5d 	bl	8000f9c <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e4:	e00a      	b.n	80038fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e6:	f7fd fb59 	bl	8000f9c <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e0a6      	b.n	8003a4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fc:	4b56      	ldr	r3, [pc, #344]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 80038fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1ee      	bne.n	80038e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003908:	7dfb      	ldrb	r3, [r7, #23]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d105      	bne.n	800391a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800390e:	4b52      	ldr	r3, [pc, #328]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	4a51      	ldr	r2, [pc, #324]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 8003914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003918:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 8092 	beq.w	8003a48 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003924:	4b4c      	ldr	r3, [pc, #304]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 030c 	and.w	r3, r3, #12
 800392c:	2b08      	cmp	r3, #8
 800392e:	d05c      	beq.n	80039ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d141      	bne.n	80039bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003938:	4b48      	ldr	r3, [pc, #288]	; (8003a5c <HAL_RCC_OscConfig+0x4dc>)
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393e:	f7fd fb2d 	bl	8000f9c <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003946:	f7fd fb29 	bl	8000f9c <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e078      	b.n	8003a4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003958:	4b3f      	ldr	r3, [pc, #252]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f0      	bne.n	8003946 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69da      	ldr	r2, [r3, #28]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	019b      	lsls	r3, r3, #6
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397a:	085b      	lsrs	r3, r3, #1
 800397c:	3b01      	subs	r3, #1
 800397e:	041b      	lsls	r3, r3, #16
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	061b      	lsls	r3, r3, #24
 8003988:	4933      	ldr	r1, [pc, #204]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 800398a:	4313      	orrs	r3, r2
 800398c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800398e:	4b33      	ldr	r3, [pc, #204]	; (8003a5c <HAL_RCC_OscConfig+0x4dc>)
 8003990:	2201      	movs	r2, #1
 8003992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7fd fb02 	bl	8000f9c <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399c:	f7fd fafe 	bl	8000f9c <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e04d      	b.n	8003a4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ae:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0x41c>
 80039ba:	e045      	b.n	8003a48 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039bc:	4b27      	ldr	r3, [pc, #156]	; (8003a5c <HAL_RCC_OscConfig+0x4dc>)
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c2:	f7fd faeb 	bl	8000f9c <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ca:	f7fd fae7 	bl	8000f9c <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e036      	b.n	8003a4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039dc:	4b1e      	ldr	r3, [pc, #120]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f0      	bne.n	80039ca <HAL_RCC_OscConfig+0x44a>
 80039e8:	e02e      	b.n	8003a48 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e029      	b.n	8003a4a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039f6:	4b18      	ldr	r3, [pc, #96]	; (8003a58 <HAL_RCC_OscConfig+0x4d8>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d11c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d115      	bne.n	8003a44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a1e:	4013      	ands	r3, r2
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d10d      	bne.n	8003a44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d106      	bne.n	8003a44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d001      	beq.n	8003a48 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40007000 	.word	0x40007000
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	42470060 	.word	0x42470060

08003a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0cc      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a74:	4b68      	ldr	r3, [pc, #416]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d90c      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a82:	4b65      	ldr	r3, [pc, #404]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8a:	4b63      	ldr	r3, [pc, #396]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0b8      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d020      	beq.n	8003aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab4:	4b59      	ldr	r3, [pc, #356]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4a58      	ldr	r2, [pc, #352]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003abe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003acc:	4b53      	ldr	r3, [pc, #332]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a52      	ldr	r2, [pc, #328]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad8:	4b50      	ldr	r3, [pc, #320]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	494d      	ldr	r1, [pc, #308]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d044      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d107      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b47      	ldr	r3, [pc, #284]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d119      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e07f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d003      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d107      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1e:	4b3f      	ldr	r3, [pc, #252]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e06f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2e:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e067      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b3e:	4b37      	ldr	r3, [pc, #220]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f023 0203 	bic.w	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4934      	ldr	r1, [pc, #208]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b50:	f7fd fa24 	bl	8000f9c <HAL_GetTick>
 8003b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b58:	f7fd fa20 	bl	8000f9c <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e04f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	4b2b      	ldr	r3, [pc, #172]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 020c 	and.w	r2, r3, #12
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d1eb      	bne.n	8003b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b80:	4b25      	ldr	r3, [pc, #148]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d20c      	bcs.n	8003ba8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e032      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb4:	4b19      	ldr	r3, [pc, #100]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4916      	ldr	r1, [pc, #88]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bd2:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	490e      	ldr	r1, [pc, #56]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003be6:	f000 f821 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8003bea:	4601      	mov	r1, r0
 8003bec:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	091b      	lsrs	r3, r3, #4
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf8:	5cd3      	ldrb	r3, [r2, r3]
 8003bfa:	fa21 f303 	lsr.w	r3, r1, r3
 8003bfe:	4a09      	ldr	r2, [pc, #36]	; (8003c24 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <HAL_RCC_ClockConfig+0x1c8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fd f984 	bl	8000f14 <HAL_InitTick>

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023c00 	.word	0x40023c00
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	080079d8 	.word	0x080079d8
 8003c24:	20000000 	.word	0x20000000
 8003c28:	20000004 	.word	0x20000004

08003c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	607b      	str	r3, [r7, #4]
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c42:	4b63      	ldr	r3, [pc, #396]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d007      	beq.n	8003c5e <HAL_RCC_GetSysClockFreq+0x32>
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d008      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x38>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f040 80b4 	bne.w	8003dc0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c58:	4b5e      	ldr	r3, [pc, #376]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c5a:	60bb      	str	r3, [r7, #8]
       break;
 8003c5c:	e0b3      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c5e:	4b5e      	ldr	r3, [pc, #376]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003c60:	60bb      	str	r3, [r7, #8]
      break;
 8003c62:	e0b0      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c64:	4b5a      	ldr	r3, [pc, #360]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c6e:	4b58      	ldr	r3, [pc, #352]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d04a      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c7a:	4b55      	ldr	r3, [pc, #340]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	099b      	lsrs	r3, r3, #6
 8003c80:	f04f 0400 	mov.w	r4, #0
 8003c84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	ea03 0501 	and.w	r5, r3, r1
 8003c90:	ea04 0602 	and.w	r6, r4, r2
 8003c94:	4629      	mov	r1, r5
 8003c96:	4632      	mov	r2, r6
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	f04f 0400 	mov.w	r4, #0
 8003ca0:	0154      	lsls	r4, r2, #5
 8003ca2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ca6:	014b      	lsls	r3, r1, #5
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4622      	mov	r2, r4
 8003cac:	1b49      	subs	r1, r1, r5
 8003cae:	eb62 0206 	sbc.w	r2, r2, r6
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	f04f 0400 	mov.w	r4, #0
 8003cba:	0194      	lsls	r4, r2, #6
 8003cbc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cc0:	018b      	lsls	r3, r1, #6
 8003cc2:	1a5b      	subs	r3, r3, r1
 8003cc4:	eb64 0402 	sbc.w	r4, r4, r2
 8003cc8:	f04f 0100 	mov.w	r1, #0
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	00e2      	lsls	r2, r4, #3
 8003cd2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003cd6:	00d9      	lsls	r1, r3, #3
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4614      	mov	r4, r2
 8003cdc:	195b      	adds	r3, r3, r5
 8003cde:	eb44 0406 	adc.w	r4, r4, r6
 8003ce2:	f04f 0100 	mov.w	r1, #0
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	0262      	lsls	r2, r4, #9
 8003cec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003cf0:	0259      	lsls	r1, r3, #9
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4614      	mov	r4, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f04f 0400 	mov.w	r4, #0
 8003d00:	461a      	mov	r2, r3
 8003d02:	4623      	mov	r3, r4
 8003d04:	f7fc fa60 	bl	80001c8 <__aeabi_uldivmod>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	e049      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d10:	4b2f      	ldr	r3, [pc, #188]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	099b      	lsrs	r3, r3, #6
 8003d16:	f04f 0400 	mov.w	r4, #0
 8003d1a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	ea03 0501 	and.w	r5, r3, r1
 8003d26:	ea04 0602 	and.w	r6, r4, r2
 8003d2a:	4629      	mov	r1, r5
 8003d2c:	4632      	mov	r2, r6
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	f04f 0400 	mov.w	r4, #0
 8003d36:	0154      	lsls	r4, r2, #5
 8003d38:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d3c:	014b      	lsls	r3, r1, #5
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4622      	mov	r2, r4
 8003d42:	1b49      	subs	r1, r1, r5
 8003d44:	eb62 0206 	sbc.w	r2, r2, r6
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	f04f 0400 	mov.w	r4, #0
 8003d50:	0194      	lsls	r4, r2, #6
 8003d52:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d56:	018b      	lsls	r3, r1, #6
 8003d58:	1a5b      	subs	r3, r3, r1
 8003d5a:	eb64 0402 	sbc.w	r4, r4, r2
 8003d5e:	f04f 0100 	mov.w	r1, #0
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	00e2      	lsls	r2, r4, #3
 8003d68:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d6c:	00d9      	lsls	r1, r3, #3
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4614      	mov	r4, r2
 8003d72:	195b      	adds	r3, r3, r5
 8003d74:	eb44 0406 	adc.w	r4, r4, r6
 8003d78:	f04f 0100 	mov.w	r1, #0
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	02a2      	lsls	r2, r4, #10
 8003d82:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d86:	0299      	lsls	r1, r3, #10
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4614      	mov	r4, r2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	4621      	mov	r1, r4
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f04f 0400 	mov.w	r4, #0
 8003d96:	461a      	mov	r2, r3
 8003d98:	4623      	mov	r3, r4
 8003d9a:	f7fc fa15 	bl	80001c8 <__aeabi_uldivmod>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	460c      	mov	r4, r1
 8003da2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003da4:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	0c1b      	lsrs	r3, r3, #16
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	3301      	adds	r3, #1
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dbc:	60bb      	str	r3, [r7, #8]
      break;
 8003dbe:	e002      	b.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dc0:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003dc2:	60bb      	str	r3, [r7, #8]
      break;
 8003dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	00f42400 	.word	0x00f42400
 8003dd8:	007a1200 	.word	0x007a1200

08003ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de0:	4b03      	ldr	r3, [pc, #12]	; (8003df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003de2:	681b      	ldr	r3, [r3, #0]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20000000 	.word	0x20000000

08003df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e01d      	b.n	8003e42 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fc ff9a 	bl	8000d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4619      	mov	r1, r3
 8003e32:	4610      	mov	r0, r2
 8003e34:	f000 f8e4 	bl	8004000 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b085      	sub	sp, #20
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2202      	movs	r2, #2
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b06      	cmp	r3, #6
 8003e6a:	d007      	beq.n	8003e7c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <HAL_TIM_ConfigClockSource+0x18>
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e0a6      	b.n	8003ff8 <HAL_TIM_ConfigClockSource+0x166>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ec8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ed0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d067      	beq.n	8003fb2 <HAL_TIM_ConfigClockSource+0x120>
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d80b      	bhi.n	8003efe <HAL_TIM_ConfigClockSource+0x6c>
 8003ee6:	2b10      	cmp	r3, #16
 8003ee8:	d073      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x140>
 8003eea:	2b10      	cmp	r3, #16
 8003eec:	d802      	bhi.n	8003ef4 <HAL_TIM_ConfigClockSource+0x62>
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d06f      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003ef2:	e078      	b.n	8003fe6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ef4:	2b20      	cmp	r3, #32
 8003ef6:	d06c      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x140>
 8003ef8:	2b30      	cmp	r3, #48	; 0x30
 8003efa:	d06a      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003efc:	e073      	b.n	8003fe6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003efe:	2b70      	cmp	r3, #112	; 0x70
 8003f00:	d00d      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x8c>
 8003f02:	2b70      	cmp	r3, #112	; 0x70
 8003f04:	d804      	bhi.n	8003f10 <HAL_TIM_ConfigClockSource+0x7e>
 8003f06:	2b50      	cmp	r3, #80	; 0x50
 8003f08:	d033      	beq.n	8003f72 <HAL_TIM_ConfigClockSource+0xe0>
 8003f0a:	2b60      	cmp	r3, #96	; 0x60
 8003f0c:	d041      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003f0e:	e06a      	b.n	8003fe6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f14:	d066      	beq.n	8003fe4 <HAL_TIM_ConfigClockSource+0x152>
 8003f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1a:	d017      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003f1c:	e063      	b.n	8003fe6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6899      	ldr	r1, [r3, #8]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f000 f981 	bl	8004234 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	609a      	str	r2, [r3, #8]
      break;
 8003f4a:	e04c      	b.n	8003fe6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	6899      	ldr	r1, [r3, #8]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f000 f96a 	bl	8004234 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689a      	ldr	r2, [r3, #8]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f6e:	609a      	str	r2, [r3, #8]
      break;
 8003f70:	e039      	b.n	8003fe6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6859      	ldr	r1, [r3, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f000 f8de 	bl	8004140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2150      	movs	r1, #80	; 0x50
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f937 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003f90:	e029      	b.n	8003fe6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f000 f8fd 	bl	800419e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2160      	movs	r1, #96	; 0x60
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 f927 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003fb0:	e019      	b.n	8003fe6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6859      	ldr	r1, [r3, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f000 f8be 	bl	8004140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2140      	movs	r1, #64	; 0x40
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 f917 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003fd0:	e009      	b.n	8003fe6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4610      	mov	r0, r2
 8003fde:	f000 f90e 	bl	80041fe <TIM_ITRx_SetConfig>
      break;
 8003fe2:	e000      	b.n	8003fe6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003fe4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a40      	ldr	r2, [pc, #256]	; (8004114 <TIM_Base_SetConfig+0x114>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d013      	beq.n	8004040 <TIM_Base_SetConfig+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401e:	d00f      	beq.n	8004040 <TIM_Base_SetConfig+0x40>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3d      	ldr	r2, [pc, #244]	; (8004118 <TIM_Base_SetConfig+0x118>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00b      	beq.n	8004040 <TIM_Base_SetConfig+0x40>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a3c      	ldr	r2, [pc, #240]	; (800411c <TIM_Base_SetConfig+0x11c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d007      	beq.n	8004040 <TIM_Base_SetConfig+0x40>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a3b      	ldr	r2, [pc, #236]	; (8004120 <TIM_Base_SetConfig+0x120>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_Base_SetConfig+0x40>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a3a      	ldr	r2, [pc, #232]	; (8004124 <TIM_Base_SetConfig+0x124>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d108      	bne.n	8004052 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a2f      	ldr	r2, [pc, #188]	; (8004114 <TIM_Base_SetConfig+0x114>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d02b      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004060:	d027      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2c      	ldr	r2, [pc, #176]	; (8004118 <TIM_Base_SetConfig+0x118>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d023      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a2b      	ldr	r2, [pc, #172]	; (800411c <TIM_Base_SetConfig+0x11c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d01f      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a2a      	ldr	r2, [pc, #168]	; (8004120 <TIM_Base_SetConfig+0x120>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01b      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a29      	ldr	r2, [pc, #164]	; (8004124 <TIM_Base_SetConfig+0x124>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d017      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a28      	ldr	r2, [pc, #160]	; (8004128 <TIM_Base_SetConfig+0x128>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a27      	ldr	r2, [pc, #156]	; (800412c <TIM_Base_SetConfig+0x12c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00f      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a26      	ldr	r2, [pc, #152]	; (8004130 <TIM_Base_SetConfig+0x130>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00b      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a25      	ldr	r2, [pc, #148]	; (8004134 <TIM_Base_SetConfig+0x134>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d007      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a24      	ldr	r2, [pc, #144]	; (8004138 <TIM_Base_SetConfig+0x138>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d003      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a23      	ldr	r2, [pc, #140]	; (800413c <TIM_Base_SetConfig+0x13c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d108      	bne.n	80040c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <TIM_Base_SetConfig+0x114>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_Base_SetConfig+0xf8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a0c      	ldr	r2, [pc, #48]	; (8004124 <TIM_Base_SetConfig+0x124>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d103      	bne.n	8004100 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	615a      	str	r2, [r3, #20]
}
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40010000 	.word	0x40010000
 8004118:	40000400 	.word	0x40000400
 800411c:	40000800 	.word	0x40000800
 8004120:	40000c00 	.word	0x40000c00
 8004124:	40010400 	.word	0x40010400
 8004128:	40014000 	.word	0x40014000
 800412c:	40014400 	.word	0x40014400
 8004130:	40014800 	.word	0x40014800
 8004134:	40001800 	.word	0x40001800
 8004138:	40001c00 	.word	0x40001c00
 800413c:	40002000 	.word	0x40002000

08004140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f023 0201 	bic.w	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800416a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f023 030a 	bic.w	r3, r3, #10
 800417c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800419e:	b480      	push	{r7}
 80041a0:	b087      	sub	sp, #28
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f023 0210 	bic.w	r2, r3, #16
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	031b      	lsls	r3, r3, #12
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	621a      	str	r2, [r3, #32]
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	f043 0307 	orr.w	r3, r3, #7
 8004220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	609a      	str	r2, [r3, #8]
}
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800424e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	021a      	lsls	r2, r3, #8
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	431a      	orrs	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4313      	orrs	r3, r2
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	609a      	str	r2, [r3, #8]
}
 8004268:	bf00      	nop
 800426a:	371c      	adds	r7, #28
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004288:	2302      	movs	r3, #2
 800428a:	e05a      	b.n	8004342 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a21      	ldr	r2, [pc, #132]	; (8004350 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d022      	beq.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042d8:	d01d      	beq.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d018      	beq.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1b      	ldr	r2, [pc, #108]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d013      	beq.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1a      	ldr	r2, [pc, #104]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d00e      	beq.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a18      	ldr	r2, [pc, #96]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d009      	beq.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a17      	ldr	r2, [pc, #92]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d004      	beq.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a15      	ldr	r2, [pc, #84]	; (8004368 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d10c      	bne.n	8004330 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800431c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	4313      	orrs	r3, r2
 8004326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40010000 	.word	0x40010000
 8004354:	40000400 	.word	0x40000400
 8004358:	40000800 	.word	0x40000800
 800435c:	40000c00 	.word	0x40000c00
 8004360:	40010400 	.word	0x40010400
 8004364:	40014000 	.word	0x40014000
 8004368:	40001800 	.word	0x40001800

0800436c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800436c:	b084      	sub	sp, #16
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	f107 001c 	add.w	r0, r7, #28
 800437a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800437e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004380:	2b01      	cmp	r3, #1
 8004382:	d122      	bne.n	80043ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d105      	bne.n	80043be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f001 fab4 	bl	800592c <USB_CoreReset>
 80043c4:	4603      	mov	r3, r0
 80043c6:	73fb      	strb	r3, [r7, #15]
 80043c8:	e01a      	b.n	8004400 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f001 faa8 	bl	800592c <USB_CoreReset>
 80043dc:	4603      	mov	r3, r0
 80043de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
 80043f2:	e005      	b.n	8004400 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	2b01      	cmp	r3, #1
 8004404:	d10b      	bne.n	800441e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f043 0206 	orr.w	r2, r3, #6
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f043 0220 	orr.w	r2, r3, #32
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800441e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800442a:	b004      	add	sp, #16
 800442c:	4770      	bx	lr
	...

08004430 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	4613      	mov	r3, r2
 800443c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d165      	bne.n	8004510 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4a41      	ldr	r2, [pc, #260]	; (800454c <USB_SetTurnaroundTime+0x11c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d906      	bls.n	800445a <USB_SetTurnaroundTime+0x2a>
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4a40      	ldr	r2, [pc, #256]	; (8004550 <USB_SetTurnaroundTime+0x120>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d802      	bhi.n	800445a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004454:	230f      	movs	r3, #15
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	e062      	b.n	8004520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	4a3c      	ldr	r2, [pc, #240]	; (8004550 <USB_SetTurnaroundTime+0x120>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d906      	bls.n	8004470 <USB_SetTurnaroundTime+0x40>
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4a3b      	ldr	r2, [pc, #236]	; (8004554 <USB_SetTurnaroundTime+0x124>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d802      	bhi.n	8004470 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800446a:	230e      	movs	r3, #14
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	e057      	b.n	8004520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4a38      	ldr	r2, [pc, #224]	; (8004554 <USB_SetTurnaroundTime+0x124>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d906      	bls.n	8004486 <USB_SetTurnaroundTime+0x56>
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4a37      	ldr	r2, [pc, #220]	; (8004558 <USB_SetTurnaroundTime+0x128>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d802      	bhi.n	8004486 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004480:	230d      	movs	r3, #13
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	e04c      	b.n	8004520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4a33      	ldr	r2, [pc, #204]	; (8004558 <USB_SetTurnaroundTime+0x128>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d906      	bls.n	800449c <USB_SetTurnaroundTime+0x6c>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	4a32      	ldr	r2, [pc, #200]	; (800455c <USB_SetTurnaroundTime+0x12c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d802      	bhi.n	800449c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004496:	230c      	movs	r3, #12
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	e041      	b.n	8004520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4a2f      	ldr	r2, [pc, #188]	; (800455c <USB_SetTurnaroundTime+0x12c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d906      	bls.n	80044b2 <USB_SetTurnaroundTime+0x82>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4a2e      	ldr	r2, [pc, #184]	; (8004560 <USB_SetTurnaroundTime+0x130>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d802      	bhi.n	80044b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80044ac:	230b      	movs	r3, #11
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	e036      	b.n	8004520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4a2a      	ldr	r2, [pc, #168]	; (8004560 <USB_SetTurnaroundTime+0x130>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d906      	bls.n	80044c8 <USB_SetTurnaroundTime+0x98>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4a29      	ldr	r2, [pc, #164]	; (8004564 <USB_SetTurnaroundTime+0x134>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d802      	bhi.n	80044c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80044c2:	230a      	movs	r3, #10
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	e02b      	b.n	8004520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4a26      	ldr	r2, [pc, #152]	; (8004564 <USB_SetTurnaroundTime+0x134>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d906      	bls.n	80044de <USB_SetTurnaroundTime+0xae>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4a25      	ldr	r2, [pc, #148]	; (8004568 <USB_SetTurnaroundTime+0x138>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d802      	bhi.n	80044de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044d8:	2309      	movs	r3, #9
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	e020      	b.n	8004520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4a21      	ldr	r2, [pc, #132]	; (8004568 <USB_SetTurnaroundTime+0x138>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d906      	bls.n	80044f4 <USB_SetTurnaroundTime+0xc4>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	4a20      	ldr	r2, [pc, #128]	; (800456c <USB_SetTurnaroundTime+0x13c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d802      	bhi.n	80044f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044ee:	2308      	movs	r3, #8
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	e015      	b.n	8004520 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4a1d      	ldr	r2, [pc, #116]	; (800456c <USB_SetTurnaroundTime+0x13c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d906      	bls.n	800450a <USB_SetTurnaroundTime+0xda>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <USB_SetTurnaroundTime+0x140>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d802      	bhi.n	800450a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004504:	2307      	movs	r3, #7
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	e00a      	b.n	8004520 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800450a:	2306      	movs	r3, #6
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	e007      	b.n	8004520 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d102      	bne.n	800451c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004516:	2309      	movs	r3, #9
 8004518:	617b      	str	r3, [r7, #20]
 800451a:	e001      	b.n	8004520 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800451c:	2309      	movs	r3, #9
 800451e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	029b      	lsls	r3, r3, #10
 8004534:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004538:	431a      	orrs	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	371c      	adds	r7, #28
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	00d8acbf 	.word	0x00d8acbf
 8004550:	00e4e1bf 	.word	0x00e4e1bf
 8004554:	00f423ff 	.word	0x00f423ff
 8004558:	0106737f 	.word	0x0106737f
 800455c:	011a499f 	.word	0x011a499f
 8004560:	01312cff 	.word	0x01312cff
 8004564:	014ca43f 	.word	0x014ca43f
 8004568:	016e35ff 	.word	0x016e35ff
 800456c:	01a6ab1f 	.word	0x01a6ab1f
 8004570:	01e847ff 	.word	0x01e847ff

08004574 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f043 0201 	orr.w	r2, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f023 0201 	bic.w	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d106      	bne.n	80045e4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	60da      	str	r2, [r3, #12]
 80045e2:	e00b      	b.n	80045fc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	e001      	b.n	80045fc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e003      	b.n	8004604 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80045fc:	2032      	movs	r0, #50	; 0x32
 80045fe:	f7fc fcd9 	bl	8000fb4 <HAL_Delay>

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800460c:	b084      	sub	sp, #16
 800460e:	b580      	push	{r7, lr}
 8004610:	b086      	sub	sp, #24
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800461a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	e009      	b.n	8004640 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	3340      	adds	r3, #64	; 0x40
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	2200      	movs	r2, #0
 8004638:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	3301      	adds	r3, #1
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	2b0e      	cmp	r3, #14
 8004644:	d9f2      	bls.n	800462c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d11c      	bne.n	8004686 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800465a:	f043 0302 	orr.w	r3, r3, #2
 800465e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	639a      	str	r2, [r3, #56]	; 0x38
 8004684:	e00b      	b.n	800469e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046a4:	461a      	mov	r2, r3
 80046a6:	2300      	movs	r3, #0
 80046a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b0:	4619      	mov	r1, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b8:	461a      	mov	r2, r3
 80046ba:	680b      	ldr	r3, [r1, #0]
 80046bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d10c      	bne.n	80046de <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d104      	bne.n	80046d4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046ca:	2100      	movs	r1, #0
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f949 	bl	8004964 <USB_SetDevSpeed>
 80046d2:	e008      	b.n	80046e6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046d4:	2101      	movs	r1, #1
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f944 	bl	8004964 <USB_SetDevSpeed>
 80046dc:	e003      	b.n	80046e6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046de:	2103      	movs	r1, #3
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f93f 	bl	8004964 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046e6:	2110      	movs	r1, #16
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f8f3 	bl	80048d4 <USB_FlushTxFifo>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f911 	bl	8004920 <USB_FlushRxFifo>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800470e:	461a      	mov	r2, r3
 8004710:	2300      	movs	r3, #0
 8004712:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471a:	461a      	mov	r2, r3
 800471c:	2300      	movs	r3, #0
 800471e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004726:	461a      	mov	r2, r3
 8004728:	2300      	movs	r3, #0
 800472a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	e043      	b.n	80047ba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004748:	d118      	bne.n	800477c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475c:	461a      	mov	r2, r3
 800475e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	e013      	b.n	800478e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004772:	461a      	mov	r2, r3
 8004774:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e008      	b.n	800478e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004788:	461a      	mov	r2, r3
 800478a:	2300      	movs	r3, #0
 800478c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479a:	461a      	mov	r2, r3
 800479c:	2300      	movs	r3, #0
 800479e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ac:	461a      	mov	r2, r3
 80047ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	3301      	adds	r3, #1
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d3b7      	bcc.n	8004732 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047c2:	2300      	movs	r3, #0
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	e043      	b.n	8004850 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047de:	d118      	bne.n	8004812 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10a      	bne.n	80047fc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f2:	461a      	mov	r2, r3
 80047f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	e013      	b.n	8004824 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004808:	461a      	mov	r2, r3
 800480a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	e008      	b.n	8004824 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481e:	461a      	mov	r2, r3
 8004820:	2300      	movs	r3, #0
 8004822:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004830:	461a      	mov	r2, r3
 8004832:	2300      	movs	r3, #0
 8004834:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	461a      	mov	r2, r3
 8004844:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004848:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	3301      	adds	r3, #1
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	429a      	cmp	r2, r3
 8004856:	d3b7      	bcc.n	80047c8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004866:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800486a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004878:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	2b00      	cmp	r3, #0
 800487e:	d105      	bne.n	800488c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f043 0210 	orr.w	r2, r3, #16
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699a      	ldr	r2, [r3, #24]
 8004890:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <USB_DevInit+0x2c4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489a:	2b00      	cmp	r3, #0
 800489c:	d005      	beq.n	80048aa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f043 0208 	orr.w	r2, r3, #8
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d107      	bne.n	80048c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048b8:	f043 0304 	orr.w	r3, r3, #4
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048cc:	b004      	add	sp, #16
 80048ce:	4770      	bx	lr
 80048d0:	803c3800 	.word	0x803c3800

080048d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	019b      	lsls	r3, r3, #6
 80048e6:	f043 0220 	orr.w	r2, r3, #32
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3301      	adds	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4a09      	ldr	r2, [pc, #36]	; (800491c <USB_FlushTxFifo+0x48>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d901      	bls.n	8004900 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e006      	b.n	800490e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b20      	cmp	r3, #32
 800490a:	d0f0      	beq.n	80048ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	00030d40 	.word	0x00030d40

08004920 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2210      	movs	r2, #16
 8004930:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3301      	adds	r3, #1
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4a09      	ldr	r2, [pc, #36]	; (8004960 <USB_FlushRxFifo+0x40>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d901      	bls.n	8004944 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e006      	b.n	8004952 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f003 0310 	and.w	r3, r3, #16
 800494c:	2b10      	cmp	r3, #16
 800494e:	d0f0      	beq.n	8004932 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	00030d40 	.word	0x00030d40

08004964 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004984:	4313      	orrs	r3, r2
 8004986:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004996:	b480      	push	{r7}
 8004998:	b087      	sub	sp, #28
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 0306 	and.w	r3, r3, #6
 80049ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d102      	bne.n	80049bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80049b6:	2300      	movs	r3, #0
 80049b8:	75fb      	strb	r3, [r7, #23]
 80049ba:	e00a      	b.n	80049d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d002      	beq.n	80049c8 <USB_GetDevSpeed+0x32>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b06      	cmp	r3, #6
 80049c6:	d102      	bne.n	80049ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80049c8:	2302      	movs	r3, #2
 80049ca:	75fb      	strb	r3, [r7, #23]
 80049cc:	e001      	b.n	80049d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80049ce:	230f      	movs	r3, #15
 80049d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	785b      	ldrb	r3, [r3, #1]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d13a      	bne.n	8004a72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a02:	69da      	ldr	r2, [r3, #28]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	68f9      	ldr	r1, [r7, #12]
 8004a16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d155      	bne.n	8004ae0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	78db      	ldrb	r3, [r3, #3]
 8004a4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	059b      	lsls	r3, r3, #22
 8004a56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	0151      	lsls	r1, r2, #5
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	440a      	add	r2, r1
 8004a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	e036      	b.n	8004ae0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a78:	69da      	ldr	r2, [r3, #28]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	2101      	movs	r1, #1
 8004a84:	fa01 f303 	lsl.w	r3, r1, r3
 8004a88:	041b      	lsls	r3, r3, #16
 8004a8a:	68f9      	ldr	r1, [r7, #12]
 8004a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d11a      	bne.n	8004ae0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	78db      	ldrb	r3, [r3, #3]
 8004ac4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	0151      	lsls	r1, r2, #5
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	440a      	add	r2, r1
 8004ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ade:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
	...

08004af0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	785b      	ldrb	r3, [r3, #1]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d161      	bne.n	8004bd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b22:	d11f      	bne.n	8004b64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	0151      	lsls	r1, r2, #5
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	440a      	add	r2, r1
 8004b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	015a      	lsls	r2, r3, #5
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	0151      	lsls	r1, r2, #5
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	440a      	add	r2, r1
 8004b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	2101      	movs	r1, #1
 8004b76:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	68f9      	ldr	r1, [r7, #12]
 8004b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b84:	4013      	ands	r3, r2
 8004b86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8e:	69da      	ldr	r2, [r3, #28]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	f003 030f 	and.w	r3, r3, #15
 8004b98:	2101      	movs	r1, #1
 8004b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	43db      	mvns	r3, r3
 8004ba2:	68f9      	ldr	r1, [r7, #12]
 8004ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ba8:	4013      	ands	r3, r2
 8004baa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	0159      	lsls	r1, r3, #5
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	440b      	add	r3, r1
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4b35      	ldr	r3, [pc, #212]	; (8004ca0 <USB_DeactivateEndpoint+0x1b0>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]
 8004bce:	e060      	b.n	8004c92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004be6:	d11f      	bne.n	8004c28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	0151      	lsls	r1, r2, #5
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	0151      	lsls	r1, r2, #5
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	440a      	add	r2, r1
 8004c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	2101      	movs	r1, #1
 8004c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3e:	041b      	lsls	r3, r3, #16
 8004c40:	43db      	mvns	r3, r3
 8004c42:	68f9      	ldr	r1, [r7, #12]
 8004c44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c48:	4013      	ands	r3, r2
 8004c4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c62:	041b      	lsls	r3, r3, #16
 8004c64:	43db      	mvns	r3, r3
 8004c66:	68f9      	ldr	r1, [r7, #12]
 8004c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	0159      	lsls	r1, r3, #5
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	440b      	add	r3, r1
 8004c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <USB_DeactivateEndpoint+0x1b4>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	ec337800 	.word	0xec337800
 8004ca4:	eff37800 	.word	0xeff37800

08004ca8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08a      	sub	sp, #40	; 0x28
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	785b      	ldrb	r3, [r3, #1]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	f040 815c 	bne.w	8004f82 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d132      	bne.n	8004d38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cf0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d30:	0cdb      	lsrs	r3, r3, #19
 8004d32:	04db      	lsls	r3, r3, #19
 8004d34:	6113      	str	r3, [r2, #16]
 8004d36:	e074      	b.n	8004e22 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d52:	0cdb      	lsrs	r3, r3, #19
 8004d54:	04db      	lsls	r3, r3, #19
 8004d56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	6959      	ldr	r1, [r3, #20]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	440b      	add	r3, r1
 8004d94:	1e59      	subs	r1, r3, #1
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d9e:	04d9      	lsls	r1, r3, #19
 8004da0:	4b9d      	ldr	r3, [pc, #628]	; (8005018 <USB_EPStartXfer+0x370>)
 8004da2:	400b      	ands	r3, r1
 8004da4:	69b9      	ldr	r1, [r7, #24]
 8004da6:	0148      	lsls	r0, r1, #5
 8004da8:	69f9      	ldr	r1, [r7, #28]
 8004daa:	4401      	add	r1, r0
 8004dac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004db0:	4313      	orrs	r3, r2
 8004db2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc0:	691a      	ldr	r2, [r3, #16]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dca:	69b9      	ldr	r1, [r7, #24]
 8004dcc:	0148      	lsls	r0, r1, #5
 8004dce:	69f9      	ldr	r1, [r7, #28]
 8004dd0:	4401      	add	r1, r0
 8004dd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	78db      	ldrb	r3, [r3, #3]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d11f      	bne.n	8004e22 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	0151      	lsls	r1, r2, #5
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	440a      	add	r2, r1
 8004df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dfc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	0151      	lsls	r1, r2, #5
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	440a      	add	r2, r1
 8004e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e20:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e22:	79fb      	ldrb	r3, [r7, #7]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d14b      	bne.n	8004ec0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	78db      	ldrb	r3, [r3, #3]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d128      	bne.n	8004e9e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d110      	bne.n	8004e7e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	0151      	lsls	r1, r2, #5
 8004e6e:	69fa      	ldr	r2, [r7, #28]
 8004e70:	440a      	add	r2, r1
 8004e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	e00f      	b.n	8004e9e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	0151      	lsls	r1, r2, #5
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	440a      	add	r2, r1
 8004e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	0151      	lsls	r1, r2, #5
 8004eb0:	69fa      	ldr	r2, [r7, #28]
 8004eb2:	440a      	add	r2, r1
 8004eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	e12f      	b.n	8005120 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	0151      	lsls	r1, r2, #5
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	440a      	add	r2, r1
 8004ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ede:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	78db      	ldrb	r3, [r3, #3]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d015      	beq.n	8004f14 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8117 	beq.w	8005120 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	2101      	movs	r1, #1
 8004f04:	fa01 f303 	lsl.w	r3, r1, r3
 8004f08:	69f9      	ldr	r1, [r7, #28]
 8004f0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	634b      	str	r3, [r1, #52]	; 0x34
 8004f12:	e105      	b.n	8005120 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d110      	bne.n	8004f46 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	0151      	lsls	r1, r2, #5
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	440a      	add	r2, r1
 8004f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	e00f      	b.n	8004f66 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	0151      	lsls	r1, r2, #5
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	440a      	add	r2, r1
 8004f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f64:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	68d9      	ldr	r1, [r3, #12]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	781a      	ldrb	r2, [r3, #0]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	b298      	uxth	r0, r3
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	4603      	mov	r3, r0
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 fa2b 	bl	80053d6 <USB_WritePacket>
 8004f80:	e0ce      	b.n	8005120 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f9c:	0cdb      	lsrs	r3, r3, #19
 8004f9e:	04db      	lsls	r3, r3, #19
 8004fa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	0151      	lsls	r1, r2, #5
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	440a      	add	r2, r1
 8004fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fc4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d126      	bne.n	800501c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe4:	69b9      	ldr	r1, [r7, #24]
 8004fe6:	0148      	lsls	r0, r1, #5
 8004fe8:	69f9      	ldr	r1, [r7, #28]
 8004fea:	4401      	add	r1, r0
 8004fec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	440a      	add	r2, r1
 800500a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800500e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005012:	6113      	str	r3, [r2, #16]
 8005014:	e036      	b.n	8005084 <USB_EPStartXfer+0x3dc>
 8005016:	bf00      	nop
 8005018:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	695a      	ldr	r2, [r3, #20]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	4413      	add	r3, r2
 8005026:	1e5a      	subs	r2, r3, #1
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	8afb      	ldrh	r3, [r7, #22]
 8005042:	04d9      	lsls	r1, r3, #19
 8005044:	4b39      	ldr	r3, [pc, #228]	; (800512c <USB_EPStartXfer+0x484>)
 8005046:	400b      	ands	r3, r1
 8005048:	69b9      	ldr	r1, [r7, #24]
 800504a:	0148      	lsls	r0, r1, #5
 800504c:	69f9      	ldr	r1, [r7, #28]
 800504e:	4401      	add	r1, r0
 8005050:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005054:	4313      	orrs	r3, r2
 8005056:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	8af9      	ldrh	r1, [r7, #22]
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005074:	69b9      	ldr	r1, [r7, #24]
 8005076:	0148      	lsls	r0, r1, #5
 8005078:	69f9      	ldr	r1, [r7, #28]
 800507a:	4401      	add	r1, r0
 800507c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005080:	4313      	orrs	r3, r2
 8005082:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d10d      	bne.n	80050a6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d009      	beq.n	80050a6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	68d9      	ldr	r1, [r3, #12]
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a2:	460a      	mov	r2, r1
 80050a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	78db      	ldrb	r3, [r3, #3]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d128      	bne.n	8005100 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d110      	bne.n	80050e0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	0151      	lsls	r1, r2, #5
 80050d0:	69fa      	ldr	r2, [r7, #28]
 80050d2:	440a      	add	r2, r1
 80050d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	e00f      	b.n	8005100 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	440a      	add	r2, r1
 8005116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800511a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800511e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3720      	adds	r7, #32
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	1ff80000 	.word	0x1ff80000

08005130 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	4613      	mov	r3, r2
 800513c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	2b01      	cmp	r3, #1
 800514e:	f040 80cd 	bne.w	80052ec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d132      	bne.n	80051c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	0151      	lsls	r1, r2, #5
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	440a      	add	r2, r1
 8005170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005174:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005178:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800517c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	0151      	lsls	r1, r2, #5
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	440a      	add	r2, r1
 8005194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005198:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800519c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b8:	0cdb      	lsrs	r3, r3, #19
 80051ba:	04db      	lsls	r3, r3, #19
 80051bc:	6113      	str	r3, [r2, #16]
 80051be:	e04e      	b.n	800525e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	0151      	lsls	r1, r2, #5
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	440a      	add	r2, r1
 80051d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051da:	0cdb      	lsrs	r3, r3, #19
 80051dc:	04db      	lsls	r3, r3, #19
 80051de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005202:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	695a      	ldr	r2, [r3, #20]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	429a      	cmp	r2, r3
 800520e:	d903      	bls.n	8005218 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	4413      	add	r3, r2
 8005220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	0151      	lsls	r1, r2, #5
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	440a      	add	r2, r1
 800522e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005232:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005236:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800524e:	6939      	ldr	r1, [r7, #16]
 8005250:	0148      	lsls	r0, r1, #5
 8005252:	6979      	ldr	r1, [r7, #20]
 8005254:	4401      	add	r1, r0
 8005256:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800525a:	4313      	orrs	r3, r2
 800525c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d11e      	bne.n	80052a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d009      	beq.n	8005280 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005278:	461a      	mov	r2, r3
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	0151      	lsls	r1, r2, #5
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	440a      	add	r2, r1
 8005296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800529a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	e092      	b.n	80053c8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d07e      	beq.n	80053c8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	2101      	movs	r1, #1
 80052dc:	fa01 f303 	lsl.w	r3, r1, r3
 80052e0:	6979      	ldr	r1, [r7, #20]
 80052e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052e6:	4313      	orrs	r3, r2
 80052e8:	634b      	str	r3, [r1, #52]	; 0x34
 80052ea:	e06d      	b.n	80053c8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005306:	0cdb      	lsrs	r3, r3, #19
 8005308:	04db      	lsls	r3, r3, #19
 800530a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	440a      	add	r2, r1
 8005322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005326:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800532a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800532e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	0151      	lsls	r1, r2, #5
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	440a      	add	r2, r1
 8005356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800535a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800535e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005376:	6939      	ldr	r1, [r7, #16]
 8005378:	0148      	lsls	r0, r1, #5
 800537a:	6979      	ldr	r1, [r7, #20]
 800537c:	4401      	add	r1, r0
 800537e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005382:	4313      	orrs	r3, r2
 8005384:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005386:	79fb      	ldrb	r3, [r7, #7]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d10d      	bne.n	80053a8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d009      	beq.n	80053a8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	68d9      	ldr	r1, [r3, #12]
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a4:	460a      	mov	r2, r1
 80053a6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	0151      	lsls	r1, r2, #5
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	440a      	add	r2, r1
 80053be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b089      	sub	sp, #36	; 0x24
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	4611      	mov	r1, r2
 80053e2:	461a      	mov	r2, r3
 80053e4:	460b      	mov	r3, r1
 80053e6:	71fb      	strb	r3, [r7, #7]
 80053e8:	4613      	mov	r3, r2
 80053ea:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80053f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d11a      	bne.n	8005432 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053fc:	88bb      	ldrh	r3, [r7, #4]
 80053fe:	3303      	adds	r3, #3
 8005400:	089b      	lsrs	r3, r3, #2
 8005402:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]
 8005408:	e00f      	b.n	800542a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	031a      	lsls	r2, r3, #12
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	4413      	add	r3, r2
 8005412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005416:	461a      	mov	r2, r3
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	3304      	adds	r3, #4
 8005422:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	3301      	adds	r3, #1
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	429a      	cmp	r2, r3
 8005430:	d3eb      	bcc.n	800540a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3724      	adds	r7, #36	; 0x24
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005440:	b480      	push	{r7}
 8005442:	b089      	sub	sp, #36	; 0x24
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	4613      	mov	r3, r2
 800544c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005456:	88fb      	ldrh	r3, [r7, #6]
 8005458:	3303      	adds	r3, #3
 800545a:	089b      	lsrs	r3, r3, #2
 800545c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800545e:	2300      	movs	r3, #0
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	e00b      	b.n	800547c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	3304      	adds	r3, #4
 8005474:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	3301      	adds	r3, #1
 800547a:	61bb      	str	r3, [r7, #24]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	429a      	cmp	r2, r3
 8005482:	d3ef      	bcc.n	8005464 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005484:	69fb      	ldr	r3, [r7, #28]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3724      	adds	r7, #36	; 0x24
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005492:	b480      	push	{r7}
 8005494:	b085      	sub	sp, #20
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	785b      	ldrb	r3, [r3, #1]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d12c      	bne.n	8005508 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	db12      	blt.n	80054e6 <USB_EPSetStall+0x54>
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00f      	beq.n	80054e6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	0151      	lsls	r1, r2, #5
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	440a      	add	r2, r1
 80054dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054e4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	0151      	lsls	r1, r2, #5
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	440a      	add	r2, r1
 80054fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005500:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	e02b      	b.n	8005560 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	db12      	blt.n	8005540 <USB_EPSetStall+0xae>
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00f      	beq.n	8005540 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	0151      	lsls	r1, r2, #5
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	440a      	add	r2, r1
 8005536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800553a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800553e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	0151      	lsls	r1, r2, #5
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	440a      	add	r2, r1
 8005556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800555a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800555e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	785b      	ldrb	r3, [r3, #1]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d128      	bne.n	80055dc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	0151      	lsls	r1, r2, #5
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	440a      	add	r2, r1
 80055a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	78db      	ldrb	r3, [r3, #3]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d003      	beq.n	80055ba <USB_EPClearStall+0x4c>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	78db      	ldrb	r3, [r3, #3]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d138      	bne.n	800562c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	0151      	lsls	r1, r2, #5
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	440a      	add	r2, r1
 80055d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	e027      	b.n	800562c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	78db      	ldrb	r3, [r3, #3]
 8005600:	2b03      	cmp	r3, #3
 8005602:	d003      	beq.n	800560c <USB_EPClearStall+0x9e>
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	78db      	ldrb	r3, [r3, #3]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d10f      	bne.n	800562c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	440a      	add	r2, r1
 8005622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800562a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800563a:	b480      	push	{r7}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	460b      	mov	r3, r1
 8005644:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005658:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800565c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	78fb      	ldrb	r3, [r7, #3]
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800566e:	68f9      	ldr	r1, [r7, #12]
 8005670:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005674:	4313      	orrs	r3, r2
 8005676:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056a0:	f023 0302 	bic.w	r3, r3, #2
 80056a4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80056a6:	2003      	movs	r0, #3
 80056a8:	f7fb fc84 	bl	8000fb4 <HAL_Delay>

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b084      	sub	sp, #16
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056d0:	f043 0302 	orr.w	r3, r3, #2
 80056d4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80056d6:	2003      	movs	r0, #3
 80056d8:	f7fb fc6c 	bl	8000fb4 <HAL_Delay>

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b085      	sub	sp, #20
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	4013      	ands	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056fe:	68fb      	ldr	r3, [r7, #12]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	4013      	ands	r3, r2
 800572e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	0c1b      	lsrs	r3, r3, #16
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575c:	69db      	ldr	r3, [r3, #28]
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	4013      	ands	r3, r2
 8005762:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	b29b      	uxth	r3, r3
}
 8005768:	4618      	mov	r0, r3
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	4013      	ands	r3, r2
 80057a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057a2:	68bb      	ldr	r3, [r7, #8]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	fa22 f303 	lsr.w	r3, r2, r3
 80057e0:	01db      	lsls	r3, r3, #7
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4013      	ands	r3, r2
 80057fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057fe:	68bb      	ldr	r3, [r7, #8]
}
 8005800:	4618      	mov	r0, r3
 8005802:	371c      	adds	r7, #28
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	f003 0301 	and.w	r3, r3, #1
}
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005842:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005846:	f023 0307 	bic.w	r3, r3, #7
 800584a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800585a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
	...

08005870 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	460b      	mov	r3, r1
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	333c      	adds	r3, #60	; 0x3c
 8005886:	3304      	adds	r3, #4
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4a26      	ldr	r2, [pc, #152]	; (8005928 <USB_EP0_OutStart+0xb8>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d90a      	bls.n	80058aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058a4:	d101      	bne.n	80058aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	e037      	b.n	800591a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b0:	461a      	mov	r2, r3
 80058b2:	2300      	movs	r3, #0
 80058b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d8:	f043 0318 	orr.w	r3, r3, #24
 80058dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80058f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80058f2:	7afb      	ldrb	r3, [r7, #11]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d10f      	bne.n	8005918 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fe:	461a      	mov	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005912:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005916:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	4f54300a 	.word	0x4f54300a

0800592c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3301      	adds	r3, #1
 800593c:	60fb      	str	r3, [r7, #12]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4a13      	ldr	r2, [pc, #76]	; (8005990 <USB_CoreReset+0x64>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e01b      	b.n	8005982 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	daf2      	bge.n	8005938 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f043 0201 	orr.w	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3301      	adds	r3, #1
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4a09      	ldr	r2, [pc, #36]	; (8005990 <USB_CoreReset+0x64>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d901      	bls.n	8005974 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e006      	b.n	8005982 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b01      	cmp	r3, #1
 800597e:	d0f0      	beq.n	8005962 <USB_CoreReset+0x36>

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	00030d40 	.word	0x00030d40

08005994 <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	220a      	movs	r2, #10
 80059a0:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 80059a2:	4b03      	ldr	r3, [pc, #12]	; (80059b0 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	20000044 	.word	0x20000044

080059b4 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  pInstance = pdev;
 80059c0:	4a0c      	ldr	r2, [pc, #48]	; (80059f4 <USBD_AUDIO_Init+0x40>)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6013      	str	r3, [r2, #0]
  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 80059c6:	2340      	movs	r3, #64	; 0x40
 80059c8:	2202      	movs	r2, #2
 80059ca:	2181      	movs	r1, #129	; 0x81
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 fe74 	bl	80076ba <USBD_LL_OpenEP>
  (void)USBD_LL_OpenEP(pdev, MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 80059d2:	2340      	movs	r3, #64	; 0x40
 80059d4:	2202      	movs	r2, #2
 80059d6:	2101      	movs	r1, #1
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f001 fe6e 	bl	80076ba <USBD_LL_OpenEP>

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, MIDI_OUT_EP, (uint8_t*)(USB_Rx_Buffer), MIDI_DATA_OUT_PACKET_SIZE);
 80059de:	2340      	movs	r3, #64	; 0x40
 80059e0:	4a05      	ldr	r2, [pc, #20]	; (80059f8 <USBD_AUDIO_Init+0x44>)
 80059e2:	2101      	movs	r1, #1
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f001 ff57 	bl	8007898 <USBD_LL_PrepareReceive>

  return (uint8_t)USBD_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3708      	adds	r7, #8
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	200002c0 	.word	0x200002c0
 80059f8:	20000510 	.word	0x20000510

080059fc <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Open EP IN*/
  (void)USBD_LL_CloseEP(pdev, MIDI_IN_EP);
 8005a08:	2181      	movs	r1, #129	; 0x81
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f001 fe7b 	bl	8007706 <USBD_LL_CloseEP>
  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, MIDI_OUT_EP);
 8005a10:	2101      	movs	r1, #1
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f001 fe77 	bl	8007706 <USBD_LL_CloseEP>

  return (uint8_t)USBD_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2285      	movs	r2, #133	; 0x85
 8005a30:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8005a32:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	20000050 	.word	0x20000050

08005a44 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  if (USB_Tx_State == 1)
 8005a50:	4b0e      	ldr	r3, [pc, #56]	; (8005a8c <USBD_AUDIO_DataIn+0x48>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d114      	bne.n	8005a82 <USBD_AUDIO_DataIn+0x3e>
  {
	  if (APP_Rx_length != 0)
 8005a58:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <USBD_AUDIO_DataIn+0x4c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <USBD_AUDIO_DataIn+0x24>
	  {
	    USB_Tx_State = USB_TX_CONTINUE;
 8005a60:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <USBD_AUDIO_DataIn+0x48>)
 8005a62:	2202      	movs	r2, #2
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	e008      	b.n	8005a7a <USBD_AUDIO_DataIn+0x36>
	  }
	  else
	  {
	    APP_Rx_ptr_out = 0;
 8005a68:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <USBD_AUDIO_DataIn+0x50>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]
	    APP_Rx_ptr_in = 0;
 8005a6e:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <USBD_AUDIO_DataIn+0x54>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]
	    USB_Tx_State = USB_TX_READY;
 8005a74:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <USBD_AUDIO_DataIn+0x48>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	701a      	strb	r2, [r3, #0]
	  }
	  USBD_AUDIO_DataOut(pdev, MIDI_OUT_EP);
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f819 	bl	8005ab4 <USBD_AUDIO_DataOut>
  }
  return (uint8_t)USBD_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3708      	adds	r7, #8
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	200002d0 	.word	0x200002d0
 8005a90:	200002cc 	.word	0x200002cc
 8005a94:	200002c8 	.word	0x200002c8
 8005a98:	200002c4 	.word	0x200002c4

08005a9c <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;
  USBD_AUDIO_ItfTypeDef *pmidi;

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 8005ac6:	78fa      	ldrb	r2, [r7, #3]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	1a9b      	subs	r3, r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	81fb      	strh	r3, [r7, #14]
  if (USB_Rx_Cnt)
 8005ada:	89fb      	ldrh	r3, [r7, #14]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d009      	beq.n	8005af4 <USBD_AUDIO_DataOut+0x40>
  {
	  pmidi = (USBD_AUDIO_ItfTypeDef *)(pdev->pUserData);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ae6:	60bb      	str	r3, [r7, #8]
	  pmidi->MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	89fa      	ldrh	r2, [r7, #14]
 8005aee:	4611      	mov	r1, r2
 8005af0:	4806      	ldr	r0, [pc, #24]	; (8005b0c <USBD_AUDIO_DataOut+0x58>)
 8005af2:	4798      	blx	r3
  }
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8005af4:	2340      	movs	r3, #64	; 0x40
 8005af6:	4a05      	ldr	r2, [pc, #20]	; (8005b0c <USBD_AUDIO_DataOut+0x58>)
 8005af8:	2101      	movs	r1, #1
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f001 fecc 	bl	8007898 <USBD_LL_PrepareReceive>

  return (uint8_t)USBD_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000510 	.word	0x20000510

08005b10 <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e004      	b.n	8005b2e <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
	...

08005b3c <USBD_MIDI_SendPacket>:

/**
  * @}
  */
void USBD_MIDI_SendPacket(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if (USB_Tx_State != 1)
 8005b42:	4b2e      	ldr	r3, [pc, #184]	; (8005bfc <USBD_MIDI_SendPacket+0xc0>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d055      	beq.n	8005bf6 <USBD_MIDI_SendPacket+0xba>
  {
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE)
 8005b4a:	4b2d      	ldr	r3, [pc, #180]	; (8005c00 <USBD_MIDI_SendPacket+0xc4>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b52:	d102      	bne.n	8005b5a <USBD_MIDI_SendPacket+0x1e>
    {
      APP_Rx_ptr_out = 0;
 8005b54:	4b2a      	ldr	r3, [pc, #168]	; (8005c00 <USBD_MIDI_SendPacket+0xc4>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
    }

    if(APP_Rx_ptr_out == APP_Rx_ptr_in)
 8005b5a:	4b29      	ldr	r3, [pc, #164]	; (8005c00 <USBD_MIDI_SendPacket+0xc4>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4b29      	ldr	r3, [pc, #164]	; (8005c04 <USBD_MIDI_SendPacket+0xc8>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d103      	bne.n	8005b6e <USBD_MIDI_SendPacket+0x32>
    {
      USB_Tx_State = USB_TX_READY;
 8005b66:	4b25      	ldr	r3, [pc, #148]	; (8005bfc <USBD_MIDI_SendPacket+0xc0>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	701a      	strb	r2, [r3, #0]
      return;
 8005b6c:	e043      	b.n	8005bf6 <USBD_MIDI_SendPacket+0xba>
    }

    if(APP_Rx_ptr_out > APP_Rx_ptr_in)
 8005b6e:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <USBD_MIDI_SendPacket+0xc4>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b24      	ldr	r3, [pc, #144]	; (8005c04 <USBD_MIDI_SendPacket+0xc8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d906      	bls.n	8005b88 <USBD_MIDI_SendPacket+0x4c>
    {
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 8005b7a:	4b21      	ldr	r3, [pc, #132]	; (8005c00 <USBD_MIDI_SendPacket+0xc4>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8005b82:	4a21      	ldr	r2, [pc, #132]	; (8005c08 <USBD_MIDI_SendPacket+0xcc>)
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	e006      	b.n	8005b96 <USBD_MIDI_SendPacket+0x5a>
    }
    else
    {
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 8005b88:	4b1e      	ldr	r3, [pc, #120]	; (8005c04 <USBD_MIDI_SendPacket+0xc8>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	4b1c      	ldr	r3, [pc, #112]	; (8005c00 <USBD_MIDI_SendPacket+0xc4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	4a1d      	ldr	r2, [pc, #116]	; (8005c08 <USBD_MIDI_SendPacket+0xcc>)
 8005b94:	6013      	str	r3, [r2, #0]
    }

    if (APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE)
 8005b96:	4b1c      	ldr	r3, [pc, #112]	; (8005c08 <USBD_MIDI_SendPacket+0xcc>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b40      	cmp	r3, #64	; 0x40
 8005b9c:	d90f      	bls.n	8005bbe <USBD_MIDI_SendPacket+0x82>
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 8005b9e:	4b18      	ldr	r3, [pc, #96]	; (8005c00 <USBD_MIDI_SendPacket+0xc4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE;
 8005ba4:	2340      	movs	r3, #64	; 0x40
 8005ba6:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 8005ba8:	4b15      	ldr	r3, [pc, #84]	; (8005c00 <USBD_MIDI_SendPacket+0xc4>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3340      	adds	r3, #64	; 0x40
 8005bae:	4a14      	ldr	r2, [pc, #80]	; (8005c00 <USBD_MIDI_SendPacket+0xc4>)
 8005bb0:	6013      	str	r3, [r2, #0]
      APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 8005bb2:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <USBD_MIDI_SendPacket+0xcc>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	3b40      	subs	r3, #64	; 0x40
 8005bb8:	4a13      	ldr	r2, [pc, #76]	; (8005c08 <USBD_MIDI_SendPacket+0xcc>)
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	e00f      	b.n	8005bde <USBD_MIDI_SendPacket+0xa2>
    }
    else
    {
      USB_Tx_ptr = APP_Rx_ptr_out;
 8005bbe:	4b10      	ldr	r3, [pc, #64]	; (8005c00 <USBD_MIDI_SendPacket+0xc4>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = APP_Rx_length;
 8005bc4:	4b10      	ldr	r3, [pc, #64]	; (8005c08 <USBD_MIDI_SendPacket+0xcc>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += APP_Rx_length;
 8005bca:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <USBD_MIDI_SendPacket+0xc4>)
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <USBD_MIDI_SendPacket+0xcc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	4a0a      	ldr	r2, [pc, #40]	; (8005c00 <USBD_MIDI_SendPacket+0xc4>)
 8005bd6:	6013      	str	r3, [r2, #0]
      APP_Rx_length = 0;
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <USBD_MIDI_SendPacket+0xcc>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = USB_TX_BUSY;
 8005bde:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <USBD_MIDI_SendPacket+0xc0>)
 8005be0:	2201      	movs	r2, #1
 8005be2:	701a      	strb	r2, [r3, #0]

    USBD_LL_Transmit(pInstance, MIDI_IN_EP,&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length);
 8005be4:	4b09      	ldr	r3, [pc, #36]	; (8005c0c <USBD_MIDI_SendPacket+0xd0>)
 8005be6:	6818      	ldr	r0, [r3, #0]
 8005be8:	88fb      	ldrh	r3, [r7, #6]
 8005bea:	4a09      	ldr	r2, [pc, #36]	; (8005c10 <USBD_MIDI_SendPacket+0xd4>)
 8005bec:	441a      	add	r2, r3
 8005bee:	88bb      	ldrh	r3, [r7, #4]
 8005bf0:	2181      	movs	r1, #129	; 0x81
 8005bf2:	f001 fe30 	bl	8007856 <USBD_LL_Transmit>
  }
}
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	200002d0 	.word	0x200002d0
 8005c00:	200002c8 	.word	0x200002c8
 8005c04:	200002c4 	.word	0x200002c4
 8005c08:	200002cc 	.word	0x200002cc
 8005c0c:	200002c0 	.word	0x200002c0
 8005c10:	20000550 	.word	0x20000550

08005c14 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e025      	b.n	8005c78 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	79fa      	ldrb	r2, [r7, #7]
 8005c6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f001 fcbd 	bl	80075ec <USBD_LL_Init>
 8005c72:	4603      	mov	r3, r0
 8005c74:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e010      	b.n	8005cba <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	f107 020e 	add.w	r2, r7, #14
 8005cac:	4610      	mov	r0, r2
 8005cae:	4798      	blx	r3
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f001 fcda 	bl	8007684 <USBD_LL_Start>
 8005cd0:	4603      	mov	r3, r0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	78fa      	ldrb	r2, [r7, #3]
 8005d14:	4611      	mov	r1, r2
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	4798      	blx	r3
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d007      	beq.n	8005d4e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	78fa      	ldrb	r2, [r7, #3]
 8005d48:	4611      	mov	r1, r2
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	4798      	blx	r3
  }

  return USBD_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 ff2c 	bl	8006bc8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d7e:	461a      	mov	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d8c:	f003 031f 	and.w	r3, r3, #31
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d00e      	beq.n	8005db2 <USBD_LL_SetupStage+0x5a>
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d302      	bcc.n	8005d9e <USBD_LL_SetupStage+0x46>
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d014      	beq.n	8005dc6 <USBD_LL_SetupStage+0x6e>
 8005d9c:	e01d      	b.n	8005dda <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005da4:	4619      	mov	r1, r3
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa18 	bl	80061dc <USBD_StdDevReq>
 8005dac:	4603      	mov	r3, r0
 8005dae:	73fb      	strb	r3, [r7, #15]
      break;
 8005db0:	e020      	b.n	8005df4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fa7c 	bl	80062b8 <USBD_StdItfReq>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc4:	e016      	b.n	8005df4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fab8 	bl	8006344 <USBD_StdEPReq>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd8:	e00c      	b.n	8005df4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005de0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f001 fcab 	bl	8007744 <USBD_LL_StallEP>
 8005dee:	4603      	mov	r3, r0
 8005df0:	73fb      	strb	r3, [r7, #15]
      break;
 8005df2:	bf00      	nop
  }

  return ret;
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b086      	sub	sp, #24
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	460b      	mov	r3, r1
 8005e08:	607a      	str	r2, [r7, #4]
 8005e0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005e0c:	7afb      	ldrb	r3, [r7, #11]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d137      	bne.n	8005e82 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e18:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d14a      	bne.n	8005eba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	689a      	ldr	r2, [r3, #8]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d913      	bls.n	8005e58 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	1ad2      	subs	r2, r2, r3
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	4293      	cmp	r3, r2
 8005e48:	bf28      	it	cs
 8005e4a:	4613      	movcs	r3, r2
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 ff90 	bl	8006d76 <USBD_CtlContinueRx>
 8005e56:	e030      	b.n	8005eba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00a      	beq.n	8005e7a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d105      	bne.n	8005e7a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 ff8c 	bl	8006d98 <USBD_CtlSendStatus>
 8005e80:	e01b      	b.n	8005eba <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d013      	beq.n	8005eb6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e94:	2b03      	cmp	r3, #3
 8005e96:	d10e      	bne.n	8005eb6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	7afa      	ldrb	r2, [r7, #11]
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	4798      	blx	r3
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005eac:	7dfb      	ldrb	r3, [r7, #23]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005eb2:	7dfb      	ldrb	r3, [r7, #23]
 8005eb4:	e002      	b.n	8005ebc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e000      	b.n	8005ebc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ed2:	7afb      	ldrb	r3, [r7, #11]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d16a      	bne.n	8005fae <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3314      	adds	r3, #20
 8005edc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d155      	bne.n	8005f94 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d914      	bls.n	8005f1e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	1ad2      	subs	r2, r2, r3
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	461a      	mov	r2, r3
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 ff22 	bl	8006d54 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f10:	2300      	movs	r3, #0
 8005f12:	2200      	movs	r2, #0
 8005f14:	2100      	movs	r1, #0
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f001 fcbe 	bl	8007898 <USBD_LL_PrepareReceive>
 8005f1c:	e03a      	b.n	8005f94 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d11c      	bne.n	8005f64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d316      	bcc.n	8005f64 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d20f      	bcs.n	8005f64 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f44:	2200      	movs	r2, #0
 8005f46:	2100      	movs	r1, #0
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 ff03 	bl	8006d54 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f56:	2300      	movs	r3, #0
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f001 fc9b 	bl	8007898 <USBD_LL_PrepareReceive>
 8005f62:	e017      	b.n	8005f94 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00a      	beq.n	8005f86 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d105      	bne.n	8005f86 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f86:	2180      	movs	r1, #128	; 0x80
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f001 fbdb 	bl	8007744 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 ff15 	bl	8006dbe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d123      	bne.n	8005fe6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f7ff fe9b 	bl	8005cda <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005fac:	e01b      	b.n	8005fe6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d013      	beq.n	8005fe2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d10e      	bne.n	8005fe2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	7afa      	ldrb	r2, [r7, #11]
 8005fce:	4611      	mov	r1, r2
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	4798      	blx	r3
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005fd8:	7dfb      	ldrb	r3, [r7, #23]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
 8005fe0:	e002      	b.n	8005fe8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e000      	b.n	8005fe8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3718      	adds	r7, #24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800601c:	2b00      	cmp	r3, #0
 800601e:	d009      	beq.n	8006034 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6852      	ldr	r2, [r2, #4]
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	4611      	mov	r1, r2
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006034:	2340      	movs	r3, #64	; 0x40
 8006036:	2200      	movs	r2, #0
 8006038:	2100      	movs	r1, #0
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f001 fb3d 	bl	80076ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2240      	movs	r2, #64	; 0x40
 800604c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006050:	2340      	movs	r3, #64	; 0x40
 8006052:	2200      	movs	r2, #0
 8006054:	2180      	movs	r1, #128	; 0x80
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f001 fb2f 	bl	80076ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2240      	movs	r2, #64	; 0x40
 8006066:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	460b      	mov	r3, r1
 800607c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	78fa      	ldrb	r2, [r7, #3]
 8006082:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2204      	movs	r2, #4
 80060aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d105      	bne.n	80060da <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f6:	2b03      	cmp	r3, #3
 80060f8:	d10b      	bne.n	8006112 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d005      	beq.n	8006112 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006136:	b480      	push	{r7}
 8006138:	b083      	sub	sp, #12
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	460b      	mov	r3, r1
 8006140:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617c:	2b00      	cmp	r3, #0
 800617e:	d009      	beq.n	8006194 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6852      	ldr	r2, [r2, #4]
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	4611      	mov	r1, r2
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	4798      	blx	r3
  }

  return USBD_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800619e:	b480      	push	{r7}
 80061a0:	b087      	sub	sp, #28
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	3301      	adds	r3, #1
 80061b4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80061bc:	8a3b      	ldrh	r3, [r7, #16]
 80061be:	021b      	lsls	r3, r3, #8
 80061c0:	b21a      	sxth	r2, r3
 80061c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	b21b      	sxth	r3, r3
 80061ca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80061cc:	89fb      	ldrh	r3, [r7, #14]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061f2:	2b20      	cmp	r3, #32
 80061f4:	d004      	beq.n	8006200 <USBD_StdDevReq+0x24>
 80061f6:	2b40      	cmp	r3, #64	; 0x40
 80061f8:	d002      	beq.n	8006200 <USBD_StdDevReq+0x24>
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <USBD_StdDevReq+0x38>
 80061fe:	e050      	b.n	80062a2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	6839      	ldr	r1, [r7, #0]
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	4798      	blx	r3
 800620e:	4603      	mov	r3, r0
 8006210:	73fb      	strb	r3, [r7, #15]
    break;
 8006212:	e04b      	b.n	80062ac <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	785b      	ldrb	r3, [r3, #1]
 8006218:	2b09      	cmp	r3, #9
 800621a:	d83c      	bhi.n	8006296 <USBD_StdDevReq+0xba>
 800621c:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <USBD_StdDevReq+0x48>)
 800621e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006222:	bf00      	nop
 8006224:	08006279 	.word	0x08006279
 8006228:	0800628d 	.word	0x0800628d
 800622c:	08006297 	.word	0x08006297
 8006230:	08006283 	.word	0x08006283
 8006234:	08006297 	.word	0x08006297
 8006238:	08006257 	.word	0x08006257
 800623c:	0800624d 	.word	0x0800624d
 8006240:	08006297 	.word	0x08006297
 8006244:	0800626f 	.word	0x0800626f
 8006248:	08006261 	.word	0x08006261
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f9ce 	bl	80065f0 <USBD_GetDescriptor>
      break;
 8006254:	e024      	b.n	80062a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 fb33 	bl	80068c4 <USBD_SetAddress>
      break;
 800625e:	e01f      	b.n	80062a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fb70 	bl	8006948 <USBD_SetConfig>
 8006268:	4603      	mov	r3, r0
 800626a:	73fb      	strb	r3, [r7, #15]
      break;
 800626c:	e018      	b.n	80062a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800626e:	6839      	ldr	r1, [r7, #0]
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fc0d 	bl	8006a90 <USBD_GetConfig>
      break;
 8006276:	e013      	b.n	80062a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fc3c 	bl	8006af8 <USBD_GetStatus>
      break;
 8006280:	e00e      	b.n	80062a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fc6a 	bl	8006b5e <USBD_SetFeature>
      break;
 800628a:	e009      	b.n	80062a0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fc79 	bl	8006b86 <USBD_ClrFeature>
      break;
 8006294:	e004      	b.n	80062a0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fccf 	bl	8006c3c <USBD_CtlError>
      break;
 800629e:	bf00      	nop
    }
    break;
 80062a0:	e004      	b.n	80062ac <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80062a2:	6839      	ldr	r1, [r7, #0]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fcc9 	bl	8006c3c <USBD_CtlError>
    break;
 80062aa:	bf00      	nop
  }

  return ret;
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop

080062b8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	d003      	beq.n	80062da <USBD_StdItfReq+0x22>
 80062d2:	2b40      	cmp	r3, #64	; 0x40
 80062d4:	d001      	beq.n	80062da <USBD_StdItfReq+0x22>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d12a      	bne.n	8006330 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e0:	3b01      	subs	r3, #1
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d81d      	bhi.n	8006322 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	889b      	ldrh	r3, [r3, #4]
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d813      	bhi.n	8006318 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	4798      	blx	r3
 80062fe:	4603      	mov	r3, r0
 8006300:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	88db      	ldrh	r3, [r3, #6]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d110      	bne.n	800632c <USBD_StdItfReq+0x74>
 800630a:	7bfb      	ldrb	r3, [r7, #15]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10d      	bne.n	800632c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fd41 	bl	8006d98 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006316:	e009      	b.n	800632c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fc8e 	bl	8006c3c <USBD_CtlError>
      break;
 8006320:	e004      	b.n	800632c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fc89 	bl	8006c3c <USBD_CtlError>
      break;
 800632a:	e000      	b.n	800632e <USBD_StdItfReq+0x76>
      break;
 800632c:	bf00      	nop
    }
    break;
 800632e:	e004      	b.n	800633a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fc82 	bl	8006c3c <USBD_CtlError>
    break;
 8006338:	bf00      	nop
  }

  return ret;
 800633a:	7bfb      	ldrb	r3, [r7, #15]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	889b      	ldrh	r3, [r3, #4]
 8006356:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006360:	2b20      	cmp	r3, #32
 8006362:	d004      	beq.n	800636e <USBD_StdEPReq+0x2a>
 8006364:	2b40      	cmp	r3, #64	; 0x40
 8006366:	d002      	beq.n	800636e <USBD_StdEPReq+0x2a>
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <USBD_StdEPReq+0x3e>
 800636c:	e135      	b.n	80065da <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	6839      	ldr	r1, [r7, #0]
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	4798      	blx	r3
 800637c:	4603      	mov	r3, r0
 800637e:	73fb      	strb	r3, [r7, #15]
    break;
 8006380:	e130      	b.n	80065e4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	785b      	ldrb	r3, [r3, #1]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d03e      	beq.n	8006408 <USBD_StdEPReq+0xc4>
 800638a:	2b03      	cmp	r3, #3
 800638c:	d002      	beq.n	8006394 <USBD_StdEPReq+0x50>
 800638e:	2b00      	cmp	r3, #0
 8006390:	d077      	beq.n	8006482 <USBD_StdEPReq+0x13e>
 8006392:	e11c      	b.n	80065ce <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800639a:	2b02      	cmp	r3, #2
 800639c:	d002      	beq.n	80063a4 <USBD_StdEPReq+0x60>
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d015      	beq.n	80063ce <USBD_StdEPReq+0x8a>
 80063a2:	e02b      	b.n	80063fc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063a4:	7bbb      	ldrb	r3, [r7, #14]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00c      	beq.n	80063c4 <USBD_StdEPReq+0x80>
 80063aa:	7bbb      	ldrb	r3, [r7, #14]
 80063ac:	2b80      	cmp	r3, #128	; 0x80
 80063ae:	d009      	beq.n	80063c4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80063b0:	7bbb      	ldrb	r3, [r7, #14]
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 f9c5 	bl	8007744 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80063ba:	2180      	movs	r1, #128	; 0x80
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 f9c1 	bl	8007744 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80063c2:	e020      	b.n	8006406 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80063c4:	6839      	ldr	r1, [r7, #0]
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fc38 	bl	8006c3c <USBD_CtlError>
        break;
 80063cc:	e01b      	b.n	8006406 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	885b      	ldrh	r3, [r3, #2]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10e      	bne.n	80063f4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00b      	beq.n	80063f4 <USBD_StdEPReq+0xb0>
 80063dc:	7bbb      	ldrb	r3, [r7, #14]
 80063de:	2b80      	cmp	r3, #128	; 0x80
 80063e0:	d008      	beq.n	80063f4 <USBD_StdEPReq+0xb0>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	88db      	ldrh	r3, [r3, #6]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d104      	bne.n	80063f4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80063ea:	7bbb      	ldrb	r3, [r7, #14]
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 f9a8 	bl	8007744 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fccf 	bl	8006d98 <USBD_CtlSendStatus>

        break;
 80063fa:	e004      	b.n	8006406 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fc1c 	bl	8006c3c <USBD_CtlError>
        break;
 8006404:	bf00      	nop
      }
      break;
 8006406:	e0e7      	b.n	80065d8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800640e:	2b02      	cmp	r3, #2
 8006410:	d002      	beq.n	8006418 <USBD_StdEPReq+0xd4>
 8006412:	2b03      	cmp	r3, #3
 8006414:	d015      	beq.n	8006442 <USBD_StdEPReq+0xfe>
 8006416:	e02d      	b.n	8006474 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006418:	7bbb      	ldrb	r3, [r7, #14]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00c      	beq.n	8006438 <USBD_StdEPReq+0xf4>
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	2b80      	cmp	r3, #128	; 0x80
 8006422:	d009      	beq.n	8006438 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f001 f98b 	bl	8007744 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800642e:	2180      	movs	r1, #128	; 0x80
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 f987 	bl	8007744 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006436:	e023      	b.n	8006480 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 fbfe 	bl	8006c3c <USBD_CtlError>
        break;
 8006440:	e01e      	b.n	8006480 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	885b      	ldrh	r3, [r3, #2]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d119      	bne.n	800647e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800644a:	7bbb      	ldrb	r3, [r7, #14]
 800644c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006450:	2b00      	cmp	r3, #0
 8006452:	d004      	beq.n	800645e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006454:	7bbb      	ldrb	r3, [r7, #14]
 8006456:	4619      	mov	r1, r3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f001 f992 	bl	8007782 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fc9a 	bl	8006d98 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	4798      	blx	r3
        }
        break;
 8006472:	e004      	b.n	800647e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006474:	6839      	ldr	r1, [r7, #0]
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fbe0 	bl	8006c3c <USBD_CtlError>
        break;
 800647c:	e000      	b.n	8006480 <USBD_StdEPReq+0x13c>
        break;
 800647e:	bf00      	nop
      }
      break;
 8006480:	e0aa      	b.n	80065d8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006488:	2b02      	cmp	r3, #2
 800648a:	d002      	beq.n	8006492 <USBD_StdEPReq+0x14e>
 800648c:	2b03      	cmp	r3, #3
 800648e:	d032      	beq.n	80064f6 <USBD_StdEPReq+0x1b2>
 8006490:	e097      	b.n	80065c2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006492:	7bbb      	ldrb	r3, [r7, #14]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d007      	beq.n	80064a8 <USBD_StdEPReq+0x164>
 8006498:	7bbb      	ldrb	r3, [r7, #14]
 800649a:	2b80      	cmp	r3, #128	; 0x80
 800649c:	d004      	beq.n	80064a8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fbcb 	bl	8006c3c <USBD_CtlError>
          break;
 80064a6:	e091      	b.n	80065cc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	da0b      	bge.n	80064c8 <USBD_StdEPReq+0x184>
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	3310      	adds	r3, #16
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	4413      	add	r3, r2
 80064c4:	3304      	adds	r3, #4
 80064c6:	e00b      	b.n	80064e0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80064c8:	7bbb      	ldrb	r3, [r7, #14]
 80064ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064ce:	4613      	mov	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	4413      	add	r3, r2
 80064de:	3304      	adds	r3, #4
 80064e0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2202      	movs	r2, #2
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 fc15 	bl	8006d1e <USBD_CtlSendData>
        break;
 80064f4:	e06a      	b.n	80065cc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80064f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	da11      	bge.n	8006522 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064fe:	7bbb      	ldrb	r3, [r7, #14]
 8006500:	f003 020f 	and.w	r2, r3, #15
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	4613      	mov	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	440b      	add	r3, r1
 8006510:	3324      	adds	r3, #36	; 0x24
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d117      	bne.n	8006548 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fb8e 	bl	8006c3c <USBD_CtlError>
            break;
 8006520:	e054      	b.n	80065cc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006522:	7bbb      	ldrb	r3, [r7, #14]
 8006524:	f003 020f 	and.w	r2, r3, #15
 8006528:	6879      	ldr	r1, [r7, #4]
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	440b      	add	r3, r1
 8006534:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d104      	bne.n	8006548 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fb7b 	bl	8006c3c <USBD_CtlError>
            break;
 8006546:	e041      	b.n	80065cc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800654c:	2b00      	cmp	r3, #0
 800654e:	da0b      	bge.n	8006568 <USBD_StdEPReq+0x224>
 8006550:	7bbb      	ldrb	r3, [r7, #14]
 8006552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006556:	4613      	mov	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	3310      	adds	r3, #16
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	4413      	add	r3, r2
 8006564:	3304      	adds	r3, #4
 8006566:	e00b      	b.n	8006580 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006568:	7bbb      	ldrb	r3, [r7, #14]
 800656a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	4413      	add	r3, r2
 800657e:	3304      	adds	r3, #4
 8006580:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006582:	7bbb      	ldrb	r3, [r7, #14]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <USBD_StdEPReq+0x24a>
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	2b80      	cmp	r3, #128	; 0x80
 800658c:	d103      	bne.n	8006596 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	e00e      	b.n	80065b4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006596:	7bbb      	ldrb	r3, [r7, #14]
 8006598:	4619      	mov	r1, r3
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f001 f910 	bl	80077c0 <USBD_LL_IsStallEP>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2201      	movs	r2, #1
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	e002      	b.n	80065b4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2202      	movs	r2, #2
 80065b8:	4619      	mov	r1, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fbaf 	bl	8006d1e <USBD_CtlSendData>
          break;
 80065c0:	e004      	b.n	80065cc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fb39 	bl	8006c3c <USBD_CtlError>
        break;
 80065ca:	bf00      	nop
      }
      break;
 80065cc:	e004      	b.n	80065d8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fb33 	bl	8006c3c <USBD_CtlError>
      break;
 80065d6:	bf00      	nop
    }
    break;
 80065d8:	e004      	b.n	80065e4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fb2d 	bl	8006c3c <USBD_CtlError>
    break;
 80065e2:	bf00      	nop
  }

  return ret;
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	885b      	ldrh	r3, [r3, #2]
 800660a:	0a1b      	lsrs	r3, r3, #8
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	2b06      	cmp	r3, #6
 8006612:	f200 8128 	bhi.w	8006866 <USBD_GetDescriptor+0x276>
 8006616:	a201      	add	r2, pc, #4	; (adr r2, 800661c <USBD_GetDescriptor+0x2c>)
 8006618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661c:	08006639 	.word	0x08006639
 8006620:	08006651 	.word	0x08006651
 8006624:	08006691 	.word	0x08006691
 8006628:	08006867 	.word	0x08006867
 800662c:	08006867 	.word	0x08006867
 8006630:	08006807 	.word	0x08006807
 8006634:	08006833 	.word	0x08006833
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	7c12      	ldrb	r2, [r2, #16]
 8006644:	f107 0108 	add.w	r1, r7, #8
 8006648:	4610      	mov	r0, r2
 800664a:	4798      	blx	r3
 800664c:	60f8      	str	r0, [r7, #12]
    break;
 800664e:	e112      	b.n	8006876 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	7c1b      	ldrb	r3, [r3, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10d      	bne.n	8006674 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006660:	f107 0208 	add.w	r2, r7, #8
 8006664:	4610      	mov	r0, r2
 8006666:	4798      	blx	r3
 8006668:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	3301      	adds	r3, #1
 800666e:	2202      	movs	r2, #2
 8006670:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006672:	e100      	b.n	8006876 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	f107 0208 	add.w	r2, r7, #8
 8006680:	4610      	mov	r0, r2
 8006682:	4798      	blx	r3
 8006684:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	3301      	adds	r3, #1
 800668a:	2202      	movs	r2, #2
 800668c:	701a      	strb	r2, [r3, #0]
    break;
 800668e:	e0f2      	b.n	8006876 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	885b      	ldrh	r3, [r3, #2]
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b05      	cmp	r3, #5
 8006698:	f200 80ac 	bhi.w	80067f4 <USBD_GetDescriptor+0x204>
 800669c:	a201      	add	r2, pc, #4	; (adr r2, 80066a4 <USBD_GetDescriptor+0xb4>)
 800669e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a2:	bf00      	nop
 80066a4:	080066bd 	.word	0x080066bd
 80066a8:	080066f1 	.word	0x080066f1
 80066ac:	08006725 	.word	0x08006725
 80066b0:	08006759 	.word	0x08006759
 80066b4:	0800678d 	.word	0x0800678d
 80066b8:	080067c1 	.word	0x080067c1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00b      	beq.n	80066e0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	7c12      	ldrb	r2, [r2, #16]
 80066d4:	f107 0108 	add.w	r1, r7, #8
 80066d8:	4610      	mov	r0, r2
 80066da:	4798      	blx	r3
 80066dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80066de:	e091      	b.n	8006804 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 faaa 	bl	8006c3c <USBD_CtlError>
        err++;
 80066e8:	7afb      	ldrb	r3, [r7, #11]
 80066ea:	3301      	adds	r3, #1
 80066ec:	72fb      	strb	r3, [r7, #11]
      break;
 80066ee:	e089      	b.n	8006804 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00b      	beq.n	8006714 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	7c12      	ldrb	r2, [r2, #16]
 8006708:	f107 0108 	add.w	r1, r7, #8
 800670c:	4610      	mov	r0, r2
 800670e:	4798      	blx	r3
 8006710:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006712:	e077      	b.n	8006804 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fa90 	bl	8006c3c <USBD_CtlError>
        err++;
 800671c:	7afb      	ldrb	r3, [r7, #11]
 800671e:	3301      	adds	r3, #1
 8006720:	72fb      	strb	r3, [r7, #11]
      break;
 8006722:	e06f      	b.n	8006804 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00b      	beq.n	8006748 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	7c12      	ldrb	r2, [r2, #16]
 800673c:	f107 0108 	add.w	r1, r7, #8
 8006740:	4610      	mov	r0, r2
 8006742:	4798      	blx	r3
 8006744:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006746:	e05d      	b.n	8006804 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fa76 	bl	8006c3c <USBD_CtlError>
        err++;
 8006750:	7afb      	ldrb	r3, [r7, #11]
 8006752:	3301      	adds	r3, #1
 8006754:	72fb      	strb	r3, [r7, #11]
      break;
 8006756:	e055      	b.n	8006804 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00b      	beq.n	800677c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	7c12      	ldrb	r2, [r2, #16]
 8006770:	f107 0108 	add.w	r1, r7, #8
 8006774:	4610      	mov	r0, r2
 8006776:	4798      	blx	r3
 8006778:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800677a:	e043      	b.n	8006804 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800677c:	6839      	ldr	r1, [r7, #0]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fa5c 	bl	8006c3c <USBD_CtlError>
        err++;
 8006784:	7afb      	ldrb	r3, [r7, #11]
 8006786:	3301      	adds	r3, #1
 8006788:	72fb      	strb	r3, [r7, #11]
      break;
 800678a:	e03b      	b.n	8006804 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00b      	beq.n	80067b0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	7c12      	ldrb	r2, [r2, #16]
 80067a4:	f107 0108 	add.w	r1, r7, #8
 80067a8:	4610      	mov	r0, r2
 80067aa:	4798      	blx	r3
 80067ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067ae:	e029      	b.n	8006804 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fa42 	bl	8006c3c <USBD_CtlError>
        err++;
 80067b8:	7afb      	ldrb	r3, [r7, #11]
 80067ba:	3301      	adds	r3, #1
 80067bc:	72fb      	strb	r3, [r7, #11]
      break;
 80067be:	e021      	b.n	8006804 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00b      	beq.n	80067e4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	7c12      	ldrb	r2, [r2, #16]
 80067d8:	f107 0108 	add.w	r1, r7, #8
 80067dc:	4610      	mov	r0, r2
 80067de:	4798      	blx	r3
 80067e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067e2:	e00f      	b.n	8006804 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fa28 	bl	8006c3c <USBD_CtlError>
        err++;
 80067ec:	7afb      	ldrb	r3, [r7, #11]
 80067ee:	3301      	adds	r3, #1
 80067f0:	72fb      	strb	r3, [r7, #11]
      break;
 80067f2:	e007      	b.n	8006804 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80067f4:	6839      	ldr	r1, [r7, #0]
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fa20 	bl	8006c3c <USBD_CtlError>
      err++;
 80067fc:	7afb      	ldrb	r3, [r7, #11]
 80067fe:	3301      	adds	r3, #1
 8006800:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006802:	bf00      	nop
    }
    break;
 8006804:	e037      	b.n	8006876 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	7c1b      	ldrb	r3, [r3, #16]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d109      	bne.n	8006822 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006816:	f107 0208 	add.w	r2, r7, #8
 800681a:	4610      	mov	r0, r2
 800681c:	4798      	blx	r3
 800681e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006820:	e029      	b.n	8006876 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fa09 	bl	8006c3c <USBD_CtlError>
      err++;
 800682a:	7afb      	ldrb	r3, [r7, #11]
 800682c:	3301      	adds	r3, #1
 800682e:	72fb      	strb	r3, [r7, #11]
    break;
 8006830:	e021      	b.n	8006876 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	7c1b      	ldrb	r3, [r3, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10d      	bne.n	8006856 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006842:	f107 0208 	add.w	r2, r7, #8
 8006846:	4610      	mov	r0, r2
 8006848:	4798      	blx	r3
 800684a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3301      	adds	r3, #1
 8006850:	2207      	movs	r2, #7
 8006852:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006854:	e00f      	b.n	8006876 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f9ef 	bl	8006c3c <USBD_CtlError>
      err++;
 800685e:	7afb      	ldrb	r3, [r7, #11]
 8006860:	3301      	adds	r3, #1
 8006862:	72fb      	strb	r3, [r7, #11]
    break;
 8006864:	e007      	b.n	8006876 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006866:	6839      	ldr	r1, [r7, #0]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f9e7 	bl	8006c3c <USBD_CtlError>
    err++;
 800686e:	7afb      	ldrb	r3, [r7, #11]
 8006870:	3301      	adds	r3, #1
 8006872:	72fb      	strb	r3, [r7, #11]
    break;
 8006874:	bf00      	nop
  }

  if (err != 0U)
 8006876:	7afb      	ldrb	r3, [r7, #11]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d11e      	bne.n	80068ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	88db      	ldrh	r3, [r3, #6]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d016      	beq.n	80068b2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006884:	893b      	ldrh	r3, [r7, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00e      	beq.n	80068a8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	88da      	ldrh	r2, [r3, #6]
 800688e:	893b      	ldrh	r3, [r7, #8]
 8006890:	4293      	cmp	r3, r2
 8006892:	bf28      	it	cs
 8006894:	4613      	movcs	r3, r2
 8006896:	b29b      	uxth	r3, r3
 8006898:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800689a:	893b      	ldrh	r3, [r7, #8]
 800689c:	461a      	mov	r2, r3
 800689e:	68f9      	ldr	r1, [r7, #12]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fa3c 	bl	8006d1e <USBD_CtlSendData>
 80068a6:	e009      	b.n	80068bc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f9c6 	bl	8006c3c <USBD_CtlError>
 80068b0:	e004      	b.n	80068bc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fa70 	bl	8006d98 <USBD_CtlSendStatus>
 80068b8:	e000      	b.n	80068bc <USBD_GetDescriptor+0x2cc>
    return;
 80068ba:	bf00      	nop
    }
  }
}
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop

080068c4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	889b      	ldrh	r3, [r3, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d130      	bne.n	8006938 <USBD_SetAddress+0x74>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	88db      	ldrh	r3, [r3, #6]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d12c      	bne.n	8006938 <USBD_SetAddress+0x74>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	885b      	ldrh	r3, [r3, #2]
 80068e2:	2b7f      	cmp	r3, #127	; 0x7f
 80068e4:	d828      	bhi.n	8006938 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	885b      	ldrh	r3, [r3, #2]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d104      	bne.n	8006906 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f99c 	bl	8006c3c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006904:	e01c      	b.n	8006940 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	7bfa      	ldrb	r2, [r7, #15]
 800690a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800690e:	7bfb      	ldrb	r3, [r7, #15]
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 ff80 	bl	8007818 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fa3d 	bl	8006d98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d004      	beq.n	800692e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2202      	movs	r2, #2
 8006928:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800692c:	e008      	b.n	8006940 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006936:	e003      	b.n	8006940 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f97e 	bl	8006c3c <USBD_CtlError>
  }
}
 8006940:	bf00      	nop
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	885b      	ldrh	r3, [r3, #2]
 800695a:	b2da      	uxtb	r2, r3
 800695c:	4b4b      	ldr	r3, [pc, #300]	; (8006a8c <USBD_SetConfig+0x144>)
 800695e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006960:	4b4a      	ldr	r3, [pc, #296]	; (8006a8c <USBD_SetConfig+0x144>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d905      	bls.n	8006974 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f966 	bl	8006c3c <USBD_CtlError>
    return USBD_FAIL;
 8006970:	2303      	movs	r3, #3
 8006972:	e087      	b.n	8006a84 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800697a:	2b02      	cmp	r3, #2
 800697c:	d002      	beq.n	8006984 <USBD_SetConfig+0x3c>
 800697e:	2b03      	cmp	r3, #3
 8006980:	d025      	beq.n	80069ce <USBD_SetConfig+0x86>
 8006982:	e071      	b.n	8006a68 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006984:	4b41      	ldr	r3, [pc, #260]	; (8006a8c <USBD_SetConfig+0x144>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01c      	beq.n	80069c6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800698c:	4b3f      	ldr	r3, [pc, #252]	; (8006a8c <USBD_SetConfig+0x144>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	461a      	mov	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006996:	4b3d      	ldr	r3, [pc, #244]	; (8006a8c <USBD_SetConfig+0x144>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff f9a7 	bl	8005cf0 <USBD_SetClassConfig>
 80069a2:	4603      	mov	r3, r0
 80069a4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d004      	beq.n	80069b6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f944 	bl	8006c3c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80069b4:	e065      	b.n	8006a82 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f9ee 	bl	8006d98 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2203      	movs	r2, #3
 80069c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80069c4:	e05d      	b.n	8006a82 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f9e6 	bl	8006d98 <USBD_CtlSendStatus>
    break;
 80069cc:	e059      	b.n	8006a82 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80069ce:	4b2f      	ldr	r3, [pc, #188]	; (8006a8c <USBD_SetConfig+0x144>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d112      	bne.n	80069fc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2202      	movs	r2, #2
 80069da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80069de:	4b2b      	ldr	r3, [pc, #172]	; (8006a8c <USBD_SetConfig+0x144>)
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069e8:	4b28      	ldr	r3, [pc, #160]	; (8006a8c <USBD_SetConfig+0x144>)
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff f99a 	bl	8005d28 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f9cf 	bl	8006d98 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80069fa:	e042      	b.n	8006a82 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80069fc:	4b23      	ldr	r3, [pc, #140]	; (8006a8c <USBD_SetConfig+0x144>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d02a      	beq.n	8006a60 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7ff f988 	bl	8005d28 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006a18:	4b1c      	ldr	r3, [pc, #112]	; (8006a8c <USBD_SetConfig+0x144>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a22:	4b1a      	ldr	r3, [pc, #104]	; (8006a8c <USBD_SetConfig+0x144>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff f961 	bl	8005cf0 <USBD_SetClassConfig>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00f      	beq.n	8006a58 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f8fe 	bl	8006c3c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff f96d 	bl	8005d28 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2202      	movs	r2, #2
 8006a52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006a56:	e014      	b.n	8006a82 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f99d 	bl	8006d98 <USBD_CtlSendStatus>
    break;
 8006a5e:	e010      	b.n	8006a82 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f999 	bl	8006d98 <USBD_CtlSendStatus>
    break;
 8006a66:	e00c      	b.n	8006a82 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f8e6 	bl	8006c3c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a70:	4b06      	ldr	r3, [pc, #24]	; (8006a8c <USBD_SetConfig+0x144>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	4619      	mov	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff f956 	bl	8005d28 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	73fb      	strb	r3, [r7, #15]
    break;
 8006a80:	bf00      	nop
  }

  return ret;
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	200002d1 	.word	0x200002d1

08006a90 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	88db      	ldrh	r3, [r3, #6]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d004      	beq.n	8006aac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f8c9 	bl	8006c3c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006aaa:	e021      	b.n	8006af0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	db17      	blt.n	8006ae6 <USBD_GetConfig+0x56>
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	dd02      	ble.n	8006ac0 <USBD_GetConfig+0x30>
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d00b      	beq.n	8006ad6 <USBD_GetConfig+0x46>
 8006abe:	e012      	b.n	8006ae6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	3308      	adds	r3, #8
 8006aca:	2201      	movs	r2, #1
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f925 	bl	8006d1e <USBD_CtlSendData>
      break;
 8006ad4:	e00c      	b.n	8006af0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	3304      	adds	r3, #4
 8006ada:	2201      	movs	r2, #1
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f91d 	bl	8006d1e <USBD_CtlSendData>
      break;
 8006ae4:	e004      	b.n	8006af0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f8a7 	bl	8006c3c <USBD_CtlError>
      break;
 8006aee:	bf00      	nop
}
 8006af0:	bf00      	nop
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d81e      	bhi.n	8006b4c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	88db      	ldrh	r3, [r3, #6]
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d004      	beq.n	8006b20 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f88f 	bl	8006c3c <USBD_CtlError>
      break;
 8006b1e:	e01a      	b.n	8006b56 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d005      	beq.n	8006b3c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f043 0202 	orr.w	r2, r3, #2
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	330c      	adds	r3, #12
 8006b40:	2202      	movs	r2, #2
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f8ea 	bl	8006d1e <USBD_CtlSendData>
    break;
 8006b4a:	e004      	b.n	8006b56 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f874 	bl	8006c3c <USBD_CtlError>
    break;
 8006b54:	bf00      	nop
  }
}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b082      	sub	sp, #8
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	885b      	ldrh	r3, [r3, #2]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d106      	bne.n	8006b7e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f90d 	bl	8006d98 <USBD_CtlSendStatus>
  }
}
 8006b7e:	bf00      	nop
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b96:	3b01      	subs	r3, #1
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d80b      	bhi.n	8006bb4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	885b      	ldrh	r3, [r3, #2]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d10c      	bne.n	8006bbe <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f8f3 	bl	8006d98 <USBD_CtlSendStatus>
      }
      break;
 8006bb2:	e004      	b.n	8006bbe <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006bb4:	6839      	ldr	r1, [r7, #0]
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f840 	bl	8006c3c <USBD_CtlError>
      break;
 8006bbc:	e000      	b.n	8006bc0 <USBD_ClrFeature+0x3a>
      break;
 8006bbe:	bf00      	nop
  }
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	781a      	ldrb	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3301      	adds	r3, #1
 8006be2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	781a      	ldrb	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f7ff fad3 	bl	800619e <SWAPBYTE>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	3301      	adds	r3, #1
 8006c04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f7ff fac6 	bl	800619e <SWAPBYTE>
 8006c12:	4603      	mov	r3, r0
 8006c14:	461a      	mov	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3301      	adds	r3, #1
 8006c24:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7ff fab9 	bl	800619e <SWAPBYTE>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	461a      	mov	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	80da      	strh	r2, [r3, #6]
}
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c46:	2180      	movs	r1, #128	; 0x80
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fd7b 	bl	8007744 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c4e:	2100      	movs	r1, #0
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fd77 	bl	8007744 <USBD_LL_StallEP>
}
 8006c56:	bf00      	nop
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b086      	sub	sp, #24
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d036      	beq.n	8006ce2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c78:	6938      	ldr	r0, [r7, #16]
 8006c7a:	f000 f836 	bl	8006cea <USBD_GetLen>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	3301      	adds	r3, #1
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	4413      	add	r3, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	7812      	ldrb	r2, [r2, #0]
 8006c96:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	2203      	movs	r2, #3
 8006ca6:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	3301      	adds	r3, #1
 8006cac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006cae:	e013      	b.n	8006cd8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006cb0:	7dfb      	ldrb	r3, [r7, #23]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	7812      	ldrb	r2, [r2, #0]
 8006cba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	613b      	str	r3, [r7, #16]
    idx++;
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	4413      	add	r3, r2
 8006cce:	2200      	movs	r2, #0
 8006cd0:	701a      	strb	r2, [r3, #0]
    idx++;
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e7      	bne.n	8006cb0 <USBD_GetString+0x52>
 8006ce0:	e000      	b.n	8006ce4 <USBD_GetString+0x86>
    return;
 8006ce2:	bf00      	nop
  }
}
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b085      	sub	sp, #20
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006cfa:	e005      	b.n	8006d08 <USBD_GetLen+0x1e>
  {
    len++;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	3301      	adds	r3, #1
 8006d06:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1f5      	bne.n	8006cfc <USBD_GetLen+0x12>
  }

  return len;
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	2100      	movs	r1, #0
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 fd86 	bl	8007856 <USBD_LL_Transmit>

  return USBD_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	2100      	movs	r1, #0
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f000 fd75 	bl	8007856 <USBD_LL_Transmit>

  return USBD_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	2100      	movs	r1, #0
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f000 fd85 	bl	8007898 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2204      	movs	r2, #4
 8006da4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006da8:	2300      	movs	r3, #0
 8006daa:	2200      	movs	r2, #0
 8006dac:	2100      	movs	r1, #0
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fd51 	bl	8007856 <USBD_LL_Transmit>

  return USBD_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2205      	movs	r2, #5
 8006dca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dce:	2300      	movs	r3, #0
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fd5f 	bl	8007898 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006de8:	2200      	movs	r2, #0
 8006dea:	4912      	ldr	r1, [pc, #72]	; (8006e34 <MX_USB_DEVICE_Init+0x50>)
 8006dec:	4812      	ldr	r0, [pc, #72]	; (8006e38 <MX_USB_DEVICE_Init+0x54>)
 8006dee:	f7fe ff11 	bl	8005c14 <USBD_Init>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006df8:	f7f9 fe10 	bl	8000a1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8006dfc:	490f      	ldr	r1, [pc, #60]	; (8006e3c <MX_USB_DEVICE_Init+0x58>)
 8006dfe:	480e      	ldr	r0, [pc, #56]	; (8006e38 <MX_USB_DEVICE_Init+0x54>)
 8006e00:	f7fe ff3e 	bl	8005c80 <USBD_RegisterClass>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e0a:	f7f9 fe07 	bl	8000a1c <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 8006e0e:	490c      	ldr	r1, [pc, #48]	; (8006e40 <MX_USB_DEVICE_Init+0x5c>)
 8006e10:	4809      	ldr	r0, [pc, #36]	; (8006e38 <MX_USB_DEVICE_Init+0x54>)
 8006e12:	f7fe fe7d 	bl	8005b10 <USBD_AUDIO_RegisterInterface>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e1c:	f7f9 fdfe 	bl	8000a1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e20:	4805      	ldr	r0, [pc, #20]	; (8006e38 <MX_USB_DEVICE_Init+0x54>)
 8006e22:	f7fe ff4e 	bl	8005cc2 <USBD_Start>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e2c:	f7f9 fdf6 	bl	8000a1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e30:	bf00      	nop
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	200000ec 	.word	0x200000ec
 8006e38:	20000d50 	.word	0x20000d50
 8006e3c:	2000000c 	.word	0x2000000c
 8006e40:	200000d8 	.word	0x200000d8

08006e44 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use 
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8006e50:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 8006e66:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */

  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8006e82:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <MIDI_DataTx_FS>:

//fill midi tx buffer
static uint8_t MIDI_DataTx_FS(uint8_t *msg, uint16_t length)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	460b      	mov	r3, r1
 8006e9a:	807b      	strh	r3, [r7, #2]
  uint16_t i = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	81fb      	strh	r3, [r7, #14]
  while (i < length) {
 8006ea0:	e017      	b.n	8006ed2 <MIDI_DataTx_FS+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 8006ea2:	89fb      	ldrh	r3, [r7, #14]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	441a      	add	r2, r3
 8006ea8:	4b0f      	ldr	r3, [pc, #60]	; (8006ee8 <MIDI_DataTx_FS+0x58>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	7811      	ldrb	r1, [r2, #0]
 8006eae:	4a0f      	ldr	r2, [pc, #60]	; (8006eec <MIDI_DataTx_FS+0x5c>)
 8006eb0:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <MIDI_DataTx_FS+0x58>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	4a0b      	ldr	r2, [pc, #44]	; (8006ee8 <MIDI_DataTx_FS+0x58>)
 8006eba:	6013      	str	r3, [r2, #0]
    i++;
 8006ebc:	89fb      	ldrh	r3, [r7, #14]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	81fb      	strh	r3, [r7, #14]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 8006ec2:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <MIDI_DataTx_FS+0x58>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eca:	d102      	bne.n	8006ed2 <MIDI_DataTx_FS+0x42>
      APP_Rx_ptr_in = 0;
 8006ecc:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <MIDI_DataTx_FS+0x58>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	601a      	str	r2, [r3, #0]
  while (i < length) {
 8006ed2:	89fa      	ldrh	r2, [r7, #14]
 8006ed4:	887b      	ldrh	r3, [r7, #2]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d3e3      	bcc.n	8006ea2 <MIDI_DataTx_FS+0x12>
    }
  }
  return (USBD_OK);
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	200002c4 	.word	0x200002c4
 8006eec:	20000550 	.word	0x20000550

08006ef0 <MIDI_DataRx_FS>:


//process recived midi data
static uint8_t MIDI_DataRx_FS(uint8_t* msg, uint16_t length)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	807b      	strh	r3, [r7, #2]
  //uint16_t chk = length % 4; //if (chk != 0) return;
  //uint16_t *pid;
  //uint8_t *pbuf;
  tUsbMidiCable* pcable;

  for (cnt = 0; cnt < length; cnt += 4)
 8006efc:	2300      	movs	r3, #0
 8006efe:	81fb      	strh	r3, [r7, #14]
 8006f00:	e0bb      	b.n	800707a <MIDI_DataRx_FS+0x18a>
  {
    switch ( msg[cnt] >> 4 ) {
 8006f02:	89fb      	ldrh	r3, [r7, #14]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	4413      	add	r3, r2
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	091b      	lsrs	r3, r3, #4
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <MIDI_DataRx_FS+0x28>
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d003      	beq.n	8006f1e <MIDI_DataRx_FS+0x2e>
      break;
    case 1:
      pcable = &usbmidicable2;
      break;
    default:
      continue;
 8006f16:	e0ad      	b.n	8007074 <MIDI_DataRx_FS+0x184>
      pcable = &usbmidicable1;
 8006f18:	4b5e      	ldr	r3, [pc, #376]	; (8007094 <MIDI_DataRx_FS+0x1a4>)
 8006f1a:	60bb      	str	r3, [r7, #8]
      break;
 8006f1c:	e002      	b.n	8006f24 <MIDI_DataRx_FS+0x34>
      pcable = &usbmidicable2;
 8006f1e:	4b5e      	ldr	r3, [pc, #376]	; (8007098 <MIDI_DataRx_FS+0x1a8>)
 8006f20:	60bb      	str	r3, [r7, #8]
      break;
 8006f22:	bf00      	nop
    };

    switch ( msg[cnt] & 0x0F ) {
 8006f24:	89fb      	ldrh	r3, [r7, #14]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	4413      	add	r3, r2
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	f003 030f 	and.w	r3, r3, #15
 8006f30:	2b0f      	cmp	r3, #15
 8006f32:	d861      	bhi.n	8006ff8 <MIDI_DataRx_FS+0x108>
 8006f34:	a201      	add	r2, pc, #4	; (adr r2, 8006f3c <MIDI_DataRx_FS+0x4c>)
 8006f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3a:	bf00      	nop
 8006f3c:	08007073 	.word	0x08007073
 8006f40:	08007073 	.word	0x08007073
 8006f44:	08006fa7 	.word	0x08006fa7
 8006f48:	08006ff9 	.word	0x08006ff9
 8006f4c:	08006ff9 	.word	0x08006ff9
 8006f50:	08006f7d 	.word	0x08006f7d
 8006f54:	08006fa7 	.word	0x08006fa7
 8006f58:	08006ff9 	.word	0x08006ff9
 8006f5c:	08006ff9 	.word	0x08006ff9
 8006f60:	08006ff9 	.word	0x08006ff9
 8006f64:	08006ff9 	.word	0x08006ff9
 8006f68:	08006ff9 	.word	0x08006ff9
 8006f6c:	08006fa7 	.word	0x08006fa7
 8006f70:	08006fa7 	.word	0x08006fa7
 8006f74:	08006ff9 	.word	0x08006ff9
 8006f78:	08006f7d 	.word	0x08006f7d
    case 0x0:
    case 0x1:
      continue;
    case 0x5:
    case 0xF:
      pcable->buf[ pcable->curidx ] = msg[ cnt+1 ];
 8006f7c:	89fb      	ldrh	r3, [r7, #14]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	4413      	add	r3, r2
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	8812      	ldrh	r2, [r2, #0]
 8006f88:	4611      	mov	r1, r2
 8006f8a:	781a      	ldrb	r2, [r3, #0]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	440b      	add	r3, r1
 8006f90:	711a      	strb	r2, [r3, #4]
      pcable->curidx = NEXTBYTE(pcable->curidx, USBMIDIMASK);
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	3301      	adds	r3, #1
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	801a      	strh	r2, [r3, #0]
      break;
 8006fa4:	e066      	b.n	8007074 <MIDI_DataRx_FS+0x184>
    case 0x2:
    case 0x6:
    case 0xC:
    case 0xD:
      pcable->buf[ pcable->curidx ] = msg[ cnt+1 ];
 8006fa6:	89fb      	ldrh	r3, [r7, #14]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	4413      	add	r3, r2
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	8812      	ldrh	r2, [r2, #0]
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	781a      	ldrb	r2, [r3, #0]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	440b      	add	r3, r1
 8006fba:	711a      	strb	r2, [r3, #4]
      pcable->curidx = NEXTBYTE(pcable->curidx, USBMIDIMASK);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	801a      	strh	r2, [r3, #0]
      pcable->buf[ pcable->curidx ] = msg[ cnt+2 ];
 8006fce:	89fb      	ldrh	r3, [r7, #14]
 8006fd0:	3302      	adds	r3, #2
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	8812      	ldrh	r2, [r2, #0]
 8006fda:	4611      	mov	r1, r2
 8006fdc:	781a      	ldrb	r2, [r3, #0]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	440b      	add	r3, r1
 8006fe2:	711a      	strb	r2, [r3, #4]
      pcable->curidx = NEXTBYTE(pcable->curidx, USBMIDIMASK);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	801a      	strh	r2, [r3, #0]
      break;
 8006ff6:	e03d      	b.n	8007074 <MIDI_DataRx_FS+0x184>
    default:
      pcable->buf[ pcable->curidx ] = msg[ cnt+1 ];
 8006ff8:	89fb      	ldrh	r3, [r7, #14]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	4413      	add	r3, r2
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	8812      	ldrh	r2, [r2, #0]
 8007004:	4611      	mov	r1, r2
 8007006:	781a      	ldrb	r2, [r3, #0]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	440b      	add	r3, r1
 800700c:	711a      	strb	r2, [r3, #4]
      pcable->curidx = NEXTBYTE(pcable->curidx, USBMIDIMASK);
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	881b      	ldrh	r3, [r3, #0]
 8007012:	3301      	adds	r3, #1
 8007014:	b29b      	uxth	r3, r3
 8007016:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800701a:	b29a      	uxth	r2, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	801a      	strh	r2, [r3, #0]
      pcable->buf[ pcable->curidx ] = msg[ cnt+2 ];
 8007020:	89fb      	ldrh	r3, [r7, #14]
 8007022:	3302      	adds	r3, #2
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	4413      	add	r3, r2
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	8812      	ldrh	r2, [r2, #0]
 800702c:	4611      	mov	r1, r2
 800702e:	781a      	ldrb	r2, [r3, #0]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	440b      	add	r3, r1
 8007034:	711a      	strb	r2, [r3, #4]
      pcable->curidx = NEXTBYTE(pcable->curidx, USBMIDIMASK);
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	3301      	adds	r3, #1
 800703c:	b29b      	uxth	r3, r3
 800703e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007042:	b29a      	uxth	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	801a      	strh	r2, [r3, #0]
      pcable->buf[ pcable->curidx ] = msg[ cnt+3 ];
 8007048:	89fb      	ldrh	r3, [r7, #14]
 800704a:	3303      	adds	r3, #3
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	4413      	add	r3, r2
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	8812      	ldrh	r2, [r2, #0]
 8007054:	4611      	mov	r1, r2
 8007056:	781a      	ldrb	r2, [r3, #0]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	440b      	add	r3, r1
 800705c:	711a      	strb	r2, [r3, #4]
      pcable->curidx = NEXTBYTE(pcable->curidx, USBMIDIMASK);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	3301      	adds	r3, #1
 8007064:	b29b      	uxth	r3, r3
 8007066:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800706a:	b29a      	uxth	r2, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	801a      	strh	r2, [r3, #0]
      break;
 8007070:	e000      	b.n	8007074 <MIDI_DataRx_FS+0x184>
      continue;
 8007072:	bf00      	nop
  for (cnt = 0; cnt < length; cnt += 4)
 8007074:	89fb      	ldrh	r3, [r7, #14]
 8007076:	3304      	adds	r3, #4
 8007078:	81fb      	strh	r3, [r7, #14]
 800707a:	89fa      	ldrh	r2, [r7, #14]
 800707c:	887b      	ldrh	r3, [r7, #2]
 800707e:	429a      	cmp	r2, r3
 8007080:	f4ff af3f 	bcc.w	8006f02 <MIDI_DataRx_FS+0x12>
    };
  };

  return (USBD_OK);
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20001824 	.word	0x20001824
 8007098:	20001020 	.word	0x20001020

0800709c <USBD_SendMidiMessages>:

void USBD_SendMidiMessages(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
  if (hUsbDeviceFS.dev_state == USBD_STATE_CONFIGURED)
 80070a0:	4b0a      	ldr	r3, [pc, #40]	; (80070cc <USBD_SendMidiMessages+0x30>)
 80070a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d10a      	bne.n	80070c0 <USBD_SendMidiMessages+0x24>
  {
    if (!USB_Tx_State)
 80070aa:	4b09      	ldr	r3, [pc, #36]	; (80070d0 <USBD_SendMidiMessages+0x34>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d102      	bne.n	80070b8 <USBD_SendMidiMessages+0x1c>
      USBD_MIDI_SendPacket();
 80070b2:	f7fe fd43 	bl	8005b3c <USBD_MIDI_SendPacket>
  }
  else
  {
      USB_Tx_State = USB_TX_READY;
  }
}
 80070b6:	e006      	b.n	80070c6 <USBD_SendMidiMessages+0x2a>
      USB_Tx_State = USB_TX_CONTINUE;
 80070b8:	4b05      	ldr	r3, [pc, #20]	; (80070d0 <USBD_SendMidiMessages+0x34>)
 80070ba:	2202      	movs	r2, #2
 80070bc:	701a      	strb	r2, [r3, #0]
}
 80070be:	e002      	b.n	80070c6 <USBD_SendMidiMessages+0x2a>
      USB_Tx_State = USB_TX_READY;
 80070c0:	4b03      	ldr	r3, [pc, #12]	; (80070d0 <USBD_SendMidiMessages+0x34>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	701a      	strb	r2, [r3, #0]
}
 80070c6:	bf00      	nop
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	20000d50 	.word	0x20000d50
 80070d0:	200002d0 	.word	0x200002d0

080070d4 <USBD_AddNoteOn>:


/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void USBD_AddNoteOn(uint8_t cable, uint8_t ch, uint8_t note, uint8_t vel)
{
 80070d4:	b590      	push	{r4, r7, lr}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4604      	mov	r4, r0
 80070dc:	4608      	mov	r0, r1
 80070de:	4611      	mov	r1, r2
 80070e0:	461a      	mov	r2, r3
 80070e2:	4623      	mov	r3, r4
 80070e4:	71fb      	strb	r3, [r7, #7]
 80070e6:	4603      	mov	r3, r0
 80070e8:	71bb      	strb	r3, [r7, #6]
 80070ea:	460b      	mov	r3, r1
 80070ec:	717b      	strb	r3, [r7, #5]
 80070ee:	4613      	mov	r3, r2
 80070f0:	713b      	strb	r3, [r7, #4]
  //uint8_t cable = 0;
  uint8_t txbuf[4];

  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED) return;
 80070f2:	4b13      	ldr	r3, [pc, #76]	; (8007140 <USBD_AddNoteOn+0x6c>)
 80070f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d11c      	bne.n	8007136 <USBD_AddNoteOn+0x62>
  cable <<= 4;
 80070fc:	79fb      	ldrb	r3, [r7, #7]
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	71fb      	strb	r3, [r7, #7]
  txbuf[0] = cable + 0x9;
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	3309      	adds	r3, #9
 8007106:	b2db      	uxtb	r3, r3
 8007108:	733b      	strb	r3, [r7, #12]
  txbuf[1] = 0x90 | ch;
 800710a:	79bb      	ldrb	r3, [r7, #6]
 800710c:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8007110:	b2db      	uxtb	r3, r3
 8007112:	737b      	strb	r3, [r7, #13]
  txbuf[2] = 0x7F & note;
 8007114:	797b      	ldrb	r3, [r7, #5]
 8007116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800711a:	b2db      	uxtb	r3, r3
 800711c:	73bb      	strb	r3, [r7, #14]
  txbuf[3] = 0x7F & vel;
 800711e:	793b      	ldrb	r3, [r7, #4]
 8007120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007124:	b2db      	uxtb	r3, r3
 8007126:	73fb      	strb	r3, [r7, #15]
  MIDI_DataTx_FS(txbuf, 4);
 8007128:	f107 030c 	add.w	r3, r7, #12
 800712c:	2104      	movs	r1, #4
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff feae 	bl	8006e90 <MIDI_DataTx_FS>
 8007134:	e000      	b.n	8007138 <USBD_AddNoteOn+0x64>
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED) return;
 8007136:	bf00      	nop
}
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	bd90      	pop	{r4, r7, pc}
 800713e:	bf00      	nop
 8007140:	20000d50 	.word	0x20000d50

08007144 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	6039      	str	r1, [r7, #0]
 800714e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2212      	movs	r2, #18
 8007154:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007156:	4b03      	ldr	r3, [pc, #12]	; (8007164 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007158:	4618      	mov	r0, r3
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr
 8007164:	20000108 	.word	0x20000108

08007168 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	6039      	str	r1, [r7, #0]
 8007172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2204      	movs	r2, #4
 8007178:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800717a:	4b03      	ldr	r3, [pc, #12]	; (8007188 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	2000011c 	.word	0x2000011c

0800718c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	4603      	mov	r3, r0
 8007194:	6039      	str	r1, [r7, #0]
 8007196:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007198:	79fb      	ldrb	r3, [r7, #7]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d105      	bne.n	80071aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	4907      	ldr	r1, [pc, #28]	; (80071c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80071a2:	4808      	ldr	r0, [pc, #32]	; (80071c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80071a4:	f7ff fd5b 	bl	8006c5e <USBD_GetString>
 80071a8:	e004      	b.n	80071b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	4904      	ldr	r1, [pc, #16]	; (80071c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80071ae:	4805      	ldr	r0, [pc, #20]	; (80071c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80071b0:	f7ff fd55 	bl	8006c5e <USBD_GetString>
  }
  return USBD_StrDesc;
 80071b4:	4b02      	ldr	r3, [pc, #8]	; (80071c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	20002028 	.word	0x20002028
 80071c4:	080079a4 	.word	0x080079a4

080071c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	6039      	str	r1, [r7, #0]
 80071d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	4904      	ldr	r1, [pc, #16]	; (80071e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80071d8:	4804      	ldr	r0, [pc, #16]	; (80071ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071da:	f7ff fd40 	bl	8006c5e <USBD_GetString>
  return USBD_StrDesc;
 80071de:	4b02      	ldr	r3, [pc, #8]	; (80071e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20002028 	.word	0x20002028
 80071ec:	080079b0 	.word	0x080079b0

080071f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	4603      	mov	r3, r0
 80071f8:	6039      	str	r1, [r7, #0]
 80071fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	221a      	movs	r2, #26
 8007200:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007202:	f000 f843 	bl	800728c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007206:	4b02      	ldr	r3, [pc, #8]	; (8007210 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	20000120 	.word	0x20000120

08007214 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	4603      	mov	r3, r0
 800721c:	6039      	str	r1, [r7, #0]
 800721e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007220:	79fb      	ldrb	r3, [r7, #7]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d105      	bne.n	8007232 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	4907      	ldr	r1, [pc, #28]	; (8007248 <USBD_FS_ConfigStrDescriptor+0x34>)
 800722a:	4808      	ldr	r0, [pc, #32]	; (800724c <USBD_FS_ConfigStrDescriptor+0x38>)
 800722c:	f7ff fd17 	bl	8006c5e <USBD_GetString>
 8007230:	e004      	b.n	800723c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	4904      	ldr	r1, [pc, #16]	; (8007248 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007236:	4805      	ldr	r0, [pc, #20]	; (800724c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007238:	f7ff fd11 	bl	8006c5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800723c:	4b02      	ldr	r3, [pc, #8]	; (8007248 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800723e:	4618      	mov	r0, r3
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20002028 	.word	0x20002028
 800724c:	080079bc 	.word	0x080079bc

08007250 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	4603      	mov	r3, r0
 8007258:	6039      	str	r1, [r7, #0]
 800725a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800725c:	79fb      	ldrb	r3, [r7, #7]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d105      	bne.n	800726e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	4907      	ldr	r1, [pc, #28]	; (8007284 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007266:	4808      	ldr	r0, [pc, #32]	; (8007288 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007268:	f7ff fcf9 	bl	8006c5e <USBD_GetString>
 800726c:	e004      	b.n	8007278 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	4904      	ldr	r1, [pc, #16]	; (8007284 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007272:	4805      	ldr	r0, [pc, #20]	; (8007288 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007274:	f7ff fcf3 	bl	8006c5e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007278:	4b02      	ldr	r3, [pc, #8]	; (8007284 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800727a:	4618      	mov	r0, r3
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20002028 	.word	0x20002028
 8007288:	080079c8 	.word	0x080079c8

0800728c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007292:	4b0f      	ldr	r3, [pc, #60]	; (80072d0 <Get_SerialNum+0x44>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007298:	4b0e      	ldr	r3, [pc, #56]	; (80072d4 <Get_SerialNum+0x48>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800729e:	4b0e      	ldr	r3, [pc, #56]	; (80072d8 <Get_SerialNum+0x4c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4413      	add	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d009      	beq.n	80072c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80072b2:	2208      	movs	r2, #8
 80072b4:	4909      	ldr	r1, [pc, #36]	; (80072dc <Get_SerialNum+0x50>)
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 f814 	bl	80072e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80072bc:	2204      	movs	r2, #4
 80072be:	4908      	ldr	r1, [pc, #32]	; (80072e0 <Get_SerialNum+0x54>)
 80072c0:	68b8      	ldr	r0, [r7, #8]
 80072c2:	f000 f80f 	bl	80072e4 <IntToUnicode>
  }
}
 80072c6:	bf00      	nop
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	1fff7a10 	.word	0x1fff7a10
 80072d4:	1fff7a14 	.word	0x1fff7a14
 80072d8:	1fff7a18 	.word	0x1fff7a18
 80072dc:	20000122 	.word	0x20000122
 80072e0:	20000132 	.word	0x20000132

080072e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80072f2:	2300      	movs	r3, #0
 80072f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80072f6:	2300      	movs	r3, #0
 80072f8:	75fb      	strb	r3, [r7, #23]
 80072fa:	e027      	b.n	800734c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	0f1b      	lsrs	r3, r3, #28
 8007300:	2b09      	cmp	r3, #9
 8007302:	d80b      	bhi.n	800731c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	0f1b      	lsrs	r3, r3, #28
 8007308:	b2da      	uxtb	r2, r3
 800730a:	7dfb      	ldrb	r3, [r7, #23]
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	4619      	mov	r1, r3
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	440b      	add	r3, r1
 8007314:	3230      	adds	r2, #48	; 0x30
 8007316:	b2d2      	uxtb	r2, r2
 8007318:	701a      	strb	r2, [r3, #0]
 800731a:	e00a      	b.n	8007332 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	0f1b      	lsrs	r3, r3, #28
 8007320:	b2da      	uxtb	r2, r3
 8007322:	7dfb      	ldrb	r3, [r7, #23]
 8007324:	005b      	lsls	r3, r3, #1
 8007326:	4619      	mov	r1, r3
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	440b      	add	r3, r1
 800732c:	3237      	adds	r2, #55	; 0x37
 800732e:	b2d2      	uxtb	r2, r2
 8007330:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	011b      	lsls	r3, r3, #4
 8007336:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007338:	7dfb      	ldrb	r3, [r7, #23]
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	3301      	adds	r3, #1
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	4413      	add	r3, r2
 8007342:	2200      	movs	r2, #0
 8007344:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007346:	7dfb      	ldrb	r3, [r7, #23]
 8007348:	3301      	adds	r3, #1
 800734a:	75fb      	strb	r3, [r7, #23]
 800734c:	7dfa      	ldrb	r2, [r7, #23]
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	429a      	cmp	r2, r3
 8007352:	d3d3      	bcc.n	80072fc <IntToUnicode+0x18>
  }
}
 8007354:	bf00      	nop
 8007356:	371c      	adds	r7, #28
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b08a      	sub	sp, #40	; 0x28
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007368:	f107 0314 	add.w	r3, r7, #20
 800736c:	2200      	movs	r2, #0
 800736e:	601a      	str	r2, [r3, #0]
 8007370:	605a      	str	r2, [r3, #4]
 8007372:	609a      	str	r2, [r3, #8]
 8007374:	60da      	str	r2, [r3, #12]
 8007376:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007380:	d13a      	bne.n	80073f8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007382:	2300      	movs	r3, #0
 8007384:	613b      	str	r3, [r7, #16]
 8007386:	4b1e      	ldr	r3, [pc, #120]	; (8007400 <HAL_PCD_MspInit+0xa0>)
 8007388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738a:	4a1d      	ldr	r2, [pc, #116]	; (8007400 <HAL_PCD_MspInit+0xa0>)
 800738c:	f043 0301 	orr.w	r3, r3, #1
 8007390:	6313      	str	r3, [r2, #48]	; 0x30
 8007392:	4b1b      	ldr	r3, [pc, #108]	; (8007400 <HAL_PCD_MspInit+0xa0>)
 8007394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	613b      	str	r3, [r7, #16]
 800739c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800739e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80073a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073a4:	2302      	movs	r3, #2
 80073a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073a8:	2300      	movs	r3, #0
 80073aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073ac:	2303      	movs	r3, #3
 80073ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80073b0:	230a      	movs	r3, #10
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073b4:	f107 0314 	add.w	r3, r7, #20
 80073b8:	4619      	mov	r1, r3
 80073ba:	4812      	ldr	r0, [pc, #72]	; (8007404 <HAL_PCD_MspInit+0xa4>)
 80073bc:	f7fa fdc2 	bl	8001f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80073c0:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <HAL_PCD_MspInit+0xa0>)
 80073c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c4:	4a0e      	ldr	r2, [pc, #56]	; (8007400 <HAL_PCD_MspInit+0xa0>)
 80073c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ca:	6353      	str	r3, [r2, #52]	; 0x34
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	4b0b      	ldr	r3, [pc, #44]	; (8007400 <HAL_PCD_MspInit+0xa0>)
 80073d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d4:	4a0a      	ldr	r2, [pc, #40]	; (8007400 <HAL_PCD_MspInit+0xa0>)
 80073d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073da:	6453      	str	r3, [r2, #68]	; 0x44
 80073dc:	4b08      	ldr	r3, [pc, #32]	; (8007400 <HAL_PCD_MspInit+0xa0>)
 80073de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80073e8:	2200      	movs	r2, #0
 80073ea:	2100      	movs	r1, #0
 80073ec:	2043      	movs	r0, #67	; 0x43
 80073ee:	f7fa fa20 	bl	8001832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80073f2:	2043      	movs	r0, #67	; 0x43
 80073f4:	f7fa fa39 	bl	800186a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80073f8:	bf00      	nop
 80073fa:	3728      	adds	r7, #40	; 0x28
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	40023800 	.word	0x40023800
 8007404:	40020000 	.word	0x40020000

08007408 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800741c:	4619      	mov	r1, r3
 800741e:	4610      	mov	r0, r2
 8007420:	f7fe fc9a 	bl	8005d58 <USBD_LL_SetupStage>
}
 8007424:	bf00      	nop
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800743e:	78fa      	ldrb	r2, [r7, #3]
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	4613      	mov	r3, r2
 8007444:	00db      	lsls	r3, r3, #3
 8007446:	1a9b      	subs	r3, r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	440b      	add	r3, r1
 800744c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	78fb      	ldrb	r3, [r7, #3]
 8007454:	4619      	mov	r1, r3
 8007456:	f7fe fcd2 	bl	8005dfe <USBD_LL_DataOutStage>
}
 800745a:	bf00      	nop
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b082      	sub	sp, #8
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	460b      	mov	r3, r1
 800746c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007474:	78fa      	ldrb	r2, [r7, #3]
 8007476:	6879      	ldr	r1, [r7, #4]
 8007478:	4613      	mov	r3, r2
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	1a9b      	subs	r3, r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	440b      	add	r3, r1
 8007482:	3348      	adds	r3, #72	; 0x48
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	78fb      	ldrb	r3, [r7, #3]
 8007488:	4619      	mov	r1, r3
 800748a:	f7fe fd1b 	bl	8005ec4 <USBD_LL_DataInStage>
}
 800748e:	bf00      	nop
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b082      	sub	sp, #8
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fe fe1f 	bl	80060e8 <USBD_LL_SOF>
}
 80074aa:	bf00      	nop
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80074ba:	2301      	movs	r3, #1
 80074bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d102      	bne.n	80074cc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80074c6:	2300      	movs	r3, #0
 80074c8:	73fb      	strb	r3, [r7, #15]
 80074ca:	e008      	b.n	80074de <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d102      	bne.n	80074da <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80074d4:	2301      	movs	r3, #1
 80074d6:	73fb      	strb	r3, [r7, #15]
 80074d8:	e001      	b.n	80074de <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80074da:	f7f9 fa9f 	bl	8000a1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074e4:	7bfa      	ldrb	r2, [r7, #15]
 80074e6:	4611      	mov	r1, r2
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fe fdc2 	bl	8006072 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fe fd7b 	bl	8005ff0 <USBD_LL_Reset>
}
 80074fa:	bf00      	nop
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007512:	4618      	mov	r0, r3
 8007514:	f7fe fdbd 	bl	8006092 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	6812      	ldr	r2, [r2, #0]
 8007526:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800752a:	f043 0301 	orr.w	r3, r3, #1
 800752e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d005      	beq.n	8007544 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007538:	4b04      	ldr	r3, [pc, #16]	; (800754c <HAL_PCD_SuspendCallback+0x48>)
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	4a03      	ldr	r2, [pc, #12]	; (800754c <HAL_PCD_SuspendCallback+0x48>)
 800753e:	f043 0306 	orr.w	r3, r3, #6
 8007542:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	e000ed00 	.word	0xe000ed00

08007550 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe fdac 	bl	80060bc <USBD_LL_Resume>
}
 8007564:	bf00      	nop
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800757e:	78fa      	ldrb	r2, [r7, #3]
 8007580:	4611      	mov	r1, r2
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe fdd7 	bl	8006136 <USBD_LL_IsoOUTIncomplete>
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	460b      	mov	r3, r1
 800759a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075a2:	78fa      	ldrb	r2, [r7, #3]
 80075a4:	4611      	mov	r1, r2
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fe fdb8 	bl	800611c <USBD_LL_IsoINIncomplete>
}
 80075ac:	bf00      	nop
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fe fdc4 	bl	8006150 <USBD_LL_DevConnected>
}
 80075c8:	bf00      	nop
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fe fdc1 	bl	8006166 <USBD_LL_DevDisconnected>
}
 80075e4:	bf00      	nop
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d13c      	bne.n	8007676 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80075fc:	4a20      	ldr	r2, [pc, #128]	; (8007680 <USBD_LL_Init+0x94>)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a1e      	ldr	r2, [pc, #120]	; (8007680 <USBD_LL_Init+0x94>)
 8007608:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800760c:	4b1c      	ldr	r3, [pc, #112]	; (8007680 <USBD_LL_Init+0x94>)
 800760e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007612:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007614:	4b1a      	ldr	r3, [pc, #104]	; (8007680 <USBD_LL_Init+0x94>)
 8007616:	2204      	movs	r2, #4
 8007618:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800761a:	4b19      	ldr	r3, [pc, #100]	; (8007680 <USBD_LL_Init+0x94>)
 800761c:	2202      	movs	r2, #2
 800761e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007620:	4b17      	ldr	r3, [pc, #92]	; (8007680 <USBD_LL_Init+0x94>)
 8007622:	2200      	movs	r2, #0
 8007624:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007626:	4b16      	ldr	r3, [pc, #88]	; (8007680 <USBD_LL_Init+0x94>)
 8007628:	2202      	movs	r2, #2
 800762a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800762c:	4b14      	ldr	r3, [pc, #80]	; (8007680 <USBD_LL_Init+0x94>)
 800762e:	2200      	movs	r2, #0
 8007630:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007632:	4b13      	ldr	r3, [pc, #76]	; (8007680 <USBD_LL_Init+0x94>)
 8007634:	2200      	movs	r2, #0
 8007636:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007638:	4b11      	ldr	r3, [pc, #68]	; (8007680 <USBD_LL_Init+0x94>)
 800763a:	2200      	movs	r2, #0
 800763c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800763e:	4b10      	ldr	r3, [pc, #64]	; (8007680 <USBD_LL_Init+0x94>)
 8007640:	2200      	movs	r2, #0
 8007642:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007644:	4b0e      	ldr	r3, [pc, #56]	; (8007680 <USBD_LL_Init+0x94>)
 8007646:	2200      	movs	r2, #0
 8007648:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800764a:	480d      	ldr	r0, [pc, #52]	; (8007680 <USBD_LL_Init+0x94>)
 800764c:	f7fa fe2c 	bl	80022a8 <HAL_PCD_Init>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007656:	f7f9 f9e1 	bl	8000a1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800765a:	2180      	movs	r1, #128	; 0x80
 800765c:	4808      	ldr	r0, [pc, #32]	; (8007680 <USBD_LL_Init+0x94>)
 800765e:	f7fb ff72 	bl	8003546 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007662:	2240      	movs	r2, #64	; 0x40
 8007664:	2100      	movs	r1, #0
 8007666:	4806      	ldr	r0, [pc, #24]	; (8007680 <USBD_LL_Init+0x94>)
 8007668:	f7fb ff26 	bl	80034b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800766c:	2280      	movs	r2, #128	; 0x80
 800766e:	2101      	movs	r1, #1
 8007670:	4803      	ldr	r0, [pc, #12]	; (8007680 <USBD_LL_Init+0x94>)
 8007672:	f7fb ff21 	bl	80034b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20002228 	.word	0x20002228

08007684 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800769a:	4618      	mov	r0, r3
 800769c:	f7fa ff21 	bl	80024e2 <HAL_PCD_Start>
 80076a0:	4603      	mov	r3, r0
 80076a2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 f918 	bl	80078dc <USBD_Get_USB_Status>
 80076ac:	4603      	mov	r3, r0
 80076ae:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	4608      	mov	r0, r1
 80076c4:	4611      	mov	r1, r2
 80076c6:	461a      	mov	r2, r3
 80076c8:	4603      	mov	r3, r0
 80076ca:	70fb      	strb	r3, [r7, #3]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70bb      	strb	r3, [r7, #2]
 80076d0:	4613      	mov	r3, r2
 80076d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80076e2:	78bb      	ldrb	r3, [r7, #2]
 80076e4:	883a      	ldrh	r2, [r7, #0]
 80076e6:	78f9      	ldrb	r1, [r7, #3]
 80076e8:	f7fb fb05 	bl	8002cf6 <HAL_PCD_EP_Open>
 80076ec:	4603      	mov	r3, r0
 80076ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 f8f2 	bl	80078dc <USBD_Get_USB_Status>
 80076f8:	4603      	mov	r3, r0
 80076fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	460b      	mov	r3, r1
 8007710:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007720:	78fa      	ldrb	r2, [r7, #3]
 8007722:	4611      	mov	r1, r2
 8007724:	4618      	mov	r0, r3
 8007726:	f7fb fb4e 	bl	8002dc6 <HAL_PCD_EP_Close>
 800772a:	4603      	mov	r3, r0
 800772c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800772e:	7bfb      	ldrb	r3, [r7, #15]
 8007730:	4618      	mov	r0, r3
 8007732:	f000 f8d3 	bl	80078dc <USBD_Get_USB_Status>
 8007736:	4603      	mov	r3, r0
 8007738:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800773a:	7bbb      	ldrb	r3, [r7, #14]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007750:	2300      	movs	r3, #0
 8007752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800775e:	78fa      	ldrb	r2, [r7, #3]
 8007760:	4611      	mov	r1, r2
 8007762:	4618      	mov	r0, r3
 8007764:	f7fb fc0e 	bl	8002f84 <HAL_PCD_EP_SetStall>
 8007768:	4603      	mov	r3, r0
 800776a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800776c:	7bfb      	ldrb	r3, [r7, #15]
 800776e:	4618      	mov	r0, r3
 8007770:	f000 f8b4 	bl	80078dc <USBD_Get_USB_Status>
 8007774:	4603      	mov	r3, r0
 8007776:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007778:	7bbb      	ldrb	r3, [r7, #14]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	460b      	mov	r3, r1
 800778c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800779c:	78fa      	ldrb	r2, [r7, #3]
 800779e:	4611      	mov	r1, r2
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fb fc53 	bl	800304c <HAL_PCD_EP_ClrStall>
 80077a6:	4603      	mov	r3, r0
 80077a8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 f895 	bl	80078dc <USBD_Get_USB_Status>
 80077b2:	4603      	mov	r3, r0
 80077b4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80077b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	460b      	mov	r3, r1
 80077ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077d2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80077d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	da0b      	bge.n	80077f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80077dc:	78fb      	ldrb	r3, [r7, #3]
 80077de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077e2:	68f9      	ldr	r1, [r7, #12]
 80077e4:	4613      	mov	r3, r2
 80077e6:	00db      	lsls	r3, r3, #3
 80077e8:	1a9b      	subs	r3, r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	440b      	add	r3, r1
 80077ee:	333e      	adds	r3, #62	; 0x3e
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	e00b      	b.n	800780c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80077f4:	78fb      	ldrb	r3, [r7, #3]
 80077f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077fa:	68f9      	ldr	r1, [r7, #12]
 80077fc:	4613      	mov	r3, r2
 80077fe:	00db      	lsls	r3, r3, #3
 8007800:	1a9b      	subs	r3, r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	440b      	add	r3, r1
 8007806:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800780a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007832:	78fa      	ldrb	r2, [r7, #3]
 8007834:	4611      	mov	r1, r2
 8007836:	4618      	mov	r0, r3
 8007838:	f7fb fa38 	bl	8002cac <HAL_PCD_SetAddress>
 800783c:	4603      	mov	r3, r0
 800783e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007840:	7bfb      	ldrb	r3, [r7, #15]
 8007842:	4618      	mov	r0, r3
 8007844:	f000 f84a 	bl	80078dc <USBD_Get_USB_Status>
 8007848:	4603      	mov	r3, r0
 800784a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800784c:	7bbb      	ldrb	r3, [r7, #14]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b086      	sub	sp, #24
 800785a:	af00      	add	r7, sp, #0
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	607a      	str	r2, [r7, #4]
 8007860:	603b      	str	r3, [r7, #0]
 8007862:	460b      	mov	r3, r1
 8007864:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007874:	7af9      	ldrb	r1, [r7, #11]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	f7fb fb39 	bl	8002ef0 <HAL_PCD_EP_Transmit>
 800787e:	4603      	mov	r3, r0
 8007880:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	4618      	mov	r0, r3
 8007886:	f000 f829 	bl	80078dc <USBD_Get_USB_Status>
 800788a:	4603      	mov	r3, r0
 800788c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800788e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3718      	adds	r7, #24
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	607a      	str	r2, [r7, #4]
 80078a2:	603b      	str	r3, [r7, #0]
 80078a4:	460b      	mov	r3, r1
 80078a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80078b6:	7af9      	ldrb	r1, [r7, #11]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	f7fb facd 	bl	8002e5a <HAL_PCD_EP_Receive>
 80078c0:	4603      	mov	r3, r0
 80078c2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 f808 	bl	80078dc <USBD_Get_USB_Status>
 80078cc:	4603      	mov	r3, r0
 80078ce:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80078d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
	...

080078dc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	4603      	mov	r3, r0
 80078e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80078ea:	79fb      	ldrb	r3, [r7, #7]
 80078ec:	2b03      	cmp	r3, #3
 80078ee:	d817      	bhi.n	8007920 <USBD_Get_USB_Status+0x44>
 80078f0:	a201      	add	r2, pc, #4	; (adr r2, 80078f8 <USBD_Get_USB_Status+0x1c>)
 80078f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f6:	bf00      	nop
 80078f8:	08007909 	.word	0x08007909
 80078fc:	0800790f 	.word	0x0800790f
 8007900:	08007915 	.word	0x08007915
 8007904:	0800791b 	.word	0x0800791b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]
    break;
 800790c:	e00b      	b.n	8007926 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800790e:	2303      	movs	r3, #3
 8007910:	73fb      	strb	r3, [r7, #15]
    break;
 8007912:	e008      	b.n	8007926 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007914:	2301      	movs	r3, #1
 8007916:	73fb      	strb	r3, [r7, #15]
    break;
 8007918:	e005      	b.n	8007926 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800791a:	2303      	movs	r3, #3
 800791c:	73fb      	strb	r3, [r7, #15]
    break;
 800791e:	e002      	b.n	8007926 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007920:	2303      	movs	r3, #3
 8007922:	73fb      	strb	r3, [r7, #15]
    break;
 8007924:	bf00      	nop
  }
  return usb_status;
 8007926:	7bfb      	ldrb	r3, [r7, #15]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3714      	adds	r7, #20
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <__libc_init_array>:
 8007934:	b570      	push	{r4, r5, r6, lr}
 8007936:	4e0d      	ldr	r6, [pc, #52]	; (800796c <__libc_init_array+0x38>)
 8007938:	4c0d      	ldr	r4, [pc, #52]	; (8007970 <__libc_init_array+0x3c>)
 800793a:	1ba4      	subs	r4, r4, r6
 800793c:	10a4      	asrs	r4, r4, #2
 800793e:	2500      	movs	r5, #0
 8007940:	42a5      	cmp	r5, r4
 8007942:	d109      	bne.n	8007958 <__libc_init_array+0x24>
 8007944:	4e0b      	ldr	r6, [pc, #44]	; (8007974 <__libc_init_array+0x40>)
 8007946:	4c0c      	ldr	r4, [pc, #48]	; (8007978 <__libc_init_array+0x44>)
 8007948:	f000 f820 	bl	800798c <_init>
 800794c:	1ba4      	subs	r4, r4, r6
 800794e:	10a4      	asrs	r4, r4, #2
 8007950:	2500      	movs	r5, #0
 8007952:	42a5      	cmp	r5, r4
 8007954:	d105      	bne.n	8007962 <__libc_init_array+0x2e>
 8007956:	bd70      	pop	{r4, r5, r6, pc}
 8007958:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800795c:	4798      	blx	r3
 800795e:	3501      	adds	r5, #1
 8007960:	e7ee      	b.n	8007940 <__libc_init_array+0xc>
 8007962:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007966:	4798      	blx	r3
 8007968:	3501      	adds	r5, #1
 800796a:	e7f2      	b.n	8007952 <__libc_init_array+0x1e>
 800796c:	080079f8 	.word	0x080079f8
 8007970:	080079f8 	.word	0x080079f8
 8007974:	080079f8 	.word	0x080079f8
 8007978:	080079fc 	.word	0x080079fc

0800797c <memset>:
 800797c:	4402      	add	r2, r0
 800797e:	4603      	mov	r3, r0
 8007980:	4293      	cmp	r3, r2
 8007982:	d100      	bne.n	8007986 <memset+0xa>
 8007984:	4770      	bx	lr
 8007986:	f803 1b01 	strb.w	r1, [r3], #1
 800798a:	e7f9      	b.n	8007980 <memset+0x4>

0800798c <_init>:
 800798c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798e:	bf00      	nop
 8007990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007992:	bc08      	pop	{r3}
 8007994:	469e      	mov	lr, r3
 8007996:	4770      	bx	lr

08007998 <_fini>:
 8007998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799a:	bf00      	nop
 800799c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800799e:	bc08      	pop	{r3}
 80079a0:	469e      	mov	lr, r3
 80079a2:	4770      	bx	lr
